{
  "id": "82kPqoBYiySD8ih7nAXkFuDhjyLjtPi8jr6gSpxV4VMW",
  "title": "The Go Blog",
  "displayTitle": "Dev - Golang Blog",
  "url": "http://blog.golang.org/feed.atom",
  "feedLink": "http://blog.golang.org/feed.atom",
  "items": [
    {
      "title": "Go Turns 15",
      "url": "https://go.dev/blog/15years",
      "date": 1731283200,
      "author": "Austin Clements, for the Go team",
      "unread": true,
      "desc": "",
      "content": "\n<div id=\"blog\"><div id=\"content\">\n  <div id=\"content\">\n\n    <div class=\"Article\" data-slug=\"/blog/15years\">\n    \n    <h1 class=\"small\"><a href=\"/blog/\">The Go Blog</a></h1>\n    \n\n    <h1>Go Turns 15</h1>\n      \n      <p class=\"author\">\n      Austin Clements, for the Go team<br>\n      11 November 2024\n      </p>\n      \n      <div style=\"float:right; margin: 0 0 1em 1em; width: 245px\">\n<img src=\"/doc/gopher/fifteen.gif\" height=\"245\" width=\"245\"><br/>\n<i>Thanks to Renee French for drawing and animating the gopher doing the “15 puzzle”.</i>\n</div>\n<p>Happy birthday, Go!</p>\n<p>On Sunday, we celebrated the 15th anniversary of <a href=\"https://opensource.googleblog.com/2009/11/hey-ho-lets-go.html\" rel=\"noreferrer\" target=\"_blank\">the Go open source\nrelease</a>!</p>\n<p>So much has changed since <a href=\"/blog/10years\">Go&rsquo;s 10 year anniversary</a>,\nboth in Go and in the world. In other ways, so much has stayed the\nsame: Go remains committed to stability, safety, and supporting\nsoftware engineering and production at scale.</p>\n<p>And Go is going strong! Go&rsquo;s user base has more than tripled in the\npast five years, making it one of the fastest growing languages. From\nits beginnings just fifteen years ago, Go has become a top 10 language\nand the language of the modern cloud.</p>\n<p>With the releases of <a href=\"/blog/go1.22\">Go 1.22 in February</a> and <a href=\"/blog/go1.23\">Go 1.23\nin August</a>, it&rsquo;s been the year of <code>for</code> loops. Go 1.22\nmade variables introduced by <code>for</code> loops <a href=\"/blog/loopvar-preview\">scoped per\niteration</a>, rather than per loop, addressing a\nlong-standing language &ldquo;gotcha&rdquo;. Over ten years ago, leading up to the\nrelease of Go 1, the Go team made decisions about several language\ndetails; among them whether <code>for</code> loops should create a new loop\nvariable on each iteration. Amusingly, the discussion was quite brief\nand distinctly unopinionated. Rob Pike closed it out in true Rob Pike\nfashion with a single word: “stet” (leave it be). And so it was. While\nseemingly insignificant at the time, years of production experience\nhighlighted the implications of this decision. But in that time, we\nalso built robust tools for understanding the effects of changes to\nGo—notably, ecosystem-wide analysis and testing across the entire\nGoogle codebase—and established processes for working with the\ncommunity and getting feedback. Following extensive testing, analysis,\nand community discussion, we rolled out the change, accompanied by a\n<a href=\"https://go.googlesource.com/proposal/+/master/design/60078-loopvar.md#transition-support-tooling\" rel=\"noreferrer\" target=\"_blank\">hash bisection\ntool</a>\nto assist developers in pinpointing code affected by the change at\nscale.</p>\n<p>The change to <code>for</code> loops was part of a five year trajectory of\nmeasured changes. It would not have been possible without <a href=\"/blog/toolchain\">forward\nlanguage compatibility</a> introduced in Go 1.21. This,\nin turn, built upon the foundation laid by Go modules, which were\nintroduced in Go 1.14 four and a half years ago.</p>\n<p>Go 1.23 further built on this change to introduce iterators and\n<a href=\"/blog/range-functions\">user-defined for-range loops</a>. Combined with\ngenerics—introduced in Go 1.18, just two and a half years ago!—this\ncreates a powerful and ergonomic foundation for custom collections and\nmany other programming patterns.</p>\n<p>These releases have also brought many improvements in production\nreadiness, including <a href=\"/blog/routing-enhancements\">much-anticipated enhancements to the standard\nlibrary&rsquo;s HTTP router</a>, a <a href=\"/blog/execution-traces-2024\">total overhaul\nof execution traces</a>, and <a href=\"/blog/chacha8rand\">stronger\nrandomness</a> for all Go applications. Additionally,\nthe introduction of our <a href=\"/blog/randv2\">first v2 standard library\npackage</a> establishes a template for future library\nevolution and modernization.</p>\n<p>Over the past year we&rsquo;ve also been cautiously rolling out <a href=\"/blog/gotelemetry\">opt-in\ntelemetry</a> for Go tools. This system will give Go&rsquo;s\ndevelopers data to make better decisions, while remaining completely\n<a href=\"https://telemetry.go.dev/\" rel=\"noreferrer\" target=\"_blank\">open</a> and anonymous. Go telemetry first\nappeared in\n<a href=\"https://github.com/golang/tools/blob/master/gopls/README.md\" rel=\"noreferrer\" target=\"_blank\">gopls</a>,\nthe Go language server, where it has already led to a <a href=\"https://github.com/golang/go/issues?q=is%3Aissue+label%3Agopls%2Ftelemetry-wins\" rel=\"noreferrer\" target=\"_blank\">litany of\nimprovements</a>.\nThis effort paves the way to make programming in Go an even better\nexperience for everyone.</p>\n<p>Looking forward, we&rsquo;re evolving Go to better leverage the capabilities\nof current and future hardware. Hardware has changed a lot in the past\n15 years. In order to ensure Go continues to support high-performance,\nlarge-scale production workloads for the <em>next</em> 15 years, we need to\nadapt to large multicores, advanced instruction sets, and the growing\nimportance of locality in increasingly non-uniform memory hierarchies.\nSome of these improvements will be transparent. Go 1.24 will have a\ntotally new <code>map</code> implementation under the hood that&rsquo;s more efficient\non modern CPUs. And we&rsquo;re prototyping new garbage collection\nalgorithms designed around the capabilities and constraints of modern\nhardware. Some improvements will be in the form of new APIs and tools\nso Go developers can better leverage modern hardware. We&rsquo;re looking at\nhow to support the latest vector and matrix hardware instructions, and\nmultiple ways that applications can build in CPU and memory locality.\nA core principle guiding our efforts is <em>composable optimization</em>: the\nimpact of an optimization on a codebase should be as localized as\npossible, ensuring that the ease of development across the rest of the\ncodebase is not compromised.</p>\n<p>We&rsquo;re continuing to ensure Go&rsquo;s standard library is safe by default\nand safe by design. This includes ongoing efforts to incorporate\nbuilt-in, native support for FIPS-certified cryptography, so that FIPS\ncrypto will be just a flag flip away for applications that need it.\nFurthermore, we&rsquo;re evolving Go&rsquo;s standard library packages where we\ncan and, following the example of <code>math/rand/v2</code>, considering where\nnew APIs can significantly enhance the ease of writing safe and secure\nGo code.</p>\n<p>We&rsquo;re working on making Go better for AI—and AI better for Go—by\nenhancing Go&rsquo;s capabilities in AI infrastructure, applications, and\ndeveloper assistance. Go is a great language for building production\nsystems, and we want it to be a great language for <a href=\"/blog/llmpowered\">building\nproduction <em>AI</em> systems</a>, too.\nGo&rsquo;s dependability as a language\nfor Cloud infrastructure has made it a natural choice for\n<a href=\"https://ollama.com/\" rel=\"noreferrer\" target=\"_blank\">LLM</a> <a href=\"https://weaviate.io/\" rel=\"noreferrer\" target=\"_blank\">infrastructure</a>\n<a href=\"https://localai.io/\" rel=\"noreferrer\" target=\"_blank\">as</a> <a href=\"https://zilliz.com/what-is-milvus\" rel=\"noreferrer\" target=\"_blank\">well</a>.\nFor AI applications, we will continue building out first-class support\nfor Go in popular AI SDKs, including\n<a href=\"https://pkg.go.dev/github.com/tmc/langchaingo\" rel=\"noreferrer\" target=\"_blank\">LangChainGo</a> and\n<a href=\"https://developers.googleblog.com/en/introducing-genkit-for-go-build-scalable-ai-powered-apps-in-go/\" rel=\"noreferrer\" target=\"_blank\">Genkit</a>.\nAnd from its very beginning, Go aimed to improve the end-to-end\nsoftware engineering process, so naturally we&rsquo;re looking at bringing\nthe latest tools and techniques from AI to bear on reducing developer\ntoil, leaving more time for the fun stuff—like actually programming!</p>\n<h2 id=\"thank-you\">Thank you</h2>\n<p>All of this is only possible because of Go&rsquo;s incredible contributors\nand thriving community. Fifteen years ago we could only dream of the\nsuccess that Go has become and the community that has developed around\nGo. Thank you to everyone who has played a part, large and small. We\nwish you all the best in the coming year.</p>\n\n    </div>\n\n    \n    <div class=\"Article prevnext\">\n    \n    \n      \n        <p>\n        \n        \n          \n            <b>Previous article: </b><a href=\"/blog/alias-names\">What&#39;s in an (Alias) Name?</a><br>\n          \n        \n        <b><a href=\"/blog/all\">Blog Index</a></b>\n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n    </div>\n    \n\n  </div>\n</div>\n\n<script src=\"/js/play.js\"></script>\n\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    }
  ]
}