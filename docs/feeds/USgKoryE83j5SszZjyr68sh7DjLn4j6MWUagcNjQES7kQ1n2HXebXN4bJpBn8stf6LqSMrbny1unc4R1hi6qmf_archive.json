{"id":"USgKoryE83j5SszZjyr68sh7DjLn4j6MWUagcNjQES7kQ1n2HXebXN4bJpBn8stf6LqSMrbny1unc4R1hi6qmf","title":"top scoring links : golang","displayTitle":"Reddit - Go","url":"https://www.reddit.com/r/golang/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/golang/top/?sort=top&t=day&limit=6","items":[{"title":"Is there a scenario where JavaScript's event loop is more efficient than goroutines?","url":"https://www.reddit.com/r/golang/comments/1hilb51/is_there_a_scenario_where_javascripts_event_loop/","date":1734705929,"author":"/u/azn4lifee","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>I&#39;m learning Go, specifically goroutines, and I&#39;m curious about this question. From what I understand, goroutines use actual threads on your CPU for true multitasking, while JS async tasks are queued in an event loop within a single thread.</p> <p>It makes me think, is there a scenario where JS is more efficient? For example, if I had a million HTTP calls and did nothing with the results, would JS be more efficient, since all million calls are within a single thread?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/azn4lifee\"> /u/azn4lifee </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hilb51/is_there_a_scenario_where_javascripts_event_loop/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hilb51/is_there_a_scenario_where_javascripts_event_loop/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Tuning Go Application, which has GC issues with a few steps","url":"https://www.reddit.com/r/golang/comments/1hihakm/tuning_go_application_which_has_gc_issues_with_a/","date":1734691859,"author":"/u/bitter-cognac","unread":true,"desc":"","content":"<table> <tr><td> <a href=\"https://www.reddit.com/r/golang/comments/1hihakm/tuning_go_application_which_has_gc_issues_with_a/\"> <img src=\"https://external-preview.redd.it/sKDHQ2iwQKyEAuLgqKDBWdD4kCkxErOYhLzTXIcUPuw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=1dc35ee5f3594ac7be0ab7ddaf0bded0e6c7559c\" alt=\"Tuning Go Application, which has GC issues with a few steps\" title=\"Tuning Go Application, which has GC issues with a few steps\" /> </a> </td><td> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/bitter-cognac\"> /u/bitter-cognac </a> <br/> <span><a href=\"https://itnext.io/tuning-go-application-which-has-gc-issues-with-a-few-steps-4487624b313e?source=friends_link&amp;sk=e4f5d922c5cb092cc9f9461be18ae26b\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hihakm/tuning_go_application_which_has_gc_issues_with_a/\">[comments]</a></span> </td></tr></table>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Are Pointers in Go Faster Than Values?","url":"https://www.reddit.com/r/golang/comments/1hih5b9/are_pointers_in_go_faster_than_values/","date":1734691226,"author":"/u/EightLines_03","unread":true,"desc":"","content":"<table> <tr><td> <a href=\"https://www.reddit.com/r/golang/comments/1hih5b9/are_pointers_in_go_faster_than_values/\"> <img src=\"https://external-preview.redd.it/mQ4Hd8sFF41ty9JuRU-dwxXrW-mey161e6l1R_87gAw.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=95fdc8dc3f34f064bb9924821f38f320e4c320a7\" alt=\"Are Pointers in Go Faster Than Values?\" title=\"Are Pointers in Go Faster Than Values?\" /> </a> </td><td> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/EightLines_03\"> /u/EightLines_03 </a> <br/> <span><a href=\"https://blog.boot.dev/golang/pointers-faster-than-values/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hih5b9/are_pointers_in_go_faster_than_values/\">[comments]</a></span> </td></tr></table>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"What can I use for executing a large number of tasks across multiple servers?","url":"https://www.reddit.com/r/golang/comments/1hial9o/what_can_i_use_for_executing_a_large_number_of/","date":1734664593,"author":"/u/sunshine-and-sorrow","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>I have a list of 250,000,000 inputs that I need to process. Running this on a single server will take too long, so I am thinking of running it on 100-200 virtual machines.</p> <p>At a high level, I was thinking each time a worker can request a batch of inputs, process it and then insert it into a database. I&#39;m hoping that all I need to do is write the fetch and execute functions.</p> <p>So far I found <a href=\"https://github.com/hibiken/asynq\">asynq</a>, which looks promising, but I wanted to get an idea about what else might be out there that I may have missed. Ideally I&#39;m just looking for something simple that I can run in Docker Swarm, and I don&#39;t want to have to deal with the worker registration, etc.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/sunshine-and-sorrow\"> /u/sunshine-and-sorrow </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hial9o/what_can_i_use_for_executing_a_large_number_of/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hial9o/what_can_i_use_for_executing_a_large_number_of/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Is it necessary to use Python for AI applications with Go?","url":"https://www.reddit.com/r/golang/comments/1hi91rc/is_it_necessary_to_use_python_for_ai_applications/","date":1734659484,"author":"/u/Nomin55","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>I&#39;ve been learning Go and it&#39;s becoming my favorite programming language. I would like to venture into the development of applications and services that integrate AI. However, almost all the tutorials I find about it use Python and Python frameworks like FastAPI to serve the models and I find almost no material on Go.</p> <p>I wonder if this is for pure convenience, since data guys are usually more familiar with Python, or if it&#39;s due to some technical limitations in Go. As a indie developer, I wish I could focus on a minimal set of technologies, and I would like to be able to use Go for all things server-related.</p> <p>I would appreciate it if you can share your experiences or references to learn this.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Nomin55\"> /u/Nomin55 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hi91rc/is_it_necessary_to_use_python_for_ai_applications/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hi91rc/is_it_necessary_to_use_python_for_ai_applications/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Go character encoding detector","url":"https://www.reddit.com/r/golang/comments/1hi8bi4/go_character_encoding_detector/","date":1734657165,"author":"/u/Training_Square2340","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>üëã Hey Gophers! üêøÔ∏è</p> <p>I&#39;m excited to share with you my latest creation: <strong><a href=\"https://github.com/wlynxg/chardet\">chardet for Go</a></strong>! üöÄ This package is your new go-to tool for detecting text encoding formats, inspired by the renowned Python <a href=\"https://github.com/chardet/chardet\">chardet</a> library.</p> <p>With <strong>chardet for Go</strong>, you can:</p> <ul> <li><strong>Detect Multiple Encoding Formats</strong>: From UTF-8 to ISO-8859-1, and beyond!</li> <li><strong>Simplify Your Text Processing</strong>: No more guessing or manual checks for encoding!</li> </ul> <p>Here&#39;s how easy it is to use:</p> <p>```go package main</p> <p>import ( &quot;fmt&quot; &quot;github.com/wlynxg/chardet&quot; )</p> <p>func main() { data := []byte(&quot;Your text data here...&quot;) // Your text here</p> <pre><code>// Detect the encoding result := chardet.Detect(data) // Print the detected encoding and confidence level fmt.Printf(&quot;Detected encoding: %s, Confidence: %.2f\\n&quot;, result.Encoding, result.Confidence) </code></pre> <p>} ```</p> <p><strong>What Can You Do With It?</strong></p> <ul> <li><strong>Web Scraping</strong>: Accurately process content from various websites.</li> <li><strong>File Handling</strong>: Automatically determine the encoding of files before processing.</li> <li><strong>Data Migration</strong>: Ensure data integrity when moving between different systems.</li> </ul> <p>I&#39;m eager to hear your feedback, ideas for improvements, or any interesting use cases you might come up with! Let&#39;s make text encoding detection in Go as seamless as possible. üôè</p> <p>Join the conversation, and let&#39;s explore the possibilities together! üåü</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Training_Square2340\"> /u/Training_Square2340 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hi8bi4/go_character_encoding_detector/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hi8bi4/go_character_encoding_detector/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""}]}