{"id":"82kPqoBYiySD8ih7nAXkFuDhjyLjtPi8jr6gSpxV4VMW","title":"The Go Blog","displayTitle":"Dev - Golang Blog","url":"http://blog.golang.org/feed.atom","feedLink":"http://blog.golang.org/feed.atom","items":[{"title":"Go Protobuf: The new Opaque API","url":"https://go.dev/blog/protobuf-opaque","date":1734307200,"author":"Michael Stapelberg","unread":true,"desc":"","content":"\n<div id=\"blog\"><div id=\"content\">\n  <div id=\"content\">\n\n    <div class=\"Article\" data-slug=\"/blog/protobuf-opaque\">\n    \n    <h1 class=\"small\"><a href=\"/blog/\">The Go Blog</a></h1>\n    \n\n    <h1>Go Protobuf: The new Opaque API</h1>\n      \n      <p class=\"author\">\n      Michael Stapelberg<br>\n      16 December 2024\n      </p>\n      \n      <p>[<a href=\"https://en.wikipedia.org/wiki/Protocol_Buffers\" rel=\"noreferrer\" target=\"_blank\">Protocol Buffers (Protobuf)</a>\nis Google&rsquo;s language-neutral data interchange format. See\n<a href=\"https://protobuf.dev/\" rel=\"noreferrer\" target=\"_blank\">protobuf.dev</a>.]</p>\n<p>Back in March 2020, we released the <code>google.golang.org/protobuf</code> module, <a href=\"/blog/protobuf-apiv2\">a\nmajor overhaul of the Go Protobuf API</a>. This\npackage introduced first-class <a href=\"https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect\" rel=\"noreferrer\" target=\"_blank\">support for\nreflection</a>,\na <a href=\"https://pkg.go.dev/google.golang.org/protobuf/types/dynamicpb\" rel=\"noreferrer\" target=\"_blank\"><code>dynamicpb</code></a>\nimplementation and the\n<a href=\"https://pkg.go.dev/google.golang.org/protobuf/testing/protocmp\" rel=\"noreferrer\" target=\"_blank\"><code>protocmp</code></a>\npackage for easier testing.</p>\n<p>That release introduced a new protobuf module with a new API. Today, we are\nreleasing an additional API for generated code, meaning the Go code in the\n<code>.pb.go</code> files created by the protocol compiler (<code>protoc</code>). This blog post\nexplains our motivation for creating a new API and shows you how to use it in\nyour projects.</p>\n<p>To be clear: We are not removing anything. We will continue to support the\nexisting API for generated code, just like we still support the older protobuf\nmodule (by wrapping the <code>google.golang.org/protobuf</code> implementation). Go is\n<a href=\"/blog/compat\">committed to backwards compatibility</a> and this\napplies to Go Protobuf, too!</p>\n<h2 id=\"background\">Background: the (existing) Open Struct API</h2>\n<p>We now call the existing API the Open Struct API, because generated struct types\nare open to direct access. In the next section, we will see how it differs from\nthe new Opaque API.</p>\n<p>To work with protocol buffers, you first create a <code>.proto</code> definition file like\nthis one:</p>\n<pre><code>edition = &quot;2023&quot;;  // successor to proto2 and proto3\n\npackage log;\n\nmessage LogEntry {\n  string backend_server = 1;\n  uint32 request_size = 2;\n  string ip_address = 3;\n}\n</code></pre>\n<p>Then, you <a href=\"https://protobuf.dev/getting-started/gotutorial/\" rel=\"noreferrer\" target=\"_blank\">run the protocol compiler\n(<code>protoc</code>)</a> to generate code\nlike the following (in a <code>.pb.go</code> file):</p>\n<pre><code>package logpb\n\ntype LogEntry struct {\n  BackendServer *string\n  RequestSize   *uint32\n  IPAddress     *string\n  // …internal fields elided…\n}\n\nfunc (l *LogEntry) GetBackendServer() string { … }\nfunc (l *LogEntry) GetRequestSize() uint32   { … }\nfunc (l *LogEntry) GetIPAddress() string     { … }\n</code></pre>\n<p>Now you can import the generated <code>logpb</code> package from your Go code and call\nfunctions like\n<a href=\"https://pkg.go.dev/google.golang.org/protobuf/proto#Marshal\" rel=\"noreferrer\" target=\"_blank\"><code>proto.Marshal</code></a>\nto encode <code>logpb.LogEntry</code> messages into protobuf wire format.</p>\n<p>You can find more details in the <a href=\"https://protobuf.dev/reference/go/go-generated/\" rel=\"noreferrer\" target=\"_blank\">Generated Code API\ndocumentation</a>.</p>\n<h3 id=\"presence\">(Existing) Open Struct API: Field Presence</h3>\n<p>An important aspect of this generated code is how <em>field presence</em> (whether a\nfield is set or not) is modeled. For instance, the above example models presence\nusing pointers, so you could set the <code>BackendServer</code> field to:</p>\n<ol>\n<li><code>proto.String(&quot;zrh01.prod&quot;)</code>: the field is set and contains &ldquo;zrh01.prod&rdquo;</li>\n<li><code>proto.String(&quot;&quot;)</code>: the field is set (non-<code>nil</code> pointer) but contains an\nempty value</li>\n<li><code>nil</code> pointer: the field is not set</li>\n</ol>\n<p>If you are used to generated code not having pointers, you are probably using\n<code>.proto</code> files that start with <code>syntax = &quot;proto3&quot;</code>. The field presence behavior\nchanged over the years:</p>\n<ul>\n<li><code>syntax = &quot;proto2&quot;</code> uses <em>explicit presence</em> by default</li>\n<li><code>syntax = &quot;proto3&quot;</code> used <em>implicit presence</em> by default (where cases 2 and 3\ncannot be distinguished and are both represented by an empty string), but was\nlater extended to allow <a href=\"https://protobuf.dev/programming-guides/proto3/#field-labels\" rel=\"noreferrer\" target=\"_blank\">opting into explicit presence with the <code>optional</code>\nkeyword</a></li>\n<li><code>edition = &quot;2023&quot;</code>, the <a href=\"https://protobuf.dev/editions/overview/\" rel=\"noreferrer\" target=\"_blank\">successor to both proto2 and\nproto3</a>, uses <a href=\"https://protobuf.dev/programming-guides/field_presence/\" rel=\"noreferrer\" target=\"_blank\"><em>explicit\npresence</em></a> by default</li>\n</ul>\n<h2 id=\"opaqueapi\">The new Opaque API</h2>\n<p>We created the new <em>Opaque API</em> to uncouple the <a href=\"https://protobuf.dev/reference/go/go-generated/\" rel=\"noreferrer\" target=\"_blank\">Generated Code\nAPI</a> from the underlying\nin-memory representation. The (existing) Open Struct API has no such separation:\nit allows programs direct access to the protobuf message memory. For example,\none could use the <code>flag</code> package to parse command-line flag values into protobuf\nmessage fields:</p>\n<pre><code>var req logpb.LogEntry\nflag.StringVar(&amp;req.BackendServer, &quot;backend&quot;, os.Getenv(&quot;HOST&quot;), &quot;…&quot;)\nflag.Parse() // fills the BackendServer field from -backend flag\n</code></pre>\n<p>The problem with such a tight coupling is that we can never change how we lay\nout protobuf messages in memory. Lifting this restriction enables many\nimplementation improvements, which we&rsquo;ll see below.</p>\n<p>What changes with the new Opaque API? Here is how the generated code from the\nabove example would change:</p>\n<pre><code>package logpb\n\ntype LogEntry struct {\n  xxx_hidden_BackendServer *string // no longer exported\n  xxx_hidden_RequestSize   uint32  // no longer exported\n  xxx_hidden_IPAddress     *string // no longer exported\n  // …internal fields elided…\n}\n\nfunc (l *LogEntry) GetBackendServer() string { … }\nfunc (l *LogEntry) HasBackendServer() bool   { … }\nfunc (l *LogEntry) SetBackendServer(string)  { … }\nfunc (l *LogEntry) ClearBackendServer()      { … }\n// …\n</code></pre>\n<p>With the Opaque API, the struct fields are hidden and can no longer be\ndirectly accessed. Instead, the new accessor methods allow for getting, setting,\nor clearing a field.</p>\n<h3 id=\"lessmemory\">Opaque structs use less memory</h3>\n<p>One change we made to the memory layout is to model field presence for\nelementary fields more efficiently:</p>\n<ul>\n<li>The (existing) Open Struct API uses pointers, which adds a 64-bit word to the\nspace cost of the field.</li>\n<li>The Opaque API uses <a href=\"https://en.wikipedia.org/wiki/Bit_field\" rel=\"noreferrer\" target=\"_blank\">bit\nfields</a>, which require one bit per\nfield (ignoring padding overhead).</li>\n</ul>\n<p>Using fewer variables and pointers also lowers load on the allocator and on the\ngarbage collector.</p>\n<p>The performance improvement depends heavily on the shapes of your protocol\nmessages: The change only affects elementary fields like integers, bools, enums,\nand floats, but not strings, repeated fields, or submessages (because it is\n<a href=\"https://protobuf.dev/reference/go/opaque-faq/#memorylayout\" rel=\"noreferrer\" target=\"_blank\">less\nprofitable</a>\nfor those types).</p>\n<p>Our benchmark results show that messages with few elementary fields exhibit\nperformance that is as good as before, whereas messages with more elementary\nfields are decoded with significantly fewer allocations:</p>\n<pre><code>             │ Open Struct API │             Opaque API             │\n             │    allocs/op    │  allocs/op   vs base               │\nProd#1          360.3k ± 0%       360.3k ± 0%  +0.00% (p=0.002 n=6)\nSearch#1       1413.7k ± 0%       762.3k ± 0%  -46.08% (p=0.002 n=6)\nSearch#2        314.8k ± 0%       132.4k ± 0%  -57.95% (p=0.002 n=6)\n</code></pre>\n<p>Reducing allocations also makes decoding protobuf messages more efficient:</p>\n<pre><code>             │ Open Struct API │             Opaque API            │\n             │   user-sec/op   │ user-sec/op  vs base              │\nProd#1         55.55m ± 6%        55.28m ± 4%  ~ (p=0.180 n=6)\nSearch#1       324.3m ± 22%       292.0m ± 6%  -9.97% (p=0.015 n=6)\nSearch#2       67.53m ± 10%       45.04m ± 8%  -33.29% (p=0.002 n=6)\n</code></pre>\n<p>(All measurements done on an AMD Castle Peak Zen 2. Results on ARM and Intel\nCPUs are similar.)</p>\n<p>Note: proto3 with implicit presence similarly does not use pointers, so you will\nnot see a performance improvement if you are coming from proto3. If you were\nusing implicit presence for performance reasons, forgoing the convenience of\nbeing able to distinguish empty fields from unset ones, then the Opaque API now\nmakes it possible to use explicit presence without a performance penalty.</p>\n<h3 id=\"lazydecoding\">Motivation: Lazy Decoding</h3>\n<p>Lazy decoding is a performance optimization where the contents of a submessage\nare decoded when first accessed instead of during\n<a href=\"https://pkg.go.dev/google.golang.org/protobuf/proto#Unmarshal\" rel=\"noreferrer\" target=\"_blank\"><code>proto.Unmarshal</code></a>. Lazy\ndecoding can improve performance by avoiding unnecessarily decoding fields which\nare never accessed.</p>\n<p>Lazy decoding can&rsquo;t be supported safely by the (existing) Open Struct API. While\nthe Open Struct API provides getters, leaving the (un-decoded) struct fields\nexposed would be extremely error-prone. To ensure that the decoding logic runs\nimmediately before the field is first accessed, we must make the field private\nand mediate all accesses to it through getter and setter functions.</p>\n<p>This approach made it possible to implement lazy decoding with the Opaque\nAPI. Of course, not every workload will benefit from this optimization, but for\nthose that do benefit, the results can be spectacular: We have seen logs\nanalysis pipelines that discard messages based on a top-level message condition\n(e.g. whether <code>backend_server</code> is one of the machines running a new Linux kernel\nversion) and can skip decoding deeply nested subtrees of messages.</p>\n<p>As an example, here are the results of the micro-benchmark we included,\ndemonstrating how lazy decoding saves over 50% of the work and over 87% of\nallocations!</p>\n<pre><code>                  │   nolazy    │                lazy                │\n                  │   sec/op    │   sec/op     vs base               │\nUnmarshal/lazy-24   6.742µ ± 0%   2.816µ ± 0%  -58.23% (p=0.002 n=6)\n\n                  │    nolazy    │                lazy                 │\n                  │     B/op     │     B/op      vs base               │\nUnmarshal/lazy-24   3.666Ki ± 0%   1.814Ki ± 0%  -50.51% (p=0.002 n=6)\n\n                  │   nolazy    │               lazy                │\n                  │  allocs/op  │ allocs/op   vs base               │\nUnmarshal/lazy-24   64.000 ± 0%   8.000 ± 0%  -87.50% (p=0.002 n=6)\n</code></pre>\n<h3 id=\"pointercomparison\">Motivation: reduce pointer comparison mistakes</h3>\n<p>Modeling field presence with pointers invites pointer-related bugs.</p>\n<p>Consider an enum, declared within the <code>LogEntry</code> message:</p>\n<pre><code>message LogEntry {\n  enum DeviceType {\n    DESKTOP = 0;\n    MOBILE = 1;\n    VR = 2;\n  };\n  DeviceType device_type = 1;\n}\n</code></pre>\n<p>A simple mistake is to compare the <code>device_type</code> enum field like so:</p>\n<pre><code>if cv.DeviceType == logpb.LogEntry_DESKTOP.Enum() { // incorrect!\n</code></pre>\n<p>Did you spot the bug? The condition compares the memory address instead of the\nvalue. Because the <code>Enum()</code> accessor allocates a new variable on each call, the\ncondition can never be true. The check should have read:</p>\n<pre><code>if cv.GetDeviceType() == logpb.LogEntry_DESKTOP {\n</code></pre>\n<p>The new Opaque API prevents this mistake: Because fields are hidden, all access\nmust go through the getter.</p>\n<h3 id=\"accidentalsharing\">Motivation: reduce accidental sharing mistakes</h3>\n<p>Let&rsquo;s consider a slightly more involved pointer-related bug. Assume you are\ntrying to stabilize an RPC service that fails under high load. The following\npart of the request middleware looks correct, but still the entire service goes\ndown whenever just one customer sends a high volume of requests:</p>\n<pre><code>logEntry.IPAddress = req.IPAddress\nlogEntry.BackendServer = proto.String(hostname)\n// The redactIP() function redacts IPAddress to 127.0.0.1,\n// unexpectedly not just in logEntry *but also* in req!\ngo auditlog(redactIP(logEntry))\nif quotaExceeded(req) {\n    // BUG: All requests end up here, regardless of their source.\n    return fmt.Errorf(&quot;server overloaded&quot;)\n}\n</code></pre>\n<p>Did you spot the bug? The first line accidentally copied the pointer (thereby\nsharing the pointed-to variable between the <code>logEntry</code> and <code>req</code> messages)\ninstead of its value. It should have read:</p>\n<pre><code>logEntry.IPAddress = proto.String(req.GetIPAddress())\n</code></pre>\n<p>The new Opaque API prevents this problem as the setter takes a value\n(<code>string</code>) instead of a pointer:</p>\n<pre><code>logEntry.SetIPAddress(req.GetIPAddress())\n</code></pre>\n<h3 id=\"reflection\">Motivation: Fix Sharp Edges: reflection</h3>\n<p>To write code that works not only with a specific message type\n(e.g. <code>logpb.LogEntry</code>), but with any message type, one needs some kind of\nreflection. The previous example used a function to redact IP addresses. To work\nwith any type of message, it could have been defined as <code>func redactIP(proto.Message) proto.Message { … }</code>.</p>\n<p>Many years ago, your only option to implement a function like <code>redactIP</code> was to\nreach for <a href=\"/blog/laws-of-reflection\">Go&rsquo;s <code>reflect</code> package</a>,\nwhich resulted in very tight coupling: you had only the generator output and had\nto reverse-engineer what the input protobuf message definition might have looked\nlike. The <a href=\"/blog/protobuf-apiv2\"><code>google.golang.org/protobuf</code> module\nrelease</a> (from March 2020) introduced\n<a href=\"https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect\" rel=\"noreferrer\" target=\"_blank\">Protobuf\nreflection</a>,\nwhich should always be preferred: Go&rsquo;s <code>reflect</code> package traverses the data\nstructure&rsquo;s representation, which should be an implementation detail. Protobuf\nreflection traverses the logical tree of protocol messages without regard to its\nrepresentation.</p>\n<p>Unfortunately, merely <em>providing</em> protobuf reflection is not sufficient and\nstill leaves some sharp edges exposed: In some cases, users might accidentally\nuse Go reflection instead of protobuf reflection.</p>\n<p>For example, encoding a protobuf message with the <code>encoding/json</code> package (which\nuses Go reflection) was technically possible, but the result is not <a href=\"https://protobuf.dev/programming-guides/proto3/#json\" rel=\"noreferrer\" target=\"_blank\">canonical\nProtobuf JSON\nencoding</a>. Use the\n<a href=\"https://pkg.go.dev/google.golang.org/protobuf/encoding/protojson\" rel=\"noreferrer\" target=\"_blank\"><code>protojson</code></a>\npackage instead.</p>\n<p>The new Opaque API prevents this problem because the message struct fields are\nhidden: accidental usage of Go reflection will see an empty message. This is\nclear enough to steer developers towards protobuf reflection.</p>\n<h3 id=\"idealmemory\">Motivation: Making the ideal memory layout possible</h3>\n<p>The benchmark results from the <a href=\"#lessmemory\">More Efficient Memory\nRepresentation</a> section have already shown that protobuf\nperformance heavily depends on the specific usage: How are the messages defined?\nWhich fields are set?</p>\n<p>To keep Go Protobuf as fast as possible for <em>everyone</em>, we cannot implement\noptimizations that help only one program, but hurt the performance of other\nprograms.</p>\n<p>The Go compiler used to be in a similar situation, up until <a href=\"/blog/go1.20\">Go 1.20 introduced\nProfile-Guided Optimization (PGO)</a>. By recording the\nproduction behavior (through <a href=\"/blog/pprof\">profiling</a>) and feeding\nthat profile back to the compiler, we allow the compiler to make better\ntrade-offs <em>for a specific program or workload</em>.</p>\n<p>We think using profiles to optimize for specific workloads is a promising\napproach for further Go Protobuf optimizations. The Opaque API makes those\npossible: Program code uses accessors and does not need to be updated when the\nmemory representation changes, so we could, for example, move rarely set fields\ninto an overflow struct.</p>\n<h2 id=\"migration\">Migration</h2>\n<p>You can migrate on your own schedule, or even not at all—the (existing) Open\nStruct API will not be removed. But, if you’re not on the new Opaque API, you\nwon’t benefit from its improved performance, or future optimizations that target\nit.</p>\n<p>We recommend you select the Opaque API for new development. Protobuf Edition\n2024 (see <a href=\"https://protobuf.dev/editions/overview/\" rel=\"noreferrer\" target=\"_blank\">Protobuf Editions Overview</a>\nif you are not yet familiar) will make the Opaque API the default.</p>\n<h3 id=\"hybridapi\">The Hybrid API</h3>\n<p>Aside from the Open Struct API and Opaque API, there is also the Hybrid API,\nwhich keeps existing code working by keeping struct fields exported, but also\nenabling migration to the Opaque API by adding the new accessor methods.</p>\n<p>With the Hybrid API, the protobuf compiler will generate code on two API levels:\nthe <code>.pb.go</code> is on the Hybrid API, whereas the <code>_protoopaque.pb.go</code> version is\non the Opaque API and can be selected by building with the <code>protoopaque</code> build\ntag.</p>\n<h3 id=\"rewriting\">Rewriting Code to the Opaque API</h3>\n<p>See the <a href=\"https://protobuf.dev/reference/go/opaque-migration/\" rel=\"noreferrer\" target=\"_blank\">migration\nguide</a>\nfor detailed instructions. The high-level steps are:</p>\n<ol>\n<li>Enable the Hybrid API.</li>\n<li>Update existing code using the <code>open2opaque</code> migration tool.</li>\n<li>Switch to the Opaque API.</li>\n</ol>\n<h3 id=\"publishing\">Advice for published generated code: Use Hybrid API</h3>\n<p>Small usages of protobuf can live entirely within the same repository, but\nusually, <code>.proto</code> files are shared between different projects that are owned by\ndifferent teams. An obvious example is when different companies are involved: To\ncall Google APIs (with protobuf), use the <a href=\"https://github.com/googleapis/google-cloud-go\" rel=\"noreferrer\" target=\"_blank\">Google Cloud Client Libraries for\nGo</a> from your project. Switching\nthe Cloud Client Libraries to the Opaque API is not an option, as that would be\na breaking API change, but switching to the Hybrid API is safe.</p>\n<p>Our advice for such packages that publish generated code (<code>.pb.go</code> files) is to\nswitch to the Hybrid API please! Publish both the <code>.pb.go</code> and the\n<code>_protoopaque.pb.go</code> files, please. The <code>protoopaque</code> version allows your\nconsumers to migrate on their own schedule.</p>\n<h3 id=\"enablelazy\">Enabling Lazy Decoding</h3>\n<p>Lazy decoding is available (but not enabled) once you migrate to the Opaque API!\n🎉</p>\n<p>To enable: in your <code>.proto</code> file, annotate your message-typed fields with the\n<code>[lazy = true]</code> annotation.</p>\n<p>To opt out of lazy decoding (despite <code>.proto</code> annotations), the <a href=\"https://pkg.go.dev/google.golang.org/protobuf/runtime/protolazy\" rel=\"noreferrer\" target=\"_blank\"><code>protolazy</code>\npackage\ndocumentation</a>\ndescribes the available opt-outs, which affect either an individual Unmarshal\noperation or the entire program.</p>\n<h2 id=\"nextsteps\">Next Steps</h2>\n<p>By using the open2opaque tool in an automated fashion over the last few years,\nwe have converted the vast majority of Google’s <code>.proto</code> files and Go code to\nthe Opaque API. We continuously improved the Opaque API implementation as we\nmoved more and more production workloads to it.</p>\n<p>Therefore, we expect you should not encounter problems when trying the Opaque\nAPI. In case you do encounter any issues after all, please <a href=\"https://github.com/golang/protobuf/issues/\" rel=\"noreferrer\" target=\"_blank\">let us know on the\nGo Protobuf issue tracker</a>.</p>\n<p>Reference documentation for Go Protobuf can be found on <a href=\"https://protobuf.dev/reference/go/\" rel=\"noreferrer\" target=\"_blank\">protobuf.dev → Go\nReference</a>.</p>\n\n    </div>\n\n    \n    <div class=\"Article prevnext\">\n    \n    \n      \n        <p>\n        \n        \n          \n            <b>Previous article: </b><a href=\"/blog/15years\">Go Turns 15</a><br>\n          \n        \n        <b><a href=\"/blog/all\">Blog Index</a></b>\n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n    </div>\n    \n\n  </div>\n</div>\n\n<script src=\"/js/play.js\"></script>\n\n","flags":null,"enclosureUrl":"","enclosureMime":""}]}