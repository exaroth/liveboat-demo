{"id":"MvwLKznkcWQJt9LV3qspiNNstpReRGojdXM3bsYDh","title":"Kubernetes Blog","displayTitle":"Dev - Kubernetes Blog","url":"https://kubernetes.io/feed.xml","feedLink":"https://kubernetes.io/","items":[{"title":"How we built a dynamic Kubernetes API Server for the API Aggregation Layer in Cozystack","url":"https://kubernetes.io/blog/2024/11/21/dynamic-kubernetes-api-server-for-cozystack/","date":1732147200,"author":"","unread":true,"desc":"","content":"\n<p>Hi there! I'm Andrei Kvapil, but you might know me as <a href=\"https://github.com/kvaps\">@kvaps</a> in communities dedicated to Kubernetes\nand cloud-native tools. In this article, I want to share how we implemented our own extension api-server\nin the open-source PaaS platform, Cozystack.</p>\n<p>Kubernetes truly amazes me with its powerful extensibility features. You're probably already\nfamiliar with the <a href=\"https://kubernetes.io/docs/concepts/architecture/controller/\">controller</a> concept\nand frameworks like <a href=\"https://book.kubebuilder.io/\">kubebuilder</a> and\n<a href=\"https://sdk.operatorframework.io/\">operator-sdk</a> that help you implement it. In a nutshell, they\nallow you to extend your Kubernetes cluster by defining custom resources (CRDs) and writing additional\ncontrollers that handle your business logic for reconciling and managing these kinds of resources.\nThis approach is well-documented, with a wealth of information available online on how to develop your\nown operators.</p>\n<p>However, this is not the only way to\n<a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/#api-extensions\">extend the Kubernetes API</a>.\nFor more complex scenarios such as implementing imperative logic,\nmanaging subresources, and dynamically generating responsesâ€”the Kubernetes API <em>aggregation layer</em>\nprovides an effective alternative. Through the aggregation layer, you can develop a custom\nextension API server and seamlessly integrate it within the broader Kubernetes API framework.</p>\n<p>In this article, I will explore the API aggregation layer, the types of challenges it is well-suited\nto address, cases where it may be less appropriate, and how we utilized this model to implement\nour own extension API server in Cozystack.</p>\n<h2 id=\"what-is-the-api-aggregation-layer\">What Is the API Aggregation Layer?</h2>\n<p>First, let's get definitions straight to avoid any confusion down the road.\nThe <a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/apiserver-aggregation/\">API aggregation layer</a>\nis a feature in Kubernetes, while an extension api-server is a specific implementation of an\nAPI server for the aggregation layer. An extension API server is just like the standard Kubernetes API server, except it runs separately and handles requests for your specific resource types.</p>\n<p>So, the aggregation layer lets you write your own extension API server, integrate it easily into Kubernetes,\nand directly process requests for resources in a certain group. Unlike the CRD mechanism, the extension API\nis registered in Kubernetes as an APIService, telling Kubernetes to consider this new API server and acknowledge\nthat it serves certain APIs.</p>\n<p>You can execute this command to list all registered apiservices:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl get apiservices.apiregistration.k8s.io\n</span></span></code></pre></div><p>Example APIService:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#888\">NAME SERVICE AVAILABLE AGE\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">v1alpha1.apps.cozystack.io cozy-system/cozystack-api True 7h29m\n</span></span></span></code></pre></div><p>As soon as the Kubernetes api-server receives requests for resources in the group\n<code>v1alpha1.apps.cozystack.io</code>, it redirects all those requests to our extension api-server,\nwhich can handle them based on the business logic we've built into it.</p>\n<h2 id=\"when-to-use-the-api-aggregation-layer\">When to use the API Aggregation Layer</h2>\n<p>The API Aggregation Layer helps solve several issues where the usual CRD mechanism might\nnot enough. Let's break them down.</p>\n<h3 id=\"imperative-logic-and-subresources\">Imperative Logic and Subresources</h3>\n<p>Besides regular resources, Kubernetes also has something called subresources.</p>\n<p>In Kubernetes, subresources are additional actions or operations you can perform on primary resources\n(like Pods, Deployments, Services) via the Kubernetes API. They provide interfaces to manage\nspecific aspects of resources without affecting the entire object.</p>\n<p>A simple example is <code>status</code>, which is traditionally exposed as a separate subresource that you can\naccess independently from the parent object. The <code>status</code> field isn't meant to be changed</p>\n<p>But beyond <code>/status</code>, Pods in Kubernetes also have subresources like <code>/exec</code>, <code>/portforward</code>, and\n<code>/log</code>. Interestingly, instead of the usual declarative resources in Kubernetes, these represent\nendpoints for imperative operations like viewing logs, proxying connections, executing commands in\na running container, and so on.</p>\n<p>To support such imperative commands on your own API, you need implement an extension API and an\nextension API server. Here are some well-known examples:</p>\n<ul>\n<li><strong>KubeVirt</strong>: An add-on for Kubernetes that extends its API capabilities to run traditional virtual machines.\nThe extension api-server created as part of KubeVirt handles subresources\nlike <code>/restart</code>, <code>/console</code>, and <code>/vnc</code> for virtual machines.</li>\n<li><strong>Knative</strong>: A Kubernetes add-on that extends its capabilities for serverless computing,\nimplementing the <code>/scale</code> subresource to set up autoscaling for its resource types.</li>\n</ul>\n<p>By the way, even though subresource logic in Kubernetes can be <em>imperative</em>, you can manage access\nto them <em>declaratively</em> using Kubernetes standard RBAC model.</p>\n<p>For example this way you can control access to the <code>/log</code> and <code>/exec</code> subresources of the Pod kind:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Role<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>rbac.authorization.k8s.io/v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">namespace</span>:<span style=\"color:#bbb\"> </span>default<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>pod-and-pod-logs-reader<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">rules</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span>- <span style=\"color:#008000;font-weight:bold\">apiGroups</span>:<span style=\"color:#bbb\"> </span>[<span style=\"color:#b44\">&#34;&#34;</span>]<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">resources</span>:<span style=\"color:#bbb\"> </span>[<span style=\"color:#b44\">&#34;pods&#34;</span>,<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#34;pods/log&#34;</span>]<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">verbs</span>:<span style=\"color:#bbb\"> </span>[<span style=\"color:#b44\">&#34;get&#34;</span>,<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#34;list&#34;</span>]<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span>- <span style=\"color:#008000;font-weight:bold\">apiGroups</span>:<span style=\"color:#bbb\"> </span>[<span style=\"color:#b44\">&#34;&#34;</span>]<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">resources</span>:<span style=\"color:#bbb\"> </span>[<span style=\"color:#b44\">&#34;pods/exec&#34;</span>]<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">verbs</span>:<span style=\"color:#bbb\"> </span>[<span style=\"color:#b44\">&#34;create&#34;</span>]<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><h3 id=\"you-re-not-tied-to-use-etcd\">You're not tied to use etcd</h3>\n<p>Usually, the Kubernetes API server uses <a href=\"https://etcd.io/\">etcd</a> for its backend.\nHowever, implementing your own API server doesn't lock you into using only etcd.\nIf it doesn't make sense to store your server's state in etcd, you can store information in any\nother system and generate responses on the fly. Here are a few cases to illustrate:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/kubernetes-sigs/metrics-server\">metrics-server</a> is a standard extension for Kubernetes\nwhich allows you to view real-time metrics of your nodes and pods. It defines alternative Pod and Node\nkinds in its own metrics.k8s.io API. Requests to these resources are translated into metrics\ndirectly from Kubelet. So when you run <code>kubectl top node</code> or <code>kubectl top pod</code>, metrics-server fetches\nmetrics from cAdvisor in real-time. It then returns these metrics to you. Since the information\nis generated in real-time and is only relevant at the moment of the request, there is no need\nto store it in etcd. This approach saves resources.</p>\n</li>\n<li>\n<p>If needed, you can use a backend other than etcd. You can even implement a Kubernetes-compatible API\nfor it. For example, if you use Postgres, you can create a transparent representation of its entities\nin the Kubernetes API. Eg. databases, users, and grants within Postgres would appear as regular\nKubernetes resources, thanks to your extension API server. You could manage them using <code>kubectl</code> or any\nother Kubernetes-compatible tool. Unlike controllers, which implement business logic using custom resources\nand reconciliation methods, an extension API server eliminates the need for separate controllers for every kind.\nThis means you don't have to sync state between the Kubernetes API and your backend.</p>\n</li>\n</ul>\n<h3 id=\"one-time-resources\">One-Time resources</h3>\n<ul>\n<li>\n<p>Kubernetes has a special API used to provide users with information about their permissions.\nThis is implemented using the SelfSubjectAccessReview API. One unusual detail of these\nresources is that you can't view them using <strong>get</strong> or <strong>list</strong> verbs. You can only create them (using\nthe <strong>create</strong> verb) and receive output with information about what you have access to at that\nmoment.</p>\n<p>If you try to run <code>kubectl get selfsubjectaccessreviews</code> directly, you'll just get an error\nlike this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#888\">Error from server (MethodNotAllowed): the server does not allow this method on the requested resource\n</span></span></span></code></pre></div><p>The reason is that the Kubernetes API server doesn't support any other interaction with this\ntype of resource (you can only CREATE them).</p>\n<p>The SelfSubjectAccessReview API supports commands such as:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl auth can-i create deployments --namespace dev\n</span></span></code></pre></div><p>When you run the command above, <code>kubectl</code> creates a SelfSubjectAccessReview using the\nKubernetes API. This allows Kubernetes to fetch a list of possible permissions for your user.\nKubernetes then generates a personalized response to your request in real-time. This logic is\ndifferent from a scenario where this resource is simply stored in etcd.</p>\n</li>\n<li>\n<p>Similarly, in KubeVirt's <a href=\"https://github.com/kubevirt/containerized-data-importer\">CDI (Containerized Data Importer)</a>\nextension, which allows file uploads into a PVC from a local machine using the <code>virtctl</code> tool,\na special token is required before the upload process begins.\nThis token is generated by creating an UploadTokenRequest resource via the Kubernetes API. Kubernetes\nroutes (proxies) all UploadTokenRequest resource creation requests to the CDI extension API server,\nwhich generates and returns the token in response.</p>\n</li>\n</ul>\n<h3 id=\"full-control-over-conversion-validation-and-output-formatting\">Full control over conversion, validation, and output formatting</h3>\n<ul>\n<li>\n<p>Your own API server can have all the capabilities of the vanilla Kubernetes API server. The resources you create\nin your API server can be validated immediately on the server side without additional webhooks.\nWhile CRDs also support server-side validation using <a href=\"https://kubernetes.io/docs/reference/using-api/cel/\">Common Expression Language (CEL)</a>\nfor declarative validation and <a href=\"https://kubernetes.io/docs/reference/access-authn-authz/validating-admission-policy/\">ValidatingAdmissionPolicies</a>\nwithout the need for webhooks, a custom API server allows for more complex and tailored validation logic if needed.</p>\n<p>Kubernetes allows you to serve multiple API versions for each resource type, traditionally\n<code>v1alpha1</code>, <code>v1beta1</code> and <code>v1</code>. Only one version can be specified as the storage version.\nAll requests to other versions must be automatically converted to the version specified as storage version.\nWith CRDs, this mechanism is implemented using conversion webhooks. Whereas in an extension API server,\nyou can implement your own conversion mechanism, choose to mix up different storage versions (one\nobject might be serialized as <code>v1</code>, another as <code>v2</code>), or rely on an external backing API.</p>\n</li>\n<li>\n<p>Directly implementing the Kubernetes API lets you format table output however you like and doesn't force you to follow\nthe <code>additionalPrinterColumns</code> logic in CRDs. Instead, you can write your own formatter that\nformats the table output and custom fields in it. For example, when using <code>additionalPrinterColumns</code>,\nyou can display field values only following the JSONPath logic. In your own API server, you can generate\nand insert values on the fly, formatting the table output as you wish.</p>\n</li>\n</ul>\n<h3 id=\"dynamic-resource-registration\">Dynamic resource registration</h3>\n<ul>\n<li>The resources served by an extension api-server don't need to be pre-registered as CRDs.\nOnce your extension API server is registered using an APIService, Kubernetes starts polling it to discover\nAPIs and resources it can serve. After receiving a discovery response, the Kubernetes API server automatically\nregisters all available types for this API group.\nAlthough this isn't considered common practice, you can implement logic that dynamically registers\nthe resource types you need in your Kubernetes cluster.</li>\n</ul>\n<h2 id=\"when-not-to-use-the-api-aggregation-layer\">When not to use the API Aggregation Layer</h2>\n<p>There are some anti-patterns where using the API Aggregation Layer isn't recommended.\nLet's go through them.</p>\n<h3 id=\"unstable-backend\">Unstable backend</h3>\n<p>If your API server stops responding for some reason due to an unavailable backend or other issues it\nmay block some Kubernetes functionality. For example, when deleting namespaces, Kubernetes will wait\nfor a response from your API server to see if there are any remaining resources.\nIf the response doesn't come, the namespace deletion will be blocked.</p>\n<p>Also, you might have encountered a <a href=\"https://github.com/kedacore/keda/issues/4224\">situation</a> where,\nwhen the metrics-server is unavailable, an extra message appears in stderr after every API request\n(even unrelated to metrics) stating that <code>metrics.k8s.io</code> is unavailable. This is another example\nof how using the API Aggregation Layer can lead to problems when the api-server handling requests\nis unavailable.</p>\n<h3 id=\"slow-requests\">Slow requests</h3>\n<p>If you can't guarantee an instant response for user requests, it's better to consider using a\nCustomResourceDefinition and controller.\nOtherwise, you might make your cluster less stable. Many projects implement an extension\nAPI server only for a limited set of resources, particularly for imperative logic and subresources.\nThis recommendation is also\n<a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/apiserver-aggregation/#response-latency\">mentioned</a>\nin the official Kubernetes\ndocumentation.</p>\n<h2 id=\"why-we-needed-it-in-cozystack\">Why we needed it in Cozystack</h2>\n<p>As a reminder, we're developing the open-source PaaS platform <a href=\"https://cozystack.io/\">Cozystack</a>,\nwhich can also be used as a framework for building your own private cloud. Therefore, the ability\nto easily extend the platform is crucial for us.</p>\n<p>Cozystack is built on top of <a href=\"https://fluxcd.io/\">FluxCD</a>. Any application is packaged into its\nown Helm chart, ready for deployment in a tenant namespace. Deploying any application on the platform\nis done by creating a HelmRelease resource, specifying the chart name and parameters for the application.\nAll the rest logic is handled by FluxCD. This pattern allows us to easily extend the platform with new\napplications and provide the ability to create new applications that just need to be packaged\ninto the appropriate Helm chart.</p>\n<figure>\n<img src=\"https://kubernetes.io/blog/2024/11/21/dynamic-kubernetes-api-server-for-cozystack/cozystack.png\"\nalt=\"Interface of the Cozystack platform\"/> <figcaption>\n<p>Interface of the Cozystack platform</p>\n</figcaption>\n</figure>\n<p>So, in our platform, everything is configured as HelmRelease resources. However, we ran into\ntwo problems: limitations of the RBAC model and the need for a public API. Let's delve into these</p>\n<h3 id=\"limitations-of-the-rbac-model\">Limitations of the RBAC model</h3>\n<p>The widely-deployed RBAC system in Kubernetes doesn't allow you to restrict access to a list of resources\nof the same kind based on labels or specific fields in the spec. When creating a role, you can limit\naccess across the resources in the same kind only by specifying specific resource names in <code>resourceNames</code>.\nFor verbs like <strong>get</strong> or <strong>update</strong> it will work. However, filtering by <code>resourceNames</code> using <strong>list</strong>\nverb doesn't work like that. Thus you can limit listing certain resources by kind but not by name.</p>\n<ul>\n<li>Kubernetes has a special API used to provide users with information about their permissions.\nThis is implemented using the SelfSubjectAccessReview API. One unusual detail of these\nresources is that you can't view them using <strong>get</strong> or <strong>list</strong> verbs. You can only create them (using\nthe <strong>create</strong> verb) and receive output with information about what you have access to at that\nmoment.</li>\n</ul>\n<p>So, we decided to introduce new resource types based on the names of the Helm charts they use and\ngenerate the list of available kinds dynamically at runtime in our extension api-server.\nThis way, we can reuse Kubernetes standard RBAC model to manage access to specific resource types.</p>\n<h3 id=\"need-for-a-public-api\">Need for a public API</h3>\n<p>Since our platform provides capabilities for deploying various managed services, we want to organize\npublic access to the platform's API. However, we can't allow users to interact directly with resources\nlike HelmRelease because that would let them specify arbitrary names and parameters for Helm charts to\ndeploy, potentially compromising our system.</p>\n<p>We wanted to give users the ability to deploy a specific service simply by creating the resource with corresponding\nkind in Kubernetes. The type of this resource should be named the same as the chart from\nwhich it's deployed. Here are some examples:</p>\n<ul>\n<li><code>kind: Kubernetes</code> â†’ <code>chart: kubernetes</code></li>\n<li><code>kind: Postgres</code> â†’ <code>chart: postgres</code></li>\n<li><code>kind: Redis</code> â†’ <code>chart: redis</code></li>\n<li><code>kind: VirtualMachine</code> â†’ <code>chart: virtual-machine</code></li>\n</ul>\n<p>Moreover, we don't want to have to add a new type to codegen and recompile our extension API server\nevery time we add a new chart for it to start being served.\nThe schema update should be done dynamically or provided via a ConfigMap by the administrator.</p>\n<h3 id=\"two-way-conversion\">Two-Way conversion</h3>\n<p>Currently, we already have integrations and a dashboard that continue to use HelmRelease resources.\nAt this stage, we didn't want to lose the ability to support this API. Considering that we're simply\ntranslating one resource into another, support is maintained and it works both ways.\nIf you create a HelmRelease, you'll get a custom resource in Kubernetes, and if you create a\ncustom resource in Kubernetes, it will also be available as a HelmRelease.</p>\n<p>We don't have any additional controllers that synchronize state between these resources.\nAll requests to resources in our extension API server are transparently proxied to HelmRelease and vice versa.\nThis eliminates intermediate states and the need to write controllers and synchronization logic.</p>\n<h2 id=\"implementation\">Implementation</h2>\n<p>To implement the Aggregation API, you might consider starting with the following projects:</p>\n<ul>\n<li><a href=\"https://github.com/kubernetes-sigs/apiserver-builder-alpha\">apiserver-builder</a>:\nCurrently in alpha and hasn't been updated for two years. It works like kubebuilder,\nproviding a framework for creating an extension API server, allowing you to sequentially create\na project structure and generate code for your resources.</li>\n<li><a href=\"https://github.com/kubernetes/sample-apiserver\">sample-apiserver</a>:\nA ready-made example of an implemented API server, based on official Kubernetes libraries,\nwhich you can use as a foundation for your project.</li>\n</ul>\n<p>For practical reasons, we chose the second project. Here's what we needed to do:</p>\n<h3 id=\"disable-etcd-support\">Disable etcd support</h3>\n<p>In our case, we don't need it since all resources are stored directly in the Kubernetes API.</p>\n<p>You can disable etcd options by passing nil to <code>RecommendedOptions.Etcd</code>:</p>\n<ul>\n<li><a href=\"https://github.com/aenix-io/cozystack/blob/003edf8cf0a419bd67cd822d61ff806db49e7026/pkg/cmd/server/start.go#L70\">Disabling etcd options</a></li>\n</ul>\n<h3 id=\"generate-a-common-resource-kind\">Generate a common resource kind</h3>\n<p>We called it Application, and it looks like this:</p>\n<ul>\n<li><a href=\"https://github.com/aenix-io/cozystack/blob/003edf8cf0a419bd67cd822d61ff806db49e7026/pkg/apis/apps/v1alpha1/types.go\">Application type definition</a></li>\n</ul>\n<p>This is a generic type used for any application type, and its handling logic is the same for all charts.</p>\n<h3 id=\"configure-configuration-loading\">Configure configuration loading</h3>\n<p>Since we want to configure our extension api-server via a config file, we formed the config structure in Go:</p>\n<ul>\n<li><a href=\"https://github.com/aenix-io/cozystack/blob/003edf8cf0a419bd67cd822d61ff806db49e7026/pkg/config/config.go\">Config type definition</a></li>\n</ul>\n<p>We also modified the resource registration logic so that the resources we create are registered in scheme with different <code>Kind</code> values:</p>\n<ul>\n<li><a href=\"https://github.com/aenix-io/cozystack/blob/003edf8cf0a419bd67cd822d61ff806db49e7026/pkg/apis/apps/v1alpha1/register.go#L63-L77\">Dynamic resource registration</a></li>\n</ul>\n<p>As a result, we got a config where you can pass all possible types and specify what they should map to:</p>\n<ul>\n<li><a href=\"https://github.com/aenix-io/cozystack/blob/003edf8cf0a419bd67cd822d61ff806db49e7026/packages/system/cozystack-api/templates/configmap.yaml\">ConfigMap example</a></li>\n</ul>\n<h3 id=\"implement-our-own-registry\">Implement our own registry</h3>\n<p>To store state not in etcd but translate it directly into Kubernetes HelmRelease resources (and vice versa),\nwe wrote conversion functions from Application to HelmRelease and from HelmRelease to Application:</p>\n<ul>\n<li><a href=\"https://github.com/aenix-io/cozystack/blob/003edf8cf0a419bd67cd822d61ff806db49e7026/pkg/registry/apps/application/rest.go#L920-L991\">Conversion functions</a></li>\n</ul>\n<p>We implemented logic to filter resources by chart name, <code>sourceRef</code>, and prefix in the HelmRelease name:</p>\n<ul>\n<li><a href=\"https://github.com/aenix-io/cozystack/blob/003edf8cf0a419bd67cd822d61ff806db49e7026/pkg/registry/apps/application/rest.go#L747-L784\">Filtering functions</a></li>\n</ul>\n<p>Then, using this logic, we implemented the methods <code>Get()</code>, <code>Delete()</code>, <code>List()</code>, <code>Create()</code>.</p>\n<p>You can see the full example here:</p>\n<ul>\n<li><a href=\"https://github.com/aenix-io/cozystack/blob/003edf8cf0a419bd67cd822d61ff806db49e7026/pkg/registry/apps/application/rest.go\">Registry Implementation</a></li>\n</ul>\n<p>At the end of each method, we set the correct <code>Kind</code> and return an <code>unstructured.Unstructured{}</code> object\nso that Kubernetes serializes the object correctly. Otherwise,\nit would always serialize them with <code>kind: Application</code>, which we don't want.</p>\n<h2 id=\"what-did-we-achieve\">What did we achieve?</h2>\n<p>In Cozystack, all our types from the ConfigMap are now available in Kubernetes as-is:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl api-resources | grep cozystack\n</span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#888\">buckets apps.cozystack.io/v1alpha1 true Bucket\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">clickhouses apps.cozystack.io/v1alpha1 true ClickHouse\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">etcds apps.cozystack.io/v1alpha1 true Etcd\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">ferretdb apps.cozystack.io/v1alpha1 true FerretDB\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">httpcaches apps.cozystack.io/v1alpha1 true HTTPCache\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">ingresses apps.cozystack.io/v1alpha1 true Ingress\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">kafkas apps.cozystack.io/v1alpha1 true Kafka\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">kuberneteses apps.cozystack.io/v1alpha1 true Kubernetes\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">monitorings apps.cozystack.io/v1alpha1 true Monitoring\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">mysqls apps.cozystack.io/v1alpha1 true MySQL\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">natses apps.cozystack.io/v1alpha1 true NATS\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">postgreses apps.cozystack.io/v1alpha1 true Postgres\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">rabbitmqs apps.cozystack.io/v1alpha1 true RabbitMQ\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">redises apps.cozystack.io/v1alpha1 true Redis\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">seaweedfses apps.cozystack.io/v1alpha1 true SeaweedFS\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">tcpbalancers apps.cozystack.io/v1alpha1 true TCPBalancer\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">tenants apps.cozystack.io/v1alpha1 true Tenant\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">virtualmachines apps.cozystack.io/v1alpha1 true VirtualMachine\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">vmdisks apps.cozystack.io/v1alpha1 true VMDisk\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">vminstances apps.cozystack.io/v1alpha1 true VMInstance\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">vpns apps.cozystack.io/v1alpha1 true VPN\n</span></span></span></code></pre></div><p>We can work with them just like regular Kubernetes resources.</p>\n<p>Listing S3 Buckets:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl get buckets.apps.cozystack.io -n tenant-kvaps\n</span></span></code></pre></div><p>Example output:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#888\">NAME READY AGE VERSION\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">foo True 22h 0.1.0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">testaasd True 27h 0.1.0\n</span></span></span></code></pre></div><p>Listing Kubernetes Clusters:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl get kuberneteses.apps.cozystack.io -n tenant-kvaps\n</span></span></code></pre></div><p>Example output:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#888\">NAME READY AGE VERSION\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">abc False 19h 0.14.0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">asdte True 22h 0.13.0\n</span></span></span></code></pre></div><p>Listing Virtual Machine Disks:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl get vmdisks.apps.cozystack.io -n tenant-kvaps\n</span></span></code></pre></div><p>Example output:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#888\">NAME READY AGE VERSION\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">docker True 21d 0.1.0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">test True 18d 0.1.0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">win2k25-iso True 21d 0.1.0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">win2k25-system True 21d 0.1.0\n</span></span></span></code></pre></div><p>Listing Virtual Machine Instances:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl get vminstances.apps.cozystack.io -n tenant-kvaps\n</span></span></code></pre></div><p>Example output:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#888\">NAME READY AGE VERSION\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">docker True 21d 0.1.0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">test True 18d 0.1.0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">win2k25 True 20d 0.1.0\n</span></span></span></code></pre></div><p>We can create, modify, and delete each of them, and any interaction with them will be translated\ninto HelmRelease resources, while also applying the resource structure and prefix in the name.</p>\n<p>To see all related Helm releases:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl get helmreleases -n tenant-kvaps -l cozystack.io/ui\n</span></span></code></pre></div><p>Example output:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#888\">NAME AGE READY\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">bucket-foo 22h True\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">bucket-testaasd 27h True\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">kubernetes-abc 19h False\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">kubernetes-asdte 22h True\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">redis-test 18d True\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">redis-yttt 12d True\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">vm-disk-docker 21d True\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">vm-disk-test 18d True\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">vm-disk-win2k25-iso 21d True\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">vm-disk-win2k25-system 21d True\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">vm-instance-docker 21d True\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">vm-instance-test 18d True\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">vm-instance-win2k25 20d True\n</span></span></span></code></pre></div><h2 id=\"next-steps\">Next Steps</h2>\n<p>We donâ€™t intend to stop here with our API. In the future, we plan to add new features:</p>\n<ul>\n<li>Add validation based on an OpenAPI spec generated directly from Helm charts.</li>\n<li>Develop a controller that collects release notes from deployed releases and shows users\naccess information for specific services.</li>\n<li>Revamp our dashboard to work directly with the new API.</li>\n</ul>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>The API Aggregation Layer allowed us to quickly and efficiently solve our problem by providing\na flexible mechanism for extending the Kubernetes API with dynamically registered resources and\nconverting them on the fly. Ultimately, this made our platform even more flexible and extensible\nwithout the need to write code for each new resource.</p>\n<p>You can test the API yourself in the open-source PaaS platform Cozystack,\nstarting from <a href=\"https://github.com/aenix-io/cozystack/releases/tag/v0.18.0\">version v0.18</a>.</p>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Gateway API v1.2: WebSockets, Timeouts, Retries, and More","url":"https://kubernetes.io/blog/2024/11/21/gateway-api-v1-2/","date":1732208400,"author":"","unread":true,"desc":"","content":"\n<p><img alt=\"Gateway API logo\" src=\"https://kubernetes.io/blog/2024/11/21/gateway-api-v1-2/gateway-api-logo.svg\"></p>\n<p>Kubernetes SIG Network is delighted to announce the general availability of\n<a href=\"https://gateway-api.sigs.k8s.io/\">Gateway API</a> v1.2! This version of the API\nwas released on October 3, and we're delighted to report that we now have a\nnumber of conformant implementations of it for you to try out.</p>\n<p>Gateway API v1.2 brings a number of new features to the <em>Standard channel</em>\n(Gateway API's GA release channel), introduces some new experimental features,\nand inaugurates our new release process â€” but it also brings two breaking\nchanges that you'll want to be careful of.</p>\n<h2 id=\"breaking-changes\">Breaking changes</h2>\n<h3 id=\"grpcroute-and-referencegrant-v1alpha2-removal\">GRPCRoute and ReferenceGrant <code>v1alpha2</code> removal</h3>\n<p>Now that the <code>v1</code> versions of GRPCRoute and ReferenceGrant have graduated to\nStandard, the old <code>v1alpha2</code> versions have been removed from both the Standard\nand Experimental channels, in order to ease the maintenance burden that\nperpetually supporting the old versions would place on the Gateway API\ncommunity.</p>\n<p>Before upgrading to Gateway API v1.2, you'll want to confirm that any\nimplementations of Gateway API have been upgraded to support the v1 API\nversion of these resources instead of the v1alpha2 API version. Note that even\nif you've been using v1 in your YAML manifests, a controller may still be\nusing v1alpha2 which would cause it to fail during this upgrade. Additionally,\nKubernetes itself goes to some effort to stop you from removing a CRD version\nthat it thinks you're using: check out the <a href=\"https://github.com/kubernetes-sigs/gateway-api/releases/tag/v1.2.0\">release notes</a> for more\ninformation about what you need to do to safely upgrade.</p>\n<h3 id=\"status-supported-features\">Change to <code>.status.supportedFeatures</code> (experimental)</h3>\n<p>A much smaller breaking change: <code>.status.supportedFeatures</code> in a Gateway is\nnow a list of objects instead of a list of strings. The objects have a single\n<code>name</code> field, so the translation from the strings is straightforward, but\nmoving to objects permits a lot more flexibility for the future. This stanza\nis not yet present in the Standard channel.</p>\n<h2 id=\"graduations-to-the-standard-channel\">Graduations to the standard channel</h2>\n<p>Gateway API 1.2.0 graduates four features to the Standard channel, meaning\nthat they can now be considered generally available. Inclusion in the Standard\nrelease channel denotes a high level of confidence in the API surface and\nprovides guarantees of backward compatibility. Of course, as with any other\nKubernetes API, Standard channel features can continue to evolve with\nbackward-compatible additions over time, and we certainly expect further\nrefinements and improvements to these new features in the future. For more\ninformation on how all of this works, refer to the <a href=\"https://gateway-api.sigs.k8s.io/concepts/versioning/\">Gateway API Versioning\nPolicy</a>.</p>\n<h3 id=\"httproute-timeouts\">HTTPRoute timeouts</h3>\n<p><a href=\"https://gateway-api.sigs.k8s.io/geps/gep-1742/\">GEP-1742</a> introduced the\n<code>timeouts</code> stanza into HTTPRoute, permitting configuring basic timeouts for\nHTTP traffic. This is a simple but important feature for proper resilience\nwhen handling HTTP traffic, and it is now Standard.</p>\n<p>For example, this HTTPRoute configuration sets a timeout of 300ms for traffic\nto the <code>/face</code> path:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>gateway.networking.k8s.io/v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>HTTPRoute<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>face-with-timeouts<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">namespace</span>:<span style=\"color:#bbb\"> </span>faces<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">parentRefs</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>my-gateway<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Gateway<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">rules</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">matches</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">path</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">type</span>:<span style=\"color:#bbb\"> </span>PathPrefix<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">value</span>:<span style=\"color:#bbb\"> </span>/face<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">backendRefs</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>face<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">port</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">80</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">timeouts</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">request</span>:<span style=\"color:#bbb\"> </span>300ms<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>For more information, check out the <a href=\"https://gateway-api.sigs.k8s.io/guides/http-routing/\">HTTP routing</a> documentation. (Note that\nthis applies only to HTTPRoute timeouts. GRPCRoute timeouts are not yet part\nof Gateway API.)</p>\n<h3 id=\"gateway-infrastructure-labels-and-annotations\">Gateway infrastructure labels and annotations</h3>\n<p>Gateway API implementations are responsible for creating the backing\ninfrastructure needed to make each Gateway work. For example, implementations\nrunning in a Kubernetes cluster often create Services and Deployments, while\ncloud-based implementations may be creating cloud load balancer resources. In\nmany cases, it can be helpful to be able to propagate labels or annotations to\nthese generated resources.</p>\n<p>In v1.2.0, the Gateway <code>infrastructure</code> stanza moves to the Standard channel,\nallowing you to specify labels and annotations for the infrastructure created\nby the Gateway API controller. For example, if your Gateway infrastructure is\nrunning in-cluster, you can specify both Linkerd and Istio injection using the\nfollowing Gateway configuration, making it simpler for the infrastructure to\nbe incorporated into whichever service mesh you've installed:</p>\n<pre tabindex=\"0\"><code>apiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\nname: meshed-gateway\nnamespace: incoming\nspec:\ngatewayClassName: meshed-gateway-class\nlisteners:\n- name: http-listener\nprotocol: HTTP\nport: 80\ninfrastructure:\nlabels:\nistio-injection: enabled\nannotations:\nlinkerd.io/inject: enabled\n</code></pre><p>For more information, check out the\n<a href=\"https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayInfrastructure\"><code>infrastructure</code> API reference</a>.</p>\n<h3 id=\"backend-protocol-support\">Backend protocol support</h3>\n<p>Since Kubernetes v1.20, the Service and EndpointSlice resources have supported\na stable <code>appProtocol</code> field to allow users to specify the L7 protocol that\nService supports. With the adoption of\n<a href=\"https://github.com/kubernetes/enhancements/tree/master/keps/sig-network/3726-standard-application-protocols\">KEP 3726</a>,\nKubernetes now supports three new <code>appProtocol</code> values:</p>\n<dl>\n<dt><code>kubernetes.io/h2c</code></dt>\n<dd>HTTP/2 over cleartext as described in <a href=\"https://www.rfc-editor.org/rfc/rfc7540\">RFC7540</a></dd>\n<dt><code>kubernetes.io/ws</code></dt>\n<dd>WebSocket over cleartext as described in <a href=\"https://www.rfc-editor.org/rfc/rfc6445\">RFC6445</a></dd>\n<dt><code>kubernetes.io/wss</code></dt>\n<dd>WebSocket over TLS as described in <a href=\"https://www.rfc-editor.org/rfc/rfc6445\">RFC6445</a></dd>\n</dl>\n<p>With Gateway API 1.2.0, support for honoring <code>appProtocol</code> is now Standard.\nFor example, given the following Service:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Service<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>websocket-service<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">namespace</span>:<span style=\"color:#bbb\"> </span>my-namespace<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">selector</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">app.kubernetes.io/name</span>:<span style=\"color:#bbb\"> </span>websocket-app<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">ports</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>http<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">port</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">80</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">targetPort</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">9376</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">protocol</span>:<span style=\"color:#bbb\"> </span>TCP<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">appProtocol</span>:<span style=\"color:#bbb\"> </span>kubernetes.io/ws<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>then an HTTPRoute that includes this Service as a <code>backendRef</code> will\nautomatically upgrade the connection to use WebSockets rather than assuming\nthat the connection is pure HTTP.</p>\n<p>For more information, check out\n<a href=\"https://gateway-api.sigs.k8s.io/geps/gep-1911/\">GEP-1911</a>.</p>\n<h2 id=\"new-additions-to-experimental-channel\">New additions to experimental channel</h2>\n<h3 id=\"named-rules-for-route-resources\">Named rules for *Route resources</h3>\n<p>The <code>rules</code> field in HTTPRoute and GRPCRoute resources can now be named, in\norder to make it easier to reference the specific rule, for example:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>gateway.networking.k8s.io/v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>HTTPRoute<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>multi-color-route<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">namespace</span>:<span style=\"color:#bbb\"> </span>faces<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">parentRefs</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>my-gateway<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Gateway<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">port</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">80</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">rules</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>center-rule<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">matches</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">path</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">type</span>:<span style=\"color:#bbb\"> </span>PathPrefix<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">value</span>:<span style=\"color:#bbb\"> </span>/color/center<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">backendRefs</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>color-center<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">port</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">80</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>edge-rule<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">matches</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">path</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">type</span>:<span style=\"color:#bbb\"> </span>PathPrefix<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">value</span>:<span style=\"color:#bbb\"> </span>/color/edge<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">backendRefs</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>color-edge<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">port</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">80</span><span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>Logging or status messages can now refer to these two rules as <code>center-rule</code>\nor <code>edge-rule</code> instead of being forced to refer to them by index. For more\ninformation, see <a href=\"https://gateway-api.sigs.k8s.io/geps/gep-995/\">GEP-995</a>.</p>\n<h3 id=\"httproute-retry-support\">HTTPRoute retry support</h3>\n<p>Gateway API 1.2.0 introduces experimental support for counted HTTPRoute\nretries. For example, the following HTTPRoute configuration retries requests\nto the <code>/face</code> path up to 3 times with a 500ms delay between retries:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>gateway.networking.k8s.io/v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>HTTPRoute<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>face-with-retries<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">namespace</span>:<span style=\"color:#bbb\"> </span>faces<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">parentRefs</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>my-gateway<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Gateway<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">port</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">80</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">rules</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">matches</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">path</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">type</span>:<span style=\"color:#bbb\"> </span>PathPrefix<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">value</span>:<span style=\"color:#bbb\"> </span>/face<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">backendRefs</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>face<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">port</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">80</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">retry</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">codes</span>:<span style=\"color:#bbb\"> </span>[<span style=\"color:#bbb\"> </span><span style=\"color:#666\">500</span>,<span style=\"color:#bbb\"> </span><span style=\"color:#666\">502</span>,<span style=\"color:#bbb\"> </span><span style=\"color:#666\">503</span>,<span style=\"color:#bbb\"> </span><span style=\"color:#666\">504</span><span style=\"color:#bbb\"> </span>]<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">attempts</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">3</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">backoff</span>:<span style=\"color:#bbb\"> </span>500ms<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>For more information, check out <a href=\"https://gateway-api.sigs.k8s.io/geps/gep-1731\">GEP\n1731</a>.</p>\n<h3 id=\"httproute-percentage-based-mirroring\">HTTPRoute percentage-based mirroring</h3>\n<p>Gateway API has long supported the\n<a href=\"https://gateway-api.sigs.k8s.io/guides/http-request-mirroring/\">Request Mirroring</a>\nfeature, which allows sending the same request to multiple backends. In\nGateway API 1.2.0, we're introducing percentage-based mirroring, which allows\nyou to specify a percentage of requests to mirror to a different backend. For\nexample, the following HTTPRoute configuration mirrors 42% of requests to the\n<code>color-mirror</code> backend:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>gateway.networking.k8s.io/v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>HTTPRoute<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>color-mirror-route<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">namespace</span>:<span style=\"color:#bbb\"> </span>faces<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">parentRefs</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>mirror-gateway<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">hostnames</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- mirror.example<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">rules</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">backendRefs</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>color<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">port</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">80</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">filters</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">type</span>:<span style=\"color:#bbb\"> </span>RequestMirror<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">requestMirror</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">backendRef</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>color-mirror<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">port</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">80</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">percent</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">42</span><span style=\"color:#bbb\"> </span><span style=\"color:#080;font-style:italic\"># This value must be an integer.</span><span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>There's also a <code>fraction</code> stanza which can be used in place of <code>percent</code>, to\nallow for more precise control over exactly what amount of traffic is\nmirrored, for example:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>...<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">filters</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">type</span>:<span style=\"color:#bbb\"> </span>RequestMirror<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">requestMirror</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">backendRef</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>color-mirror<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">port</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">80</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">fraction</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">numerator</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">1</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">denominator</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">10000</span><span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>This configuration mirrors 1 in 10,000 requests to the <code>color-mirror</code> backend,\nwhich may be relevant with very high request rates. For more details, see\n<a href=\"https://gateway-api.sigs.k8s.io/geps/gep-3171\">GEP-1731</a>.</p>\n<h3 id=\"additional-backend-tls-configuration\">Additional backend TLS configuration</h3>\n<p>This release includes three additions related to TLS configuration for\ncommunications between a Gateway and a workload (a <em>backend</em>):</p>\n<ol>\n<li>\n<p><strong>A new <code>backendTLS</code> field on Gateway</strong></p>\n<p>This new field allows you to specify the client certificate that a Gateway\nshould use when connecting to backends.</p>\n</li>\n<li>\n<p><strong>A new <code>subjectAltNames</code> field on BackendTLSPolicy</strong></p>\n<p>Previously, the <code>hostname</code> field was used to configure both the SNI that a\nGateway should send to a backend <em>and</em> the identity that should be provided\nby a certificate. When the new <code>subjectAltNames</code> field is specified, any\ncertificate matching at least one of the specified SANs will be considered\nvalid. This is particularly critical for SPIFFE where URI-based SANs may\nnot be valid SNIs.</p>\n</li>\n<li>\n<p><strong>A new <code>options</code> field on BackendTLSPolicy</strong></p>\n<p>Similar to the TLS options field on Gateway Listeners, we believe the same\nconcept will be broadly useful for TLS-specific configuration for Backend\nTLS.</p>\n</li>\n</ol>\n<p>For more information, check out\n<a href=\"https://gateway-api.sigs.k8s.io/geps/gep-3155\">GEP-3135</a>.</p>\n<h2 id=\"more-changes\">More changes</h2>\n<p>For a full list of the changes included in this release, please refer to the\n<a href=\"https://github.com/kubernetes-sigs/gateway-api/releases/tag/v1.2.0\">v1.2.0 release notes</a>.</p>\n<h2 id=\"project-updates\">Project updates</h2>\n<p>Beyond the technical, the v1.2 release also marks a few milestones in the life\nof the Gateway API project itself.</p>\n<h3 id=\"release-process-improvements\">Release process improvements</h3>\n<p>Gateway API has never been intended to be a static API, and as more projects\nuse it as a component to build on, it's become clear that we need to bring\nsome more predictability to Gateway API releases. To that end, we're pleased -\nand a little nervous! - to announce that we've formalized a new release\nprocess:</p>\n<ul>\n<li>\n<p><strong>Scoping</strong> (4-6 weeks): maintainers and community determine the set of\nfeatures we want to include in the release. A particular emphasis here is\ngetting features <em>out</em> of the Experimental channel â€” ideally this involves\nmoving them to Standard, but it can also mean removing them.</p>\n</li>\n<li>\n<p><strong>GEP Iteration and Review</strong> (5-7 weeks): contributors write or update\nGateway Enhancement Proposals (GEPs) for features accepted into the release,\nwith emphasis on getting consensus around the design and graduation criteria\nof the feature.</p>\n</li>\n<li>\n<p><strong>API Refinement and Documentation</strong> (3-5 weeks): contributors implement the\nfeatures in the Gateway API controllers and write the necessary\ndocumentation.</p>\n</li>\n<li>\n<p><strong>SIG Network Review and Release Candidates</strong> (2-4 weeks): maintainers get\nthe required upstream review, build release candidates, and release the new\nversion.</p>\n</li>\n</ul>\n<p>Gateway API 1.2.0 was the first release to use the new process, and although\nthere are the usual rough edges of anything new, we believe that it went well.\nWe've already completed the Scoping phase for Gateway API 1.3, with the\nrelease expected around the end of January 2025.</p>\n<h3 id=\"gwctl-moves-out\"><code>gwctl</code> moves out</h3>\n<p>The <code>gwctl</code> CLI tool has moved into its very own repository,\n<a href=\"https://github.com/kubernetes-sigs/gwctl\">https://github.com/kubernetes-sigs/gwctl</a>. <code>gwctl</code> has proven a valuable tool\nfor the Gateway API community; moving it into its own repository will, we\nbelieve, make it easier to maintain and develop. As always, we welcome\ncontributions; while still experimental, <code>gwctl</code> already helps make working\nwith Gateway API a bit easier â€” especially for newcomers to the project!</p>\n<h3 id=\"maintainer-changes\">Maintainer changes</h3>\n<p>Rounding out our changes to the project itself, we're pleased to announce that\n<a href=\"https://github.com/mlavacca\">Mattia Lavacca</a> has joined the ranks of Gateway API Maintainers! We're also\nsad to announce that <a href=\"https://github.com/@keithmattix\">Keith Mattix</a> has stepped down as a GAMMA lead â€”\nhappily, <a href=\"https://github.com/@mikemorris\">Mike Morris</a> has returned to the role. We're grateful for everything\nKeith has done, and excited to have Mattia and Mike on board.</p>\n<h2 id=\"try-it-out\">Try it out</h2>\n<p>Unlike other Kubernetes APIs, you don't need to upgrade to the latest version of\nKubernetes to get the latest version of Gateway API. As long as you're running\nKubernetes 1.26 or later, you'll be able to get up and running with this\nversion of Gateway API.</p>\n<p>To try out the API, follow our <a href=\"https://gateway-api.sigs.k8s.io/guides/\">Getting Started\nGuide</a>. As of this writing, five\nimplementations are already conformant with Gateway API v1.2. In alphabetical\norder:</p>\n<ul>\n<li><a href=\"https://github.com/cilium/cilium\">Cilium v1.17.0-pre.1</a>, Experimental channel</li>\n<li><a href=\"https://github.com/envoyproxy/gateway\">Envoy Gateway v1.2.0-rc.1</a>, Experimental channel</li>\n<li><a href=\"https://istio.io\">Istio v1.24.0-alpha.0</a>, Experimental channel</li>\n<li><a href=\"https://github.com/kong/kubernetes-ingress-controller\">Kong v3.2.0-244-gea4944bb0</a>, Experimental channel</li>\n<li><a href=\"https://traefik.io\">Traefik v3.2</a>, Experimental channel</li>\n</ul>\n<h2 id=\"get-involved\">Get involved</h2>\n<p>There are lots of opportunities to get involved and help define the future of\nKubernetes routing APIs for both ingress and service mesh.</p>\n<ul>\n<li>Check out the <a href=\"https://gateway-api.sigs.k8s.io/guides\">user guides</a> to see what use-cases can be addressed.</li>\n<li>Try out one of the <a href=\"https://gateway-api.sigs.k8s.io/implementations/\">existing Gateway controllers</a>.</li>\n<li>Or <a href=\"https://gateway-api.sigs.k8s.io/contributing/\">join us in the community</a>\nand help us build the future of Gateway API together!</li>\n</ul>\n<p>The maintainers would like to thank <em>everyone</em> who's contributed to Gateway\nAPI, whether in the form of commits to the repo, discussion, ideas, or general\nsupport. We could never have gotten this far without the support of this\ndedicated and active community.</p>\n<h2 id=\"related-kubernetes-blog-articles\">Related Kubernetes blog articles</h2>\n<ul>\n<li><a href=\"https://kubernetes.io/blog/2024/05/09/gateway-api-v1-1/\">Gateway API v1.1: Service mesh, GRPCRoute, and a whole lot more</a></li>\n<li><a href=\"https://kubernetes.io/blog/2023/11/28/gateway-api-ga/\">New Experimental Features in Gateway API v1.0</a>\n11/2023</li>\n<li><a href=\"https://kubernetes.io/blog/2023/10/31/gateway-api-ga/\">Gateway API v1.0: GA Release</a>\n10/2023</li>\n<li><a href=\"https://kubernetes.io/blog/2023/10/25/introducing-ingress2gateway/\">Introducing ingress2gateway; Simplifying Upgrades to Gateway API</a>\n10/2023</li>\n<li><a href=\"https://kubernetes.io/blog/2023/08/29/gateway-api-v0-8/\">Gateway API v0.8.0: Introducing Service Mesh Support</a>\n08/2023</li>\n</ul>","flags":null,"enclosureUrl":"","enclosureMime":""}]}