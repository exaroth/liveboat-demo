{
  "id": "82kPqomaPXmNomrHzpZWfbkQxiiNUBTAYKxHR5qZBEpf",
  "title": "Hacker News: Show HN",
  "displayTitle": "HN Show",
  "url": "https://hnrss.org/show?points=60",
  "feedLink": "https://news.ycombinator.com/shownew",
  "items": [
    {
      "title": "Show HN: Screen Sharing in the Browser",
      "url": "https://github.com/tonghohin/screen-sharing",
      "date": 1732842261,
      "author": "tonghohin",
      "unread": true,
      "desc": "",
      "content": "\n<p>Seeing all the hype around Bolt.new, I decided to give it a try, and within just 30 minutes, I built a fully functional web app for screen sharing.<p>How It Works:<p>- One user opens a room and receives a unique code.<p>- Participants join by simply entering the code to view the shared screen.<p>After that initial build, I moved the project to Cursor to continue iterating and enhancing its features.<p>Github: <a href=\"https://github.com/tonghohin/screen-sharing\">https://github.com/tonghohin/screen-sharing</a><p>Demo: <a href=\"https://share-your-screen.vercel.app\" rel=\"nofollow\">https://share-your-screen.vercel.app</a></p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42269897\">https://news.ycombinator.com/item?id=42269897</a></p>\n<p>Points: 219</p>\n<p># Comments: 54</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: Vince – A self hosted alternative to Google Analytics",
      "url": "https://github.com/vinceanalytics/vince",
      "date": 1732848840,
      "author": "gernest",
      "unread": true,
      "desc": "",
      "content": "\n<p>For the past 3 years I have been working on a Golang port of plausible analytics dashboard.<p>vince is a single binary, single user with multiple website system with zero runtime dependency.<p>Key featues:<p>- Automatic TLS\n- Outbounds link tracking\n- File downloads tracking\n- 404 pages tracking\n- Custom event tracking<p>And so much more, basically everything that you see on plausible dashboard except funnels and custom properties.<p>You can use vince as a drop in replacement for plausible for personal websites.<p>The goal is to make the plausible dashboard easily accessible  for people who like to self host.<p>All features not related to the dashboard are non goal, hence not implemented.<p>Full dashboard demo hosted on 6$ vultr instance <a href=\"https://demo.vinceanalytics.com/share/vinceanalytics.com/v1/share/vinceanalytics.com?auth=Ls9tV4pzqOn7BJ7-&demo=true\" rel=\"nofollow\">https://demo.vinceanalytics.com/share/vinceanalytics.com/v1/...</a></p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42270389\">https://news.ycombinator.com/item?id=42270389</a></p>\n<p>Points: 281</p>\n<p># Comments: 85</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: Open-source private home security camera system (end-to-end encryption)",
      "url": "https://github.com/privastead/privastead",
      "date": 1733004829,
      "author": "arrdalan",
      "unread": true,
      "desc": "",
      "content": "\n<p>I needed a security camera inside my house, one that would send motion notifications to my smartphone and would allow me to livestream remotely. However, I could not find one that I could trust due to privacy concerns. Many of them upload the plaintext of videos to their servers and none is fully open-source as far as I know. Therefore, I decided to use my spare time to build one from scratch. Called Privastead (as in Private Homestead), it uses OpenMLS for end-to-end encryption (between the camera local hub and the smartphone) and is mostly implemented in Rust (except for part of the Android app that is implemented in Kotlin). The system is functional now and I've been using it in my own house for the past couple of weeks.<p>Based on some of the discussions I've seen online, it seems like there are other users who are also concerned with the privacy implications of home security cameras. Therefore, I decided to open source my solution for everyone to use. If you need a privacy-preserving home security camera, please give it a try and provide feedback. Note that trying out the system requires you to have a supported IP camera, a local machine connected to the IP camera, a server, and an Android smartphone. I have put together detailed instructions on setting up the system, which I hope makes it easier for others to get the system up and running.<p>In addition, consider contributing to the project. The prototype currently has a lot of limitations: mainly that it has only been tested with one IP camera, only allows the use of one camera, and only supports Android. I'll continue to improve the prototype as time permits, but progress will be much faster if there are other contributors as well.</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42284412\">https://news.ycombinator.com/item?id=42284412</a></p>\n<p>Points: 543</p>\n<p># Comments: 165</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: Markwhen: Markdown for Timelines",
      "url": "https://markwhen.com/",
      "date": 1733075928,
      "author": "koch",
      "unread": true,
      "desc": "",
      "content": "\n<p>Article URL: <a href=\"https://markwhen.com\">https://markwhen.com</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42289690\">https://news.ycombinator.com/item?id=42289690</a></p>\n<p>Points: 893</p>\n<p># Comments: 97</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: SeekStorm – open-source sub-millisecond search in Rust",
      "url": "https://github.com/SeekStorm/SeekStorm",
      "date": 1733144793,
      "author": "wolfgarbe",
      "unread": true,
      "desc": "",
      "content": "\n<p>Article URL: <a href=\"https://github.com/SeekStorm/SeekStorm\">https://github.com/SeekStorm/SeekStorm</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42295792\">https://news.ycombinator.com/item?id=42295792</a></p>\n<p>Points: 243</p>\n<p># Comments: 56</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: Automate your studio – mute a mixer channel to turn your PTZ camera",
      "url": "https://github.com/KopiasCsaba/open_sound_control_bridge",
      "date": 1733163172,
      "author": "kcsaba2",
      "unread": true,
      "desc": "",
      "content": "\n<p>Seamlessly automate your audio-visual setup! This open-source framework uses the Open Sound Control protocol to integrate audio mixer consoles, OBS, PTZ cameras, and more. Perfect for live production enthusiasts, streamers, and tech tinkerers.<p>I have made it originally to meet our needs, then opensourced it: We needed to move a PTZ cam based on the stage/pulpit mute states on our X32, but it is capable for way more. Let me know what do you guys think!<p>Cheers!</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42298713\">https://news.ycombinator.com/item?id=42298713</a></p>\n<p>Points: 63</p>\n<p># Comments: 22</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: Flow – A dynamic task engine for building AI agents",
      "url": "https://github.com/lmnr-ai/flow",
      "date": 1733165463,
      "author": "skull8888888",
      "unread": true,
      "desc": "",
      "content": "\n<p>I think graph is a wrong abstraction for building AI agents. Just look at how incredibly hard it is to make routing using LangGraph - conditional edges are a mess.<p>I built Laminar Flow to solve a common frustration with traditional workflow engines - the rigid need to predefine all node connections. Instead of static DAGs, Flow uses a dynamic task queue system that lets workflows evolve at runtime.<p>Flow is built on 3 core principles:<p>* Concurrent Execution - Tasks run in parallel automatically<p>* Dynamic Scheduling - Tasks can schedule new tasks at runtime<p>* Smart Dependencies - Tasks can await results from previous operations<p>All tasks share a thread-safe context for state management.<p>This architecture makes it surprisingly simple to implement complex patterns like map-reduce, streaming results, cycles, and self-modifying workflows. Perfect for AI agents that need to make runtime decisions about their next actions.<p>Flow is lightweight, elegantly written and has zero dependencies for the engine.<p>Behind the scenes it's a ThreadPoolExecutor, which is more than enough to handle concurrent execution considering majority of AI workflows are IO bound.<p>To make it possible to wait for the completion of previous tasks, I just added semaphore for the state value. Once the state is set, one permit is released for the semaphore.<p>The project also comes with built-in OpenTelemetry instrumentation for debugging and state reconstruction.<p>Give it a try here -> <a href=\"https://github.com/lmnr-ai/flow\">https://github.com/lmnr-ai/flow</a>. Just do pip install lmnr-flow. (or uv add lmnr-flow). More examples are in the readme.<p>Looking forward to feedback from the HN community! Especially interested in hearing about your use cases for dynamic workflows.<p>Couple of things on the roadmap, so contributions are welcome!<p>* Async function support<p>* TS port<p>* Some consensus on how to handle task ids when the same tasks is spawned multiple times</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42299098\">https://news.ycombinator.com/item?id=42299098</a></p>\n<p>Points: 158</p>\n<p># Comments: 50</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: Open-sourced (road) traffic counting application",
      "url": "https://github.com/asfarley/vtc_opensource",
      "date": 1733179994,
      "author": "asfarley",
      "unread": true,
      "desc": "",
      "content": "\n<p>I was developing/selling this application under Roadometry, but sales are getting slow and I'd prefer to make it available for free.<p>This is a desktop Windows application which can be used for counting road traffic.<p><a href=\"https://roadometry.com\" rel=\"nofollow\">https://roadometry.com</a>\n<a href=\"https://www.youtube.com/@roadometry2011\" rel=\"nofollow\">https://www.youtube.com/@roadometry2011</a><p>The application uses Multiple Hypothesis Tracking (MHT) combined with Darknet Yolo.<p>I trained the network myself. I have a tool-chain for building a video-based training set including associations, but it's quite complex to use. I never ended up training a network to perform association, but I think a combined detector/associator network is the next step.</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42301228\">https://news.ycombinator.com/item?id=42301228</a></p>\n<p>Points: 116</p>\n<p># Comments: 24</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: Copper – Open-source robotics in Rust with deterministic log replay",
      "url": "https://github.com/copper-project/copper-rs/wiki/Copper-Release-Log",
      "date": 1733187533,
      "author": "gbin",
      "unread": true,
      "desc": "",
      "content": "\n<p>Article URL: <a href=\"https://github.com/copper-project/copper-rs/wiki/Copper-Release-Log\">https://github.com/copper-project/copper-rs/wiki/Copper-Release-Log</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42302026\">https://news.ycombinator.com/item?id=42302026</a></p>\n<p>Points: 160</p>\n<p># Comments: 35</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: Book and change flights with one email",
      "url": "https://www.bonbook.co/showhn",
      "date": 1733193089,
      "author": "themagyar",
      "unread": true,
      "desc": "",
      "content": "\n<p>Hi there,<p>TLDR; I built an inbox simulator so you can try BonBook in 15s, without sharing your email.<p>Earlier this year I was flying 2-3 times per month and found booking and changing flights a hassle. So I decided to fix it.<p>BonBook lets you find, book and change flights with one email. It can also auto-find flights for events you’re attending.<p>Over the last few days, I built a simulator that lets you interact with BonBook without sharing your email. It responds with real flights and each response includes a link to compare w/ Google.</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42302560\">https://news.ycombinator.com/item?id=42302560</a></p>\n<p>Points: 122</p>\n<p># Comments: 83</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: High School Student's First App – NWS Weather Report",
      "url": "https://weatherreportnow.com/",
      "date": 1733199192,
      "author": "Orcazephyr",
      "unread": true,
      "desc": "",
      "content": "\n<p>Article URL: <a href=\"https://weatherreportnow.com/\">https://weatherreportnow.com/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42303018\">https://news.ycombinator.com/item?id=42303018</a></p>\n<p>Points: 62</p>\n<p># Comments: 28</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: I built an AI tool to analyze SEC filings the minute they're released",
      "url": "https://docdelta.ca/",
      "date": 1733253943,
      "author": "docdeltaneer",
      "unread": true,
      "desc": "",
      "content": "\n<p>Hello everyone, I built this tool on Next/Node to automatically analyze new filings from the SEC and probe the Edgar API for new filings 24/7. We use AI to analyze the filings the second they are released.<p>Free accounts to look at real filings (automatically updated) are available to any who sign up.<p>If you have any questions feel free to ask.</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42310165\">https://news.ycombinator.com/item?id=42310165</a></p>\n<p>Points: 61</p>\n<p># Comments: 56</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: My C compiler compiled itself",
      "url": "https://github.com/keyvank/30cc",
      "date": 1733258124,
      "author": "keyvank",
      "unread": true,
      "desc": "",
      "content": "\n<p>One of the most challenging projects of my life :)</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42311031\">https://news.ycombinator.com/item?id=42311031</a></p>\n<p>Points: 269</p>\n<p># Comments: 126</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: Open-Source Colab Notebooks to Implement Advanced RAG Techniques",
      "url": "https://github.com/athina-ai/rag-cookbooks",
      "date": 1733282379,
      "author": "hbamoria",
      "unread": true,
      "desc": "",
      "content": "\n<p>Hey HN fam,<p>We’ve seen developers spend a lot of time implementing advanced RAG techniques from scratch.<p>While these techniques are essential for improving performance, their implementation requires a lot of effort and testing!<p>To help with this process, our team (Athina AI) has released Open-Source Advanced RAG Cookbooks.<p>This is a collection of ready-to-run Google Colab notebooks featuring the most commonly implemented techniques.<p>Please show us some love by starring  the repo if you find this useful!</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42314212\">https://news.ycombinator.com/item?id=42314212</a></p>\n<p>Points: 98</p>\n<p># Comments: 26</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: A 5th order motion planner with PH spline blending, written in Ada",
      "url": "https://600f3559.prunt-docs.pages.dev/",
      "date": 1733293514,
      "author": "LiamPowell",
      "unread": true,
      "desc": "",
      "content": "\n<p>Article URL: <a href=\"https://600f3559.prunt-docs.pages.dev/\">https://600f3559.prunt-docs.pages.dev/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42314905\">https://news.ycombinator.com/item?id=42314905</a></p>\n<p>Points: 115</p>\n<p># Comments: 32</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: I combined spaced repetition with emails so you can remember anything",
      "url": "https://www.ginkgonotes.com/",
      "date": 1733320242,
      "author": "iskrataa",
      "unread": true,
      "desc": "",
      "content": "\n<p>Hey HN,<p>I am a student shipping apps in my free time. This is my 4th for the year!<p>Non-fic books and podcasts have been part of my life for years now but I always struggled with remembering what I’ve read or listened to. I wanted it to stick even after years.<p>My notes list grew large but I never really revisited them. That’s why I created GinkgoNotes.<p>You can enter notes you want to recall and leave it to the app to create a personalised (based on spaced repetition) email schedule. That means you’ll get your notes emailed to you a couple of times exactly when you should read them again (based on Ebbinghaus's Forgetting Curve) so it’s certain that you’ll remember them.<p>I hope this will be helpful as it was for me. Would love some feedback!<p>Iskren</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42317393\">https://news.ycombinator.com/item?id=42317393</a></p>\n<p>Points: 235</p>\n<p># Comments: 83</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: Vekos – a Rust OS with Built-In Cryptographic Verification",
      "url": "https://github.com/JGiraldo29/vekos",
      "date": 1733327500,
      "author": "jgiraldo29",
      "unread": true,
      "desc": "",
      "content": "\n<p>VEKOS(Verified Experimental Kernel OS) is a Rust-based experimental kernel that focuses on runtime verification and security. Every filesystem operation and memory allocation generates cryptographic proofs that can be verified in real-time, ensuring system integrity. Think of it like a blockchain for OS operations rather than just storage verification.<p>Key features:\n- Merkle tree-backed filesystem with operation verification\n- Memory manager with CoW and proof generation\n- Buddy allocator with zone-based memory management\n- Shell with VT100 support\n- Verified boot sequence with stage attestation<p>The kernel is still in alpha, but it demonstrates a novel approach to OS security by making verification a first-class citizen. All critical operations (memory allocations, filesystem writes, process creation) generate proofs that are stored in an append-only chain, similar to a blockchain but for system operations.<p>GitHub: <a href=\"https://github.com/JGiraldo29/vekos\">https://github.com/JGiraldo29/vekos</a><p>I would be excited to get feedback on this project, especially on the verification approach and potential use cases. If you have any question the innerworkings of the development, just ask and I will gladly answer all questions. The code is under the Apache 2.0 license and welcomes contributors.</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42318644\">https://news.ycombinator.com/item?id=42318644</a></p>\n<p>Points: 81</p>\n<p># Comments: 15</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: Outerbase Studio – Open-Source Database GUI",
      "url": "https://github.com/outerbase/studio",
      "date": 1733334924,
      "author": "burcs",
      "unread": true,
      "desc": "",
      "content": "\n<p>We just launched Outerbase Studio, the open-source version of our core database offering. It works in your browser or as a desktop app and supports MySQL, PostgreSQL, and SQLite.<p>What it does:<p>• Connects to MySQL, PostgreSQL, and SQLite databases.\n• Spin up local databases directly through the UI, even if you don’t have one running.\n• Manage and query your data in a lightweight, intuitive interface.\n• Completely open source.<p>Why we built it: \nWe wanted to share the core Outerbase experience with the developer community as a free, open-source tool. It’s simple, fast, and removes the barriers to working with databases locally.<p>GitHub: <a href=\"https://github.com/outerbase/studio\">https://github.com/outerbase/studio</a><p>Release Blog: <a href=\"https://www.outerbase.com/blog/outerbase-studio-open-source-database-management/\">https://www.outerbase.com/blog/outerbase-studio-open-source-...</a><p>Try it out: studio.outerbase.com<p>Would love the HN communities feedback, please try it out and let me know what you think!</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42320032\">https://news.ycombinator.com/item?id=42320032</a></p>\n<p>Points: 339</p>\n<p># Comments: 141</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: Replace \"hub\" by \"ingest\" in GitHub URLs for a prompt-friendly extract",
      "url": "https://gitingest.com/",
      "date": 1733412289,
      "author": "cyclotruc",
      "unread": true,
      "desc": "",
      "content": "\n<p>Gitingest is a open-source micro dev-tool that I made over the last week.<p>It turns any public Github repository into a text\nextract that you can give to your favourite LLM easily.<p>Today I added this url trick to make it even easier to use!<p>How I use it myself:\n- Quickly generate a README.md boilerplate for a project\n- Ask LLMs questions about an undocumented codebase<p>It is still very much work in progress and I plan to add many more options (file size limits, exclude patterns..) and a public API<p>I hope this tool can help you\nYour feedback is very valuable to help me prioritize\nAnd contributions are welcome!</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42329071\">https://news.ycombinator.com/item?id=42329071</a></p>\n<p>Points: 170</p>\n<p># Comments: 46</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Show HN: Banan-OS, an Unix-like operating system written from scratch",
      "url": "https://github.com/Bananymous/banan-os",
      "date": 1733424854,
      "author": "Bananymous",
      "unread": true,
      "desc": "",
      "content": "\n<p>This is my operating system that I've been working for the past 2 years. All of the code is written exclusively by me except from ported software. banan-os has a monolithic kernel targeting x86 (i686) and x86_64 architectures. The project consists of bootloader, kernel and userspace libraries (libc, libGUI, libFont, ...). It also uses my custom C++ standard library partly based on stdc++.<p>Currently I have basic TTY and GUI environment with some of the basic UNIX utilities like cp, ls and stat. I have basic support for USB (keyboard/mouse/storage), disks (NVMe, AHCI), custom networking stack with TCP and UDP support, and a UNIX-like filesystem with /dev /tmp /proc filesystems.<p>The whole project is written in  C++ except for my BIOS bootloader that is written in 16-bit real mode assembly. I have been testing the OS mainly on virtual machines but also frequently on real hardware.</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42331270\">https://news.ycombinator.com/item?id=42331270</a></p>\n<p>Points: 278</p>\n<p># Comments: 38</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    }
  ]
}