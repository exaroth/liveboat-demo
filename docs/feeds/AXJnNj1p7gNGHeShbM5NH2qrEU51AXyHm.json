{"id":"AXJnNj1p7gNGHeShbM5NH2qrEU51AXyHm","title":"Julia Evans","displayTitle":"Dev - Julia Evans","url":"https://jvns.ca/atom.xml","feedLink":"https://jvns.ca/atom.xml","items":[{"title":"ASCII control characters in my terminal","url":"https://jvns.ca/blog/2024/10/31/ascii-control-characters/","date":1730361610,"author":"Julia Evans","unread":true,"desc":"","content":"<p>Hello! I&rsquo;ve been thinking about the terminal a lot and yesterday I got curious\nabout all these &ldquo;control codes&rdquo;, like <code>Ctrl-A</code>, <code>Ctrl-C</code>, <code>Ctrl-W</code>, etc. What&rsquo;s\nthe deal with all of them?</p>\n<h3 id=\"a-table-of-ascii-control-characters\">a table of ASCII control characters</h3>\n<p>Here&rsquo;s a table of all 33 ASCII control characters, and what they do on my\nmachine (on Mac OS), more or less. There are about a million caveats, but I&rsquo;ll talk about\nwhat it means and all the problems with this diagram that I know about.</p>\n<p><a href=\"https://jvns.ca/ascii.html\"><img src=\"https://jvns.ca/images/ascii-control.png\"></a></p>\n<p>You can also view it <a href=\"https://jvns.ca/ascii.html\">as an HTML page</a> (I just made it an image so\nit would show up in RSS).</p>\n<h3 id=\"different-kinds-of-codes-are-mixed-together\">different kinds of codes are mixed together</h3>\n<p>The first surprising thing about this diagram to me is that there are 33\ncontrol codes, split into (very roughly speaking) these categories:</p>\n<ol>\n<li>Codes that are handled by the operating system&rsquo;s terminal driver, for\nexample when the OS sees a <code>3</code> (<code>Ctrl-C</code>), it&rsquo;ll send a <code>SIGINT</code> signal to\nthe current program</li>\n<li>Everything else is passed through to the application as-is and the\napplication can do whatever it wants with them. Some subcategories of\nthose:\n<ul>\n<li>Codes that correspond to a literal keypress of a key on your keyboard\n(<code>Enter</code>, <code>Tab</code>, <code>Backspace</code>). For example when you press <code>Enter</code>, your\nterminal gets sent <code>13</code>.</li>\n<li>Codes used by <code>readline</code>: &ldquo;the application can do whatever it wants&rdquo;\noften means &ldquo;it&rsquo;ll do more or less what the <code>readline</code> library does,\nwhether the application actually uses <code>readline</code> or not&rdquo;, so I&rsquo;ve\nlabelled a bunch of the codes that <code>readline</code> uses</li>\n<li>Other codes, for example I think <code>Ctrl-X</code> has no standard meaning in the\nterminal in general but emacs uses it very heavily</li>\n</ul>\n</li>\n</ol>\n<p>There&rsquo;s no real structure to which codes are in which categories, they&rsquo;re all\njust kind of randomly scattered because this evolved organically.</p>\n<p>(If you&rsquo;re curious about readline, I wrote more about readline in <a href=\"https://jvns.ca/blog/2024/07/08/readline/\">entering text in the terminal is complicated</a>, and there are a lot of\n<a href=\"https://github.com/chzyer/readline/blob/master/doc/shortcut.md\">cheat sheets out there</a>)</p>\n<h3 id=\"there-are-only-33-control-codes\">there are only 33 control codes</h3>\n<p>Something else that I find a little surprising is that are only 33 control codes &ndash;\nA to Z, plus 7 more (<code>@, [, \\, ], ^, _, ?</code>). This means that if you want to\nhave for example <code>Ctrl-1</code> as a keyboard shortcut in a terminal application,\nthat&rsquo;s not really meaningful &ndash; on my machine at least <code>Ctrl-1</code> is exactly the\nsame thing as just pressing <code>1</code>, <code>Ctrl-3</code> is the same as <code>Ctrl-[</code>, etc.</p>\n<p>Also <code>Ctrl+Shift+C</code> isn&rsquo;t a control code &ndash; what it does depends on your\nterminal emulator. On Linux <code>Ctrl-Shift-X</code> is often used by the terminal\nemulator to copy or open a new tab or paste for example, it&rsquo;s not sent to the\nTTY at all.</p>\n<p>Also I use <code>Ctrl+Left Arrow</code> all the time, but that isn&rsquo;t a control code,\ninstead it sends an ANSI escape sequence (<code>ctrl-[[1;5D</code>) which is a different\nthing which we absolutely do not have space for in this post.</p>\n<p>This &ldquo;there are only 33 codes&rdquo; thing is totally different from how keyboard\nshortcuts work in a GUI where you can have <code>Ctrl+KEY</code> for any key you want.</p>\n<h3 id=\"the-official-ascii-names-aren-t-very-meaningful-to-me\">the official ASCII names aren&rsquo;t very meaningful to me</h3>\n<p>Each of these 33 control codes has a name in ASCII (for example <code>3</code> is <code>ETX</code>).\nWhen all of these control codes were originally defined, they weren&rsquo;t being\nused for computers or terminals at all, they were used for <a href=\"https://falsedoor.com/doc/ascii_evolution-of-character-codes.pdf\">the telegraph machine</a>.\nTelegraph machines aren&rsquo;t the same as UNIX terminals so a lot of the codes were repurposed to mean something else.</p>\n<p>Personally I don&rsquo;t find these ASCII names very useful, because 50% of the time\nthe name in ASCII has no actual relationship to what that code does on UNIX\nsystems today. So it feels easier to just ignore the ASCII names completely\ninstead of trying to figure which ones still match their original meaning.</p>\n<h3 id=\"it-s-hard-to-use-ctrl-m-as-a-keyboard-shortcut\">It&rsquo;s hard to use Ctrl-M  as a keyboard shortcut</h3>\n<p>Another thing that&rsquo;s a bit weird is that <code>Ctrl-M</code> is literally the same as\n<code>Enter</code>, and <code>Ctrl-I</code> is the same as <code>Tab</code>, which makes it hard to use those two as keyboard shortcuts.</p>\n<p>From some quick research, it seems like some folks do still use <code>Ctrl-I</code> and\n<code>Ctrl-M</code> as keyboard shortcuts (<a href=\"https://github.com/tmux/tmux/issues/2705\">here&rsquo;s an example</a>), but to do that\nyou need to configure your terminal emulator to treat them differently than the\ndefault.</p>\n<p>For me the main takeaway is that if I ever write a terminal application I\nshould avoid <code>Ctrl-I</code> and <code>Ctrl-M</code> as keyboard shortcuts in it.</p>\n<h3 id=\"how-to-identify-what-control-codes-get-sent\">how to identify what control codes get sent</h3>\n<p>While writing this I needed to do a bunch of experimenting to digure out what\nvarious key combinations did, so I wrote this Python script\n<a href=\"https://gist.github.com/jvns/a2ea09dbfbe03cc75b7bfb381941c742\">echo-key.py</a>\nthat will print them out.</p>\n<p>There&rsquo;s probably a more official way but I appreciated having a script I could\ncustomize.</p>\n<h3 id=\"caveat-on-canonical-vs-noncanonical-mode\">caveat: on canonical vs noncanonical mode</h3>\n<p>Two of these codes (<code>Ctrl-W</code> and <code>Ctrl-U</code>) are labelled in the table as\n&ldquo;handled by the OS&rdquo;, but actually they&rsquo;re not <strong>always</strong> handled by the OS, it\ndepends on whether the terminal is in &ldquo;canonical&rdquo; mode or in &ldquo;noncanonical mode&rdquo;.</p>\n<p>In <a href=\"https://www.man7.org/linux/man-pages/man3/termios.3.html\">canonical mode</a>,\nprograms only get input when you press <code>Enter</code> (and the OS is in charge of deleting characters when you press <code>Backspace</code> or <code>Ctrl-W</code>). But in noncanonical mode the program gets\ninput immediately when you press a key, and the <code>Ctrl-W</code> and <code>Ctrl-U</code> codes are passed through to the program to handle any way it wants.</p>\n<p>Generally in noncanonical mode the program will handle <code>Ctrl-W</code> and <code>Ctrl-U</code>\nsimilarly to how the OS does, but there are some small differences.</p>\n<p>Some examples of programs that use canonical mode:</p>\n<ul>\n<li>probably pretty much any noninteractive program, like <code>grep</code> or <code>cat</code></li>\n<li><code>git</code>, I think</li>\n</ul>\n<p>Examples of programs that use noncanonical mode:</p>\n<ul>\n<li><code>python3</code>, <code>irb</code> and other REPLs</li>\n<li>your shell</li>\n<li>any full screen TUI like <code>less</code> or <code>vim</code></li>\n</ul>\n<h3 id=\"caveat-all-of-the-os-terminal-driver-codes-are-configurable-with-stty\">caveat: all of the &ldquo;OS terminal driver&rdquo; codes are configurable with <code>stty</code></h3>\n<p>I said that <code>Ctrl-C</code> sends <code>SIGINT</code> but technically this is not necessarily\ntrue, if you really want to you can remap all of the codes labelled &ldquo;OS\nterminal driver&rdquo;, plus Backspace, using a tool called <code>stty</code>, and you can view\nthe mappings with <code>stty -a</code>.</p>\n<p>Here are the mappings on my machine right now:</p>\n<pre><code>$ stty -a\ncchars: discard = ^O; dsusp = ^Y; eof = ^D; eol = &lt;undef&gt;;\n\teol2 = &lt;undef&gt;; erase = ^?; intr = ^C; kill = ^U; lnext = ^V;\n\tmin = 1; quit = ^\\; reprint = ^R; start = ^Q; status = ^T;\n\tstop = ^S; susp = ^Z; time = 0; werase = ^W;\n</code></pre>\n<p>I have personally never remapped any of these and I cannot imagine a reason I\nwould (I think it would be a recipe for confusion and disaster for me), but I\n<a href=\"TODO\">asked on Mastodon</a> and people said the most common reasons they used\n<code>stty</code> were:</p>\n<ul>\n<li>fix a broken terminal with <code>stty sane</code></li>\n<li>set <code>stty erase ^H</code> to change how Backspace works</li>\n<li>set <code>stty ixoff</code></li>\n<li>some people even map <code>SIGINT</code> to a different key, like their <code>DELETE</code> key</li>\n</ul>\n<h3 id=\"caveat-on-signals\">caveat: on signals</h3>\n<p>Two signals caveats:</p>\n<ol>\n<li>If the <code>ISIG</code> terminal mode is turned off, then the OS won&rsquo;t send signals. For example <code>vim</code> turns off <code>ISIG</code></li>\n<li>Apparently on BSDs, there&rsquo;s an extra control code (<code>Ctrl-T</code>) which sends <code>SIGINFO</code></li>\n</ol>\n<p>You can see which terminal modes a program is setting using <code>strace</code> like this,\nterminal modes are set with the <code>ioctl</code> system call:</p>\n<pre><code>$ strace -tt -o out  vim\n$ grep ioctl out | grep SET\n</code></pre>\n<p>here are the modes <code>vim</code> sets when it starts (<code>ISIG</code> and <code>ICANON</code> are\nmissing!):</p>\n<pre><code>17:43:36.670636 ioctl(0, TCSETS, {c_iflag=IXANY|IMAXBEL|IUTF8,\nc_oflag=NL0|CR0|TAB0|BS0|VT0|FF0|OPOST, c_cflag=B38400|CS8|CREAD,\nc_lflag=ECHOK|ECHOCTL|ECHOKE|PENDIN, ...}) = 0\n</code></pre>\n<p>and it resets the modes when it exits:</p>\n<pre><code>17:43:38.027284 ioctl(0, TCSETS, {c_iflag=ICRNL|IXANY|IMAXBEL|IUTF8,\nc_oflag=NL0|CR0|TAB0|BS0|VT0|FF0|OPOST|ONLCR, c_cflag=B38400|CS8|CREAD,\nc_lflag=ISIG|ICANON|ECHO|ECHOE|ECHOK|IEXTEN|ECHOCTL|ECHOKE|PENDIN, ...}) = 0\n</code></pre>\n<p>I think the specific combination of modes vim is using here might be called\n&ldquo;raw mode&rdquo;, <a href=\"https://linux.die.net/man/3/cfmakeraw\">man cfmakeraw</a> talks about\nthat.</p>\n<h3 id=\"there-are-a-lot-of-conflicts\">there are a lot of conflicts</h3>\n<p>Related to &ldquo;there are only 33 codes&rdquo;, there are a lot of conflicts where\ndifferent parts of the system want to use the same code for different things,\nfor example by default <code>Ctrl-S</code> will freeze your screen, but if you turn that\noff then <code>readline</code> will use <code>Ctrl-S</code> to do a forward search.</p>\n<p>Another example is that on my machine sometimes <code>Ctrl-T</code> will send <code>SIGINFO</code>\nand sometimes it&rsquo;ll transpose 2 characters and sometimes it&rsquo;ll do something\ncompletely different depending on:</p>\n<ul>\n<li>whether the program has <code>ISIG</code> set</li>\n<li>whether the program uses <code>readline</code> / imitates readline&rsquo;s behaviour</li>\n</ul>\n<h3 id=\"caveat-on-backspace-and-other-backspace\">caveat: on &ldquo;backspace&rdquo; and &ldquo;other backspace&rdquo;</h3>\n<p>In this diagram I&rsquo;ve labelled code 127 as &ldquo;backspace&rdquo; and 8 as &ldquo;other\nbackspace&rdquo;. Uh, what?</p>\n<p>I think this was the single biggest topic of discussion in the replies on Mastodon &ndash; apparently there&rsquo;s a LOT of history to this and I&rsquo;d never heard of any of it before.</p>\n<p>First, here&rsquo;s how it works on my machine:</p>\n<ol>\n<li>I press the <code>Backspace</code> key</li>\n<li>The TTY gets sent the byte <code>127</code>, which is called <code>DEL</code> in ASCII</li>\n<li>the OS terminal driver and readline both have <code>127</code> mapped to &ldquo;backspace&rdquo; (so it works both in canonical mode and noncanonical mode)</li>\n<li>The previous character gets deleted</li>\n</ol>\n<p>If I press <code>Ctrl+H</code>, it has the same effect as <code>Backspace</code> if I&rsquo;m using\nreadline, but in a program without readline support (like <code>cat</code> for instance),\nit just prints out <code>^H</code>.</p>\n<p>Apparently Step 2 above is different for some folks &ndash; their <code>Backspace</code> key sends\nthe byte <code>8</code> instead of <code>127</code>, and so if they want Backspace to work then they\nneed to configure the OS (using <code>stty</code>) to set <code>erase = ^H</code>.</p>\n<p>There&rsquo;s an incredible <a href=\"https://www.debian.org/doc/debian-policy/ch-opersys.html#keyboard-configuration\">section of the Debian Policy Manual on keyboard configuration</a>\nthat describes how <code>Delete</code> and <code>Backspace</code> should work according to Debian\npolicy, which seems very similar to how it works on my Mac today.  My\nunderstanding (via <a href=\"https://tech.lgbt/@Diziet/113396035847619715\">this mastodon post</a>)\nis that this policy was written in the 90s because there was a lot of confusion\nabout what <code>Backspace</code> should do in the 90s and there needed to be a standard\nto get everything to work.</p>\n<p>There&rsquo;s a bunch more historical terminal stuff here but that&rsquo;s all I&rsquo;ll say for\nnow.</p>\n<h3 id=\"there-s-probably-a-lot-more-diversity-in-how-this-works\">there&rsquo;s probably a lot more diversity in how this works</h3>\n<p>I&rsquo;ve probably missed a bunch more ways that &ldquo;how it works on my machine&rdquo; might\nbe different from how it works on other people&rsquo;s machines, and I&rsquo;ve probably\nmade some mistakes about how it works on my machine too. But that&rsquo;s all I&rsquo;ve\ngot for today.</p>\n<p>Some more stuff I know that I&rsquo;ve left out: according to <code>stty -a</code> <code>Ctrl-O</code> is\n&ldquo;discard&rdquo;, <code>Ctrl-R</code> is &ldquo;reprint&rdquo;, and <code>Ctrl-Y</code> is &ldquo;dsusp&rdquo;. I have no idea how\nto make those actually do anything (pressing them does not do anything\nobvious, and some people have told me what they used to do historically but\nit&rsquo;s not clear to me if they have a use in 2024), and a lot of the time in practice\nthey seem to just be passed through to the application anyway so I just\nlabelled <code>Ctrl-R</code> and <code>Ctrl-Y</code> as\n<code>readline</code>.</p>\n<h3 id=\"not-all-of-this-is-that-useful-to-know\">not all of this is that useful to know</h3>\n<p>Also I want to say that I think the contents of this post are kind of interesting\nbut I don&rsquo;t think they&rsquo;re necessarily that <em>useful</em>. I&rsquo;ve used the terminal\npretty successfully every day for the last 20 years without knowing literally\nany of this &ndash; I just knew what <code>Ctrl-C</code>, <code>Ctrl-D</code>, <code>Ctrl-Z</code>, <code>Ctrl-R</code>,\n<code>Ctrl-L</code> did in practice (plus maybe <code>Ctrl-A</code>, <code>Ctrl-E</code> and <code>Ctrl-W</code>) and did\nnot worry about the details for the most part, and that was\nalmost always totally fine except when I was <a href=\"https://jvns.ca/blog/2022/07/20/pseudoterminals/\">trying to use xterm.js</a>.</p>\n<p>But I had fun learning about it so maybe it&rsquo;ll be interesting to you too.</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"New microblog with TILs","url":"https://jvns.ca/blog/2024/11/09/new-microblog/","date":1731144269,"author":"Julia Evans","unread":true,"desc":"","content":"<p>I added a new section to this site a couple weeks ago called\n<a href=\"https://jvns.ca/til/\">TIL</a> (&ldquo;today I learned&rdquo;).</p>\n<h3 id=\"the-goal-save-interesting-tools-facts-i-posted-on-social-media\">the goal: save interesting tools &amp; facts I posted on social media</h3>\n<p>One kind of thing I like to post on Mastodon/Bluesky is &ldquo;hey, here&rsquo;s a cool\nthing&rdquo;, like <a href=\"https://github.com/dbcli/litecli\">the great SQLite repl litecli</a>, or\nthe fact that cross compiling in Go Just Works and it&rsquo;s amazing, or\n<a href=\"https://www.latacora.com/blog/2018/04/03/cryptographic-right-answers/\">cryptographic right answers</a>,\nor <a href=\"https://diffdiff.net/\">this great diff tool</a>. Usually I don&rsquo;t want to write\na whole blog post about those things because I really don&rsquo;t have much more to\nsay than &ldquo;hey this is useful!&rdquo;</p>\n<p>It started to bother me that I didn&rsquo;t have anywhere to put those things: for\nexample recently I wanted to use <a href=\"https://diffdiff.net/\">diffdiff</a> and I just\ncould not remember what it was called.</p>\n<h3 id=\"the-solution-make-a-new-section-of-this-blog\">the solution: make a new section of this blog</h3>\n<p>So I quickly made a new folder called <a href=\"https://jvns.ca/til/\">/til/</a>, added some\ncustom styling (I wanted to style the posts to look a little bit like a tweet),\nmade a little Rake task to help me create new posts quickly (<code>rake new_til</code>), and\nset up a separate RSS Feed for it.</p>\n<p>I think this new section of the blog might be more for myself than anything,\nnow when I forget the link to Cryptographic Right Answers I can hopefully look\nit up on the TIL page. (you might think &ldquo;julia, why not use bookmarks??&rdquo; but I\nhave been failing to use bookmarks for my whole life and I don&rsquo;t see that\nchanging ever, putting things in public is for whatever reason much easier for\nme)</p>\n<p>So far it&rsquo;s been working, often I can actually just make a quick post in 2\nminutes which was the goal.</p>\n<h3 id=\"inspired-by-simon-willison-s-til-blog\">inspired by Simon Willison&rsquo;s TIL blog</h3>\n<p>My page is inspired by <a href=\"https://til.simonwillison.net/\">Simon Willison&rsquo;s great TIL blog</a>, though my TIL posts are a lot shorter.</p>\n<h3 id=\"i-don-t-necessarily-want-everything-to-be-archived\">I don&rsquo;t necessarily want everything to be archived</h3>\n<p>This came about because I spent a lot of time on Twitter, so I&rsquo;ve been thinking\nabout what I want to do about all of my tweets.</p>\n<p>I keep reading the advice to &ldquo;POSSE&rdquo; (&ldquo;post on your own site, syndicate\nelsewhere&rdquo;), and while I find the idea appealing in principle, for me part of\nthe appeal of social media is that it&rsquo;s a little bit ephemeral. I can\npost polls or questions or observations or jokes and then they can just kind of\nfade away as they become less relevant.</p>\n<p>I find it a lot easier to identify specific categories of things that I actually\nwant to have on a Real Website That I Own:</p>\n<ul>\n<li>blog posts here!</li>\n<li>comics at <a href=\"https://wizardzines.com/comics/\">https://wizardzines.com/comics/</a>!</li>\n<li>now TILs at <a href=\"https://jvns.ca/til/\">https://jvns.ca/til/</a>)</li>\n</ul>\n<p>and then let everything else be kind of ephemeral.</p>\n<p>I really believe in the advice to make email lists though &ndash; the first two\n(blog posts &amp; comics) both have email lists and RSS feeds that people can\nsubscribe to if they want. I might add a quick summary of any TIL posts from\nthat week to the &ldquo;blog posts from this week&rdquo; mailing list.</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Importing a frontend Javascript library without a build system","url":"https://jvns.ca/blog/2024/11/18/how-to-import-a-javascript-library/","date":1731922542,"author":"Julia Evans","unread":true,"desc":"","content":"<p>I like writing Javascript <a href=\"https://jvns.ca/blog/2023/02/16/writing-javascript-without-a-build-system/\">without a build system</a>\nand for the millionth time yesterday I ran into a problem where I needed to\nfigure out how to import a Javascript library in my code without using a build\nsystem, and it took FOREVER to figure out how to import it because the\nlibrary&rsquo;s setup instructions assume that you&rsquo;re using a build system.</p>\n<p>Luckily at this point I&rsquo;ve mostly learned how to navigate this situation and\neither successfully use the library or decide it&rsquo;s too difficult and switch to\na different library, so here&rsquo;s the guide I wish I had to importing Javascript\nlibraries years ago.</p>\n<p>I&rsquo;m only going to talk about using Javacript libraries on the frontend, and\nonly about how to use them in a no-build-system setup.</p>\n<p>In this post I&rsquo;m going to talk about:</p>\n<ol>\n<li>the three main types of Javascript files a library might provide (ES Modules, the &ldquo;classic&rdquo; global variable kind, and CommonJS)</li>\n<li>how to figure out which types of files a Javascript library includes in its build</li>\n<li>ways to import each type of file in your code</li>\n</ol>\n<h3 id=\"the-three-kinds-of-javascript-files\">the three kinds of Javascript files</h3>\n<p>There are 3 basic types of Javascript files a library can provide:</p>\n<ol>\n<li>the &ldquo;classic&rdquo; type of file that defines a global variable. This is the kind\nof file that you can just <code>&lt;script src&gt;</code> and it&rsquo;ll Just Work. Great if you\ncan get it but not always available</li>\n<li>an ES module (which may or may not depend on other files, we&rsquo;ll get to that)</li>\n<li>a &ldquo;CommonJS&rdquo; module. This is for Node, you can&rsquo;t use it in a browser at all\nwithout using a build system.</li>\n</ol>\n<p>I&rsquo;m not sure if there&rsquo;s a better name for the &ldquo;classic&rdquo; type but I&rsquo;m just going\nto call it &ldquo;classic&rdquo;. Also there&rsquo;s a type called &ldquo;AMD&rdquo; but I&rsquo;m not sure how\nrelevant it is in 2024.</p>\n<p>Now that we know the 3 types of files, let&rsquo;s talk about how to figure out which\nof these the library actually provides!</p>\n<h3 id=\"where-to-find-the-files-the-npm-build\">where to find the files: the NPM build</h3>\n<p>Every Javascript library has a <strong>build</strong> which it uploads to NPM. You might be\nthinking (like I did originally) &ndash; Julia! The whole POINT is that we&rsquo;re not\nusing Node to build our library! Why are we talking about NPM?</p>\n<p>But if you&rsquo;re using a link from a CDN like <a href=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.min.js\">https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.min.js</a>,\nyou&rsquo;re still using the NPM build! All the files on the CDNs originally come\nfrom NPM.</p>\n<p>Because of this, I sometimes like to <code>npm install</code> the library even if I&rsquo;m not\nplanning to use Node to build my library at all &ndash; I&rsquo;ll just create a new temp\nfolder, <code>npm install</code> there, and then delete it when I&rsquo;m done. I like being able to poke\naround in the files in the NPM build on my filesystem, because then I can be\n100% sure that I&rsquo;m seeing everything that the library is making available in\nits build and that the CDN isn&rsquo;t hiding something from me.</p>\n<p>So let&rsquo;s <code>npm install</code> a few libraries and try to figure out what types of\nJavascript files they provide in their builds!</p>\n<h3 id=\"example-library-1-chart-js\">example library 1: chart.js</h3>\n<p>First let&rsquo;s look inside <a href=\"https://www.chartjs.org\">Chart.js</a>, a plotting library.</p>\n<pre><code>$ cd /tmp/whatever\n$ npm install chart.js\n$ cd node_modules/chart.js/dist\n$ ls *.*js\nchart.cjs  chart.js  chart.umd.js  helpers.cjs  helpers.js\n</code></pre>\n<p>This library seems to have 3 basic options:</p>\n<p><strong>option 1:</strong> <code>chart.cjs</code>. The <code>.cjs</code> suffix tells me that this is a <strong>CommonJS\nfile</strong>, for using in Node. This means it&rsquo;s impossible to use it directly in the\nbrowser without some kind of build step.</p>\n<p><strong>option 2:<code>chart.js</code></strong>. The <code>.js</code> suffix by itself doesn&rsquo;t tell us what kind of\nfile it is, but if I open it up, I see <code>import '@kurkle/color';</code> which is an\nimmediate sign that this is an ES module &ndash; the <code>import ...</code> syntax is ES\nmodule syntax.</p>\n<p><strong>option 3: <code>chart.umd.js</code></strong>. &ldquo;UMD&rdquo; stands for &ldquo;Universal Module Definition&rdquo;,\nwhich I think means that you can use this file either with a basic <code>&lt;script src&gt;</code>, CommonJS,\nor some third thing called AMD that I don&rsquo;t understand.</p>\n<h3 id=\"how-to-use-a-umd-file\">how to use a UMD file</h3>\n<p>When I was using Chart.js I picked Option 3. I just needed to add this to my\ncode:</p>\n<pre><code>&lt;script src=&quot;./chart.umd.js&quot;&gt; &lt;/script&gt;\n</code></pre>\n<p>and then I could use the library with the global <code>Chart</code> environment variable.\nCouldn&rsquo;t be easier. I just copied <code>chart.umd.js</code> into my Git repository so that\nI didn&rsquo;t have to worry about using NPM or the CDNs going down or anything.</p>\n<h3 id=\"the-build-files-aren-t-always-in-the-dist-directory\">the build files aren&rsquo;t always in the <code>dist</code> directory</h3>\n<p>A lot of libraries will put their build in the <code>dist</code> directory, but not\nalways! The build files&rsquo; location is specified in the library&rsquo;s <code>package.json</code>.</p>\n<p>For example here&rsquo;s an excerpt from Chart.js&rsquo;s <code>package.json</code>.</p>\n<pre><code>  &quot;jsdelivr&quot;: &quot;./dist/chart.umd.js&quot;,\n  &quot;unpkg&quot;: &quot;./dist/chart.umd.js&quot;,\n  &quot;main&quot;: &quot;./dist/chart.cjs&quot;,\n  &quot;module&quot;: &quot;./dist/chart.js&quot;,\n</code></pre>\n<p>I think this is saying that if you want to use an ES Module (<code>module</code>) you\nshould use <code>dist/chart.js</code>, but the jsDelivr and unpkg CDNs should use\n<code>./dist/chart.umd.js</code>. I guess <code>main</code> is for Node.</p>\n<p><code>chart.js</code>&rsquo;s <code>package.json</code> also says <code>&quot;type&quot;: &quot;module&quot;</code>, which <a href=\"https://nodejs.org/api/packages.html#modules-packages\">according to this documentation</a>\ntells Node to treat files as ES modules by default. I think it doesn&rsquo;t tell us\nspecifically which files are ES modules and which ones aren&rsquo;t but it does tell\nus that <em>something</em> in there is an ES module.</p>\n<h3 id=\"example-library-2-atcute-oauth-browser-client\">example library 2: <code>@atcute/oauth-browser-client</code></h3>\n<p><a href=\"https://github.com/mary-ext/atcute/tree/trunk/packages/oauth/browser-client\"><code>@atcute/oauth-browser-client</code></a>\nis a library for logging into Bluesky with OAuth in the browser.</p>\n<p>Let&rsquo;s see what kinds of Javascript files it provides in its build!</p>\n<pre><code>$ npm install @atcute/oauth-browser-client\n$ cd node_modules/@atcute/oauth-browser-client/dist\n$ ls *js\nconstants.js  dpop.js  environment.js  errors.js  index.js  resolvers.js\n</code></pre>\n<p>It seems like the only plausible root file in here is <code>index.js</code>, which looks\nsomething like this:</p>\n<pre><code>export { configureOAuth } from './environment.js';\nexport * from './errors.js';\nexport * from './resolvers.js';\n</code></pre>\n<p>This <code>export</code> syntax means it&rsquo;s an <strong>ES module</strong>. That means we can use it in\nthe browser without a build step! Let&rsquo;s see how to do that.</p>\n<h3 id=\"how-to-use-an-es-module-with-importmaps\">how to use an ES module with importmaps</h3>\n<p>Using an ES module isn&rsquo;t an easy as just adding a <code>&lt;script src=&quot;whatever.js&quot;&gt;</code>. Instead, if\nthe ES module has dependencies (like <code>@atcute/oauth-browser-client</code> does) the\nsteps are:</p>\n<ol>\n<li>Set up an import map in your HTML</li>\n<li>Put import statements like <code>import { configureOAuth } from '@atcute/oauth-browser-client';</code> in your JS code</li>\n<li>Include your JS code in your HTML liek this: <code>&lt;script type=&quot;module&quot; src=&quot;YOURSCRIPT.js&quot;&gt;&lt;/script&gt;</code></li>\n</ol>\n<p>The reason we need an import map instead of just doing something like <code>import { BrowserOAuthClient } from &quot;./oauth-client-browser.js&quot;</code> is that internally the module has more import statements like <code>import {something} from @atcute/client</code>, and we need to tell the browser where to get the code for <code>@atcute/client</code> and all of its other dependencies.</p>\n<p>Here&rsquo;s what the importmap I used looks like for <code>@atcute/oauth-browser-client</code>:</p>\n<pre><code>&lt;script type=&quot;importmap&quot;&gt;\n{\n  &quot;imports&quot;: {\n    &quot;nanoid&quot;: &quot;./node_modules/nanoid/bin/dist/index.js&quot;,\n    &quot;nanoid/non-secure&quot;: &quot;./node_modules/nanoid/non-secure/index.js&quot;,\n    &quot;nanoid/url-alphabet&quot;: &quot;./node_modules/nanoid/url-alphabet/dist/index.js&quot;,\n    &quot;@atcute/oauth-browser-client&quot;: &quot;./node_modules/@atcute/oauth-browser-client/dist/index.js&quot;,\n    &quot;@atcute/client&quot;: &quot;./node_modules/@atcute/client/dist/index.js&quot;,\n    &quot;@atcute/client/utils/did&quot;: &quot;./node_modules/@atcute/client/dist/utils/did.js&quot;\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<p>Getting these import maps to work is pretty fiddly, I feel like there must be a\ntool to generate them automatically but I haven&rsquo;t found one yet. It&rsquo;s definitely possible to\nwrite a script that automatically generates the importmaps using <a href=\"https://esbuild.github.io/api/#metafile\">esbuild&rsquo;s metafile</a> but I haven&rsquo;t done that and\nmaybe there&rsquo;s a better way.</p>\n<p>I decided to set up importmaps yesterday to get\n<a href=\"https://github.com/jvns/bsky-oauth-example\">github.com/jvns/bsky-oauth-example</a>\nto work, so there&rsquo;s some example code in that repo.</p>\n<p>Also someone pointed me to Simon Willison&rsquo;s\n<a href=\"https://simonwillison.net/2023/May/2/download-esm/\">download-esm</a>, which will\ndownload an ES module and rewrite the imports to point to the JS files directly\nso that you don&rsquo;t need importmaps. I haven&rsquo;t tried it yet but it seems like a\ngreat idea.</p>\n<h3 id=\"problems-with-importmaps-too-many-files\">problems with importmaps: too many files</h3>\n<p>I did run into some problems with using importmaps in the browser though &ndash; it\nneeded to download dozens of Javascript files to load my site, and my webserver\nin development couldn&rsquo;t keep up for some reason. I kept seeing files fail to\nload randomly and then had to reload the page and hope that they would succeed\nthis time.</p>\n<p>It wasn&rsquo;t an issue anymore when I deployed my site to production, so I guess it\nwas a problem with my local dev environment.</p>\n<p>Also one slightly annoying thing about ES modules in general is that you need to\nbe running a webserver to use them, I&rsquo;m sure this is for a good reason but it&rsquo;s\neasier when you can just open your <code>index.html</code> file without starting a\nwebserver.</p>\n<p>Because of the &ldquo;too many files&rdquo; thing I think actually using ES modules with\nimportmaps in this way isn&rsquo;t actually that appealing to me, but it&rsquo;s good to\nknow it&rsquo;s possible.</p>\n<h3 id=\"how-to-use-an-es-module-without-importmaps\">how to use an ES module without importmaps</h3>\n<p>If the ES module doesn&rsquo;t have dependencies then it&rsquo;s even easier &ndash; you don&rsquo;t\nneed the importmaps! You can just:</p>\n<ul>\n<li>put <code>&lt;script type=&quot;module&quot; src=&quot;YOURCODE.js&quot;&gt;&lt;/script&gt;</code> in your HTML. The <code>type=&quot;module&quot;</code> is important.</li>\n<li>put <code>import {whatever} from &quot;https://example.com/whatever.js&quot;</code> in <code>YOURCODE.js</code></li>\n</ul>\n<h3 id=\"alternative-use-esbuild\">alternative: use esbuild</h3>\n<p>If you don&rsquo;t want to use importmaps, you can also use a build system like <a href=\"https://esbuild.github.io/\">esbuild</a>. I talked about how to do\nthat in <a href=\"https://jvns.ca/blog/2021/11/15/esbuild-vue/\">Some notes on using esbuild</a>, but this blog post is\nabout ways to avoid build systems completely so I&rsquo;m not going to talk about\nthat option here. I do still like esbuild though and I think it&rsquo;s a good option\nin this case.</p>\n<h3 id=\"what-s-the-browser-support-for-importmaps\">what&rsquo;s the browser support for importmaps?</h3>\n<p><a href=\"https://caniuse.com/import-maps\">CanIUse</a> says that importmaps are in\n&ldquo;Baseline 2023: newly available across major browsers&rdquo; so my sense is that in\n2024 that&rsquo;s still maybe a little bit too new? I think I would use importmaps\nfor some fun experimental code that I only wanted like myself and 12 people to\nuse, but if I wanted my code to be more widely usable I&rsquo;d use <code>esbuild</code> instead.</p>\n<h3 id=\"example-library-3-atproto-oauth-client-browser\">example library 3: <code>@atproto/oauth-client-browser</code></h3>\n<p>Let&rsquo;s look at one final example library! This is a different Bluesky auth\nlibrary than <code>@atcute/oauth-browser-client</code>.</p>\n<pre><code>$ npm install @atproto/oauth-client-browser\n$ cd node_modules/@atproto/oauth-client-browser/dist\n$ ls *js\nbrowser-oauth-client.js  browser-oauth-database.js  browser-runtime-implementation.js  errors.js  index.js  indexed-db-store.js  util.js\n</code></pre>\n<p>Again, it seems like only real candidate file here is <code>index.js</code>. But this is a\ndifferent situation from the previous example library! Let&rsquo;s take a look at\n<code>index.js</code>:</p>\n<p>There&rsquo;s a bunch of stuff like this in <code>index.js</code>:</p>\n<pre><code>__exportStar(require(&quot;@atproto/oauth-client&quot;), exports);\n__exportStar(require(&quot;./browser-oauth-client.js&quot;), exports);\n__exportStar(require(&quot;./errors.js&quot;), exports);\nvar util_js_1 = require(&quot;./util.js&quot;);\n</code></pre>\n<p>This <code>require()</code> syntax is CommonJS syntax, which means that we can&rsquo;t use this\nfile in the browser at all, we need to use some kind of build step, and\nESBuild won&rsquo;t work either.</p>\n<p>Also in this library&rsquo;s <code>package.json</code> it says <code>&quot;type&quot;: &quot;commonjs&quot;</code> which is\nanother way to tell it&rsquo;s CommonJS.</p>\n<h3 id=\"how-to-use-a-commonjs-module-with-esm-sh-https-esm-sh\">how to use a CommonJS module with <a href=\"https://esm.sh\">esm.sh</a></h3>\n<p>Originally I thought it was impossible to use CommonJS modules without learning\na build system, but then someone Bluesky told me about\n<a href=\"https://esm.sh\">esm.sh</a>! It&rsquo;s a CDN that will translate anything into an ES\nModule. <a href=\"https://www.skypack.dev/\">skypack.dev</a> does something similar, I&rsquo;m not\nsure what the difference is but one person mentioned that if one doesn&rsquo;t work\nsometimes they&rsquo;ll try the other one.</p>\n<p>For <code>@atproto/oauth-client-browser</code> using it seems pretty simple, I just need to put this in my HTML:</p>\n<pre><code>&lt;script type=&quot;module&quot; src=&quot;script.js&quot;&gt; &lt;/script&gt;\n</code></pre>\n<p>and then put this in <code>script.js</code>.</p>\n<pre><code>import { BrowserOAuthClient } from &quot;https://esm.sh/@atproto/oauth-client-browser@0.3.0&quot;\n</code></pre>\n<p>It seems to Just Work, which is cool! Of course this is still sort of using a\nbuild system &ndash; it&rsquo;s just that esm.sh is running the build instead of me. My\nmain concerns with this approach are:</p>\n<ul>\n<li>I don&rsquo;t really trust CDNs to keep working forever &ndash; usually I like to copy dependencies into my repository so that they don&rsquo;t go away for some reason in the future.</li>\n<li>I&rsquo;ve heard of some issues with CDNs having security compromises which scares me. Also I don&rsquo;t</li>\n<li>I don&rsquo;t really understand what esm.sh is doing and</li>\n</ul>\n<h3 id=\"esbuild-can-also-convert-commonjs-modules-into-es-modules\">esbuild can also convert CommonJS modules into ES modules</h3>\n<p>I also learned that you can also use <code>esbuild</code> to convert a CommonJS module\ninto an ES module, though there are some limitations &ndash; the <code>import { BrowserOAuthClient } from</code> syntax doesn&rsquo;t work. Here&rsquo;s a <a href=\"https://github.com/evanw/esbuild/issues/442\">github issue about that</a>.</p>\n<p>I think the <code>esbuild</code> approach is probably more appealing to me than the\n<code>esm.sh</code> approach because it&rsquo;s a tool that I already have on my computer so I\ntrust it more. I haven&rsquo;t experimented with this much yet though.</p>\n<h3 id=\"summary-of-the-three-types-of-files\">summary of the three types of files</h3>\n<p>Here&rsquo;s a summary of the three types of JS files you might encounter, options\nfor how to use them, and how to identify them.</p>\n<p>Unhelpfully a <code>.js</code> or <code>.min.js</code> file extension could be any of these 3\noptions, so if the file is <code>something.js</code> you need to do more detective work to\nfigure out what you&rsquo;re dealing with.</p>\n<ol>\n<li><strong>&ldquo;classic&rdquo; JS files</strong>\n<ul>\n<li><strong>How to use it:</strong>: <code>&lt;script src=&quot;whatever.js&quot;&gt;&lt;/script&gt;</code></li>\n<li><strong>Ways to identify it:</strong>\n<ul>\n<li>The website has a big friendly banner in its setup instructions saying &ldquo;Use this with a CDN!&rdquo;  or something</li>\n<li>A <code>.umd.js</code> extension</li>\n<li>Just try to put it in a <code>&lt;script src=...</code> tag and see if it works</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>ES Modules</strong>\n<ul>\n<li><strong>Ways to use it:</strong>\n<ul>\n<li>If there are no dependencies, just <code>import {whatever} from &quot;./my-module.js&quot;</code> directly in your code</li>\n<li>If there are dependencies, create an importmap and <code>import {whatever} from &quot;my-module&quot;</code>\n<ul>\n<li>or use <a href=\"https://simonwillison.net/2023/May/2/download-esm/\">download-esm</a> to remove the need for an importmap</li>\n</ul>\n</li>\n<li>Use <a href=\"https://esbuild.github.io/\">esbuild</a> or any ES Module bundler</li>\n</ul>\n</li>\n<li><strong>Ways to identify it:</strong>\n<ul>\n<li>Look for an <code>import </code> or <code>export </code> statement. (not <code>module.exports = ...</code>, that&rsquo;s CommonJS)</li>\n<li>An <code>.mjs</code> extension</li>\n<li>maybe <code>&quot;type&quot;: &quot;module&quot;</code> in <code>package.json</code> (though it&rsquo;s not clear to me which file exactly this refers to)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>CommonJS Modules</strong>\n<ul>\n<li><strong>Ways to use it:</strong>\n<ul>\n<li>Use <a href=\"https://esm.sh/#docs\">https://esm.sh</a> to convert it into an ES module, like <code>https://esm.sh/@atproto/oauth-client-browser@0.3.0</code></li>\n<li>Use a build somehow (??)</li>\n</ul>\n</li>\n<li><strong>Ways to identify it:</strong>\n<ul>\n<li>Look for <code>require()</code> or <code>module.exports = ...</code> in the code</li>\n<li>A <code>.cjs</code> extension</li>\n<li>maybe <code>&quot;type&quot;: &quot;commonjs&quot;</code> in <code>package.json</code> (though it&rsquo;s not clear to me which file exactly this refers to)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"it-s-really-nice-to-have-es-modules-standardized\">it&rsquo;s really nice to have ES modules standardized</h3>\n<p>The main difference between CommonJS modules and ES modules from my perspective\nis that ES modules are actually a standard. This makes me feel a lot more\nconfident using them, because browsers commit to backwards compatibility for\nweb standards forever &ndash; if I write some code using ES modules today, I can\nfeel sure that it&rsquo;ll still work the same way in 15 years.</p>\n<p>It also makes me feel better about using tooling like <code>esbuild</code> because even if\nthe esbuild project dies, because it&rsquo;s implementing a standard it feels likely\nthat there will be another similar tool in the future that I can replace it\nwith.</p>\n<h3 id=\"the-js-community-has-built-a-lot-of-very-cool-tools\">the JS community has built a lot of very cool tools</h3>\n<p>A lot of the time when I talk about this stuff I get responses like &ldquo;I hate\njavascript!!! it&rsquo;s the worst!!!&rdquo;. But my experience is that there are a lot of great tools for Javascript\n(I just learned about <a href=\"https://esm.sh\">https://esm.sh</a> yesterday which seems great! I love\nesbuild!), and that if I take the time to learn how things works I can take\nadvantage of some of those tools and make my life a lot easier.</p>\n<p>So the goal of this post is definitely not to complain about Javascript, it&rsquo;s\nto understand the landscape so I can use the tooling in a way that feels good\nto me.</p>\n<h3 id=\"questions-i-still-have\">questions I still have</h3>\n<p>Here are some questions I still have, I&rsquo;ll add the answers into the post if I\nlearn the answer.</p>\n<ul>\n<li>Is there a tool that automatically generates importmaps for an ES Module that\nI have set up locally? (apparently yes: <a href=\"https://jspm.org/getting-started\">jspm</a>)</li>\n<li>How can I convert a CommonJS module into an ES module on my computer, the way\n<a href=\"https://esm.sh\">https://esm.sh</a> does? (apparently esbuild can sort of do this, though <a href=\"https://github.com/evanw/esbuild/issues/442\">named exports don&rsquo;t work</a>)</li>\n<li>When people normally build CommonJS modules into regular JS code, what&rsquo;s code is\ndoing that? Obviously there are tools like webpack, rollup, esbuild, etc, but\ndo those tools all implement their own JS parsers/static analysis? How many\nJS parsers are there out there?</li>\n<li>Is there any way to bundle an ES module into a single file (like\n<code>atcute-client.js</code>), but so that in the browser I can still import multiple\ndifferent paths from that file (like both <code>@atcute/client/lexicons</code> and\n<code>@atcute/client</code>)?</li>\n</ul>\n<h3 id=\"all-the-tools\">all the tools</h3>\n<p>Here&rsquo;s a list of every tool we talked about in this post:</p>\n<ul>\n<li>Simon Willison&rsquo;s\n<a href=\"https://simonwillison.net/2023/May/2/download-esm/\">download-esm</a> which will\ndownload an ES module and convert the imports to point at JS files so you\ndon&rsquo;t need an importmap</li>\n<li><a href=\"esm.sh\">https://esm.sh/</a> and <a href=\"https://www.skypack.dev/\">skypack.dev</a></li>\n<li><a href=\"https://esbuild.github.io/\">esbuild</a></li>\n<li><a href=\"https://jspm.org/getting-started\">JSPM</a> can generate importmaps</li>\n</ul>\n<p>Writing this post has made me think that even though I usually don&rsquo;t want to\nhave a build that I run every time I update the project, I might be willing to\nhave a build step (using <code>download-esm</code> or something) that I run <strong>only once</strong>\nwhen setting up the project and never run again except maybe if I&rsquo;m updating my\ndependency versions.</p>\n<h3 id=\"that-s-all\">that&rsquo;s all!</h3>\n<p>Thanks to <a href=\"https://polotek.net/\">Marco Rogers</a> who taught me a lot of the things\nin this post. I&rsquo;ve probably made some mistakes in this post and I&rsquo;d love to\nknow what they are &ndash; let me know on Bluesky or Mastodon!</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Why pipes sometimes get \"stuck\": buffering","url":"https://jvns.ca/blog/2024/11/29/why-pipes-get-stuck-buffering/","date":1732868611,"author":"Julia Evans","unread":true,"desc":"","content":"<p>Here&rsquo;s a niche terminal problem that has bothered me for years but that I never\nreally understood until a few weeks ago. Let&rsquo;s say you&rsquo;re running this command\nto watch for some specific output in a log file:</p>\n<pre><code>tail -f /some/log/file | grep thing1 | grep thing2\n</code></pre>\n<p>If log lines are being added to the file relatively slowly, the result I&rsquo;d see\nis&hellip; nothing! It doesn&rsquo;t matter if there were matches in the log file or not,\nthere just wouldn&rsquo;t be any output.</p>\n<p>I internalized this as &ldquo;uh, I guess pipes just get stuck sometimes and don&rsquo;t\nshow me the output, that&rsquo;s weird&rdquo;, and I&rsquo;d handle it by just\nrunning <code>grep thing1 /some/log/file | grep thing2</code> instead, which would work.</p>\n<p>So as I&rsquo;ve been doing a terminal deep dive over the last few months I was\nreally excited to finally learn exactly why this happens.</p>\n<h3 id=\"why-this-happens-buffering\">why this happens: buffering</h3>\n<p>The reason why &ldquo;pipes get stuck&rdquo; sometimes is that it&rsquo;s VERY common for\nprograms to buffer their output before writing it to a pipe or file. So the\npipe is working fine, the problem is that the program never even wrote the data\nto the pipe!</p>\n<p>This is for performance reasons: writing all output immediately as soon as you\ncan uses more system calls, so it&rsquo;s more efficient to save up data until you\nhave 8KB or so of data to write (or until the program exits) and THEN write it\nto the pipe.</p>\n<p>In this example:</p>\n<pre><code>tail -f /some/log/file | grep thing1 | grep thing2\n</code></pre>\n<p>the problem is that <code>grep thing1</code> is saving up all of its matches until it has\n8KB of data to write, which might literally never happen.</p>\n<h3 id=\"programs-don-t-buffer-when-writing-to-a-terminal\">programs don&rsquo;t buffer when writing to a terminal</h3>\n<p>Part of why I found this so disorienting is that <code>tail -f file | grep thing</code>\nwill work totally fine, but then when you add the second <code>grep</code>, it stops\nworking!! The reason for this is that the way <code>grep</code> handles buffering depends\non whether it&rsquo;s writing to a terminal or not.</p>\n<p>Here&rsquo;s how <code>grep</code> (and many other programs) decides to buffer its output:</p>\n<ul>\n<li>Check if stdout is a terminal or not using the <code>isatty</code> function\n<ul>\n<li>If it&rsquo;s a terminal, use line buffering (print every line immediately as soon as you have it)</li>\n<li>Otherwise, use &ldquo;block buffering&rdquo; &ndash; only print data if you have at least 8KB or so of data to print</li>\n</ul>\n</li>\n</ul>\n<p>So if <code>grep</code> is writing directly to your terminal then you&rsquo;ll see the line as\nsoon as it&rsquo;s printed, but if it&rsquo;s writing to a pipe, you won&rsquo;t.</p>\n<p>Of course the buffer size isn&rsquo;t always 8KB for every program, it depends on the implementation. For <code>grep</code> the buffering is handled by libc, and libc&rsquo;s buffer size is\ndefined in the <code>BUFSIZ</code> variable. <a href=\"https://github.com/bminor/glibc/blob/c69e8cccaff8f2d89cee43202623b33e6ef5d24a/libio/stdio.h#L100\">Here&rsquo;s where that&rsquo;s defined in glibc</a>.</p>\n<p>(as an aside: &ldquo;programs do not use 8KB output buffers when writing to a\nterminal&rdquo; isn&rsquo;t, like, a law of terminal physics, a program COULD use an 8KB\nbuffer when writing output to a terminal if it wanted, it would just be\nextremely weird if it did that, I can&rsquo;t think of any program that behaves that\nway)</p>\n<h3 id=\"commands-that-buffer-commands-that-don-t\">commands that buffer &amp; commands that don&rsquo;t</h3>\n<p>One annoying thing about this buffering behaviour is that you kind of need to\nremember which commands buffer their output when writing to a pipe.</p>\n<p>Some commands that <strong>don&rsquo;t</strong> buffer their output:</p>\n<ul>\n<li>tail</li>\n<li>cat</li>\n<li>tee</li>\n</ul>\n<p>I think almost everything else will buffer output, especially if it&rsquo;s a command\nwhere you&rsquo;re likely to be using it for batch processing. Here&rsquo;s a list of some\ncommon commands that buffer their output when writing to a pipe, along with the\nflag that disables block buffering.</p>\n<ul>\n<li>grep (<code>--line-buffered</code>)</li>\n<li>sed (<code>-u</code>)</li>\n<li>awk (there&rsquo;s a <code>fflush()</code> function)</li>\n<li>tcpdump (<code>-l</code>)</li>\n<li>jq (<code>-u</code>)</li>\n<li>tr (<code>-u</code>)</li>\n<li>cut (can&rsquo;t disable buffering)</li>\n</ul>\n<p>Those are all the ones I can think of, lots of unix commands (like <code>sort</code>) may\nor may not buffer their output but it doesn&rsquo;t matter because <code>sort</code> can&rsquo;t do\nanything until it finishes receiving input anyway.</p>\n<p>Also I did my best to test both the Mac OS and GNU versions of these but there\nare a lot of variations and I might have made some mistakes.</p>\n<h3 id=\"programming-languages-where-the-default-print-statement-buffers\">programming languages where the default &ldquo;print&rdquo; statement buffers</h3>\n<p>Also, here are a few programming language where the default print statement\nwill buffer output when writing to a pipe, and some ways to disable buffering\nif you want:</p>\n<ul>\n<li>C (disable with <code>setvbuf</code>)</li>\n<li>Python (disable with <code>python -u</code>, or <code>PYTHONUNBUFFERED=1</code>, or <code>sys.stdout.reconfigure(line_buffering=False)</code>, or <code>print(x, flush=True)</code>)</li>\n<li>Ruby (disable with <code>STDOUT.sync = true</code>)</li>\n<li>Perl (disable with <code>$| = 1</code>)</li>\n</ul>\n<p>I assume that these languages are designed this way so that the default print\nfunction will be fast when you&rsquo;re doing batch processing.</p>\n<p>Also whether output is buffered or not might depend on how you print, for\nexample in C++ <code>cout &lt;&lt; &quot;hello\\n&quot;</code> buffers when writing to a pipe but <code>cout &lt;&lt; &quot;hello&quot; &lt;&lt; endl</code> will flush its output.</p>\n<h3 id=\"when-you-press-ctrl-c-on-a-pipe-the-contents-of-the-buffer-are-lost\">when you press <code>Ctrl-C</code> on a pipe, the contents of the buffer are lost</h3>\n<p>Let&rsquo;s say you&rsquo;re running this command as a hacky way to watch for DNS requests\nto <code>example.com</code>, and you forgot to pass <code>-l</code> to tcpdump:</p>\n<pre><code>sudo tcpdump -ni any port 53 | grep example.com\n</code></pre>\n<p>When you press <code>Ctrl-C</code>, what happens? In a magical perfect world, what I would\n<em>want</em> to happen is for <code>tcpdump</code> to flush its buffer, <code>grep</code> would search for\n<code>example.com</code>, and I would see all the output I missed.</p>\n<p>But in the real world, what happens is that all the programs get killed and the\noutput in <code>tcpdump</code>&rsquo;s buffer is lost.</p>\n<p>I think this problem is probably unavoidable &ndash; I spent a little time with\n<code>strace</code> to see how this works and <code>grep</code> receives the <code>SIGINT</code> before\n<code>tcpdump</code> anyway so even if <code>tcpdump</code> tried to flush its buffer <code>grep</code> would\nalready be dead.</p>\n<small>\n<p>After a little more investigation, there is a workaround: if you find\n<code>tcpdump</code>&rsquo;s PID and <code>kill -TERM $PID</code>, then tcpdump will flush the buffer so\nyou can see the output. That&rsquo;s kind of a pain but I tested it and it seems to\nwork.</p>\n</small>\n<h3 id=\"redirecting-to-a-file-also-buffers\">redirecting to a file also buffers</h3>\n<p>It&rsquo;s not just pipes, this will also buffer:</p>\n<pre><code>sudo tcpdump -ni any port 53 &gt; output.txt\n</code></pre>\n<p>Redirecting to a file doesn&rsquo;t have the same &ldquo;<code>Ctrl-C</code> will totally destroy the\ncontents of the buffer&rdquo; problem though &ndash; in my experience it usually behaves\nmore like you&rsquo;d want, where the contents of the buffer get written to the file\nbefore the program exits. I&rsquo;m not 100% sure whether this is something you can\nalways rely on or not.</p>\n<h3 id=\"a-bunch-of-potential-ways-to-avoid-buffering\">a bunch of potential ways to avoid buffering</h3>\n<p>Okay, let&rsquo;s talk solutions. Let&rsquo;s say you&rsquo;ve run this command or s</p>\n<pre><code>tail -f /some/log/file | grep thing1 | grep thing2\n</code></pre>\n<p>I asked people on Mastodon how they would solve this in practice and there were\n5 basic approaches. Here they are:</p>\n<h4 id=\"solution-1-run-a-program-that-finishes-quickly\">solution 1: run a program that finishes quickly</h4>\n<p>Historically my solution to this has been to just avoid the &ldquo;command writing to\npipe slowly&rdquo; situation completely and instead run a program that will finish quickly\nlike this:</p>\n<pre><code>cat /some/log/file | grep thing1 | grep thing2 | tail\n</code></pre>\n<p>This doesn&rsquo;t do the same thing as the original command but it does mean that\nyou get to avoid thinking about these weird buffering issues.</p>\n<p>(you could also do <code>grep thing1 /some/log/file</code> but I often prefer to use an\n&ldquo;unnecessary&rdquo; <code>cat</code>)</p>\n<h4 id=\"solution-2-remember-the-line-buffer-flag-to-grep\">solution 2: remember the &ldquo;line buffer&rdquo; flag to grep</h4>\n<p>You could remember that grep has a flag to avoid buffering and pass it like this:</p>\n<pre><code>tail -f /some/log/file | grep --line-buffered thing1 | grep thing2\n</code></pre>\n<h4 id=\"solution-3-use-awk\">solution 3: use awk</h4>\n<p>Some people said that if they&rsquo;re specifically dealing with a multiple greps\nsituation, they&rsquo;ll rewrite it to use a single <code>awk</code> instead, like this:</p>\n<pre><code>tail -f /some/log/file |  awk '/thing1/ &amp;&amp; /thing2/'\n</code></pre>\n<p>Or you would write a more complicated <code>grep</code>, like this:</p>\n<pre><code>tail -f /some/log/file |  grep -E 'thing1.*thing2'\n</code></pre>\n<p>(<code>awk</code> also buffers, so for this to work you&rsquo;ll want <code>awk</code> to be the last command in the pipeline)</p>\n<h4 id=\"solution-4-use-stdbuf\">solution 4: use <code>stdbuf</code></h4>\n<p><code>stdbuf</code> uses LD_PRELOAD to turn off libc&rsquo;s buffering, and you can use it to turn off output buffering like this:</p>\n<pre><code>tail -f /some/log/file | stdbuf -o0 grep thing1 | grep thing2\n</code></pre>\n<p>Like any <code>LD_PRELOAD</code> solution it&rsquo;s a bit unreliable &ndash; it doesn&rsquo;t work on\nstatic binaries, I think won&rsquo;t work if the program isn&rsquo;t using libc&rsquo;s\nbuffering, and doesn&rsquo;t always work on Mac OS. Harry Marr has a really nice <a href=\"https://hmarr.com/blog/how-stdbuf-works/\">How stdbuf works</a> post.</p>\n<h4 id=\"solution-5-use-unbuffer\">solution 5: use <code>unbuffer</code></h4>\n<p><code>unbuffer program</code> will force the program&rsquo;s output to be a TTY, which means\nthat it&rsquo;ll behave the way it normally would on a TTY (less buffering, colour\noutput, etc). You could use it in this example like this:</p>\n<pre><code>tail -f /some/log/file | unbuffer grep thing1 | grep thing2\n</code></pre>\n<p>Unlike <code>stdbuf</code> it will always work, though it might have unwanted side\neffects, for example <code>grep thing1</code>&rsquo;s will also colour matches.</p>\n<p>If you want to install unbuffer, it&rsquo;s in the <code>expect</code> package.</p>\n<h3 id=\"that-s-all-the-solutions-i-know-about\">that&rsquo;s all the solutions I know about!</h3>\n<p>It&rsquo;s a bit hard for me to say which one is &ldquo;best&rdquo;, I think personally I&rsquo;m\nmostly likely to use <code>unbuffer</code> because I know it&rsquo;s always going to work.</p>\n<p>If I learn about more solutions I&rsquo;ll try to add them to this post.</p>\n<h3 id=\"i-m-not-really-sure-how-often-this-comes-up\">I&rsquo;m not really sure how often this comes up</h3>\n<p>I think it&rsquo;s not very common for me to have a program that slowly trickles data\ninto a pipe like this, normally if I&rsquo;m using a pipe a bunch of data gets\nwritten very quickly, processed by everything in the pipeline, and then\neverything exits. The only examples I can come up with right now are:</p>\n<ul>\n<li>tcpdump</li>\n<li><code>tail -f</code></li>\n<li>watching log files in a different way like with <code>kubectl logs</code></li>\n<li>the output of a slow computation</li>\n</ul>\n<h3 id=\"what-if-there-were-an-environment-variable-to-disable-buffering\">what if there were an environment variable to disable buffering?</h3>\n<p>I think it would be cool if there were a standard environment variable to turn\noff buffering, like <code>PYTHONUNBUFFERED</code> in Python. I got this idea from a\n<a href=\"https://blog.plover.com/Unix/stdio-buffering.html\">couple</a> of <a href=\"https://blog.plover.com/Unix/stdio-buffering-2.html\">blog posts</a> by Mark Dominus\nin 2018. Maybe <code>NO_BUFFER</code> like <a href=\"https://no-color.org/\">NO_COLOR</a>?</p>\n<p>The design seems tricky to get right; Mark points out that NETBSD has <a href=\"https://man.netbsd.org/setbuf.3\">environment variables called <code>STDBUF</code>, <code>STDBUF1</code>, etc</a> which gives you a\nton of control over buffering but I imagine most developers don&rsquo;t want to\nimplement many different environment variables to handle a relatively minor\nedge case.</p>\n<p>I&rsquo;m also curious about whether there are any programs that just automatically\nflush their output buffers after some period of time (like 1 second). It feels\nlike it would be nice in theory but I can&rsquo;t think of any program that does that\nso I imagine there are some downsides.</p>\n<h3 id=\"stuff-i-left-out\">stuff I left out</h3>\n<p>Some things I didn&rsquo;t talk about in this post since these posts have been\ngetting pretty long recently and seriously does anyone REALLY want to read 3000\nwords about buffering?</p>\n<ul>\n<li>the difference between line buffering and having totally unbuffered output</li>\n<li>how buffering to stderr is different from buffering to stdout</li>\n<li>this post is only about buffering that happens <strong>inside the program</strong>, your\noperating system&rsquo;s TTY driver also does a little bit of buffering sometimes</li>\n<li>other reasons you might need to flush your output other than &ldquo;you&rsquo;re writing\nto a pipe&rdquo;</li>\n</ul>\n","flags":null,"enclosureUrl":"","enclosureMime":""}]}