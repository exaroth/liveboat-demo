{"id":"KZgg6v3y1EHngSu15w9ddbD2SchD7Q","title":"Dev News - Last 2 days","displayTitle":"Dev News - Last 2 days","url":"","feedLink":"","items":[{"title":"Suite smells: undertesting and overtesting","url":"https://bitfieldconsulting.com/posts/undertesting-overtesting","date":1733653380,"author":"John Arundel","unread":true,"desc":"","content":"<figure class=\"\n              sqs-block-image-figure\n              intrinsic\n            \"\n        >\n          \n        \n        \n\n        \n          \n            \n          \n            \n                \n                \n                \n                \n                \n                \n                \n                <img data-stretch=\"false\" data-image=\"https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png\" data-image-dimensions=\"350x350\" data-image-focal-point=\"0.5,0.5\" alt=\"\" data-load=\"false\" elementtiming=\"system-image-block\" src=\"https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=1000w\" width=\"350\" height=\"350\" sizes=\"(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw\" onload=\"this.classList.add(&quot;loaded&quot;)\" srcset=\"https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/e123ae8e-7a4d-469b-b5ca-c2f8f14a0ced/bug.png?format=2500w 2500w\" loading=\"lazy\" decoding=\"async\" data-loader=\"sqs\">\n\n            \n          \n        \n          \n        \n\n        \n      \n        </figure>\n      \n\n    \n  \n\n\n  \n\n\n\n\n\n  <p class=\"\"><em>From </em><a href=\"https://bitfieldconsulting.com/books/tests\"><em>The Power of Go: Tests</em></a></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n\n\n\n<blockquote>\n<p><em>It is tempting to test that the code does what it should do and\nleave it at that, but it’s arguably even more important to test that it\ndoesn’t do what it shouldn’t do.</em><br />\n—Mike Bland, <a href=\"https://martinfowler.com/articles/testing-culture.html\">“Goto\nFail, Heartbleed, and Unit Testing Culture”</a></p>\n</blockquote>\n<p><a href=\"https://bitfieldconsulting.com/books/tests\">The Power of Go: Tests</a> is a compilation of\nall the lessons I’ve learned over a lifetime of software engineering:\nit’s about how to write robust, reliable, and above all <em>correct</em>\nprograms.</p>\n<p>This is the second in a three-part series of excerpts from the book,\nfocusing on test suites in Go, what kind of problems you might find with\nthem, and some tips on how to fix them.</p>\n<ol type=\"1\">\n<li><a href=\"https://bitfieldconsulting.com/posts/testing-legacy-code\">Testing legacy code</a></li>\n<li><strong>Undertesting and overtesting</strong></li>\n<li>Slow, flaky, and failing (<em>coming soon</em>)</li>\n</ol>\n<hr />\n<p>In the <a href=\"https://bitfieldconsulting.com/posts/testing-legacy-code\">first post</a>, we talked\nabout what to do if your codebase has no tests at all, or not enough\ntests. Today, let’s look at the tests you have, and what might be wrong\nwith them.</p>\n<p>Even when a certain piece of code is nominally <em>covered</em> by\nsome test, is it really tested? That’s not always a given. In other\nwords, just because a test causes some function to be executed, that\ndoesn’t mean it shows that the function <em>does</em> the right thing.\nFor that we need to look more closely at the test. Is it too\noptimistic?</p>\n<h2 id=\"optimistic-tests\">Optimistic tests</h2>\n<p>An optimistic test is designed only to confirm that the system works,\nnot to prove that it doesn’t.</p>\n<p>Surprisingly, one problem that optimistic tests can miss is when the\nsystem does <em>nothing at all</em>.</p>\n<p>For example, consider a test for some function\n<code>user.Create</code>, like this:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestCreateCreatesGivenUser<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Create<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice not created&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/user/5/user_test.go\">Listing\n<code>user/5</code></a>)</p>\n<p>At first glance, this is plausible. We create a test user, Alice, and\ncheck if she subsequently exists. If not, the test fails. That part is\nfine. So, can you see what’s missing? If not, you might like to take a\nminute to think about it before reading on.</p>\n<p>It’s always worth asking of any test whether it rigorously checks its\n<em>preconditions</em> as well as its postconditions. The developer’s\nfocus, naturally enough, tends to be on the state of the world\n<em>after</em> the operation under test, but that can result in some\nrisky assumptions about its <em>prior</em> state.</p>\n<p>Suppose <code>Create</code> actually does nothing. How could this\ntest pass? Only when Alice already exists. And would we know if that was\nthe case?</p>\n<p>Our test checks that Alice exists <em>after</em> calling\n<code>Create</code>, but what’s missing is a check that she doesn’t\nexist <em>beforehand</em>.</p>\n<p>In other words, suppose we don’t clean up the database after each\ntest run, so if Alice was <em>ever</em> created, she’ll still be there.\nAnd suppose someone later introduces a bug into <code>Create</code> that\nprevents it from actually creating users.</p>\n<p>To put it another way, here’s an obviously incorrect implementation\nthat nevertheless passes this test:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">type</span> User <span class=\"kw\">struct</span> <span class=\"op\">{</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Name <span class=\"dt\">string</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">var</span> <span class=\"op\">(</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    m     <span class=\"op\">=</span> <span class=\"bu\">new</span><span class=\"op\">(</span>sync<span class=\"op\">.</span>Mutex<span class=\"op\">)</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    users <span class=\"op\">=</span> <span class=\"kw\">map</span><span class=\"op\">[</span><span class=\"dt\">string</span><span class=\"op\">]*</span>User<span class=\"op\">{</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">:</span> <span class=\"op\">{</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>            Name<span class=\"op\">:</span> <span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">,</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"op\">},</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">)</span></span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> Create<span class=\"op\">(</span>name <span class=\"dt\">string</span><span class=\"op\">)</span> <span class=\"op\">{}</span></span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> Exists<span class=\"op\">(</span>name <span class=\"dt\">string</span><span class=\"op\">)</span> <span class=\"dt\">bool</span> <span class=\"op\">{</span></span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    m<span class=\"op\">.</span>Lock<span class=\"op\">()</span></span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">defer</span> m<span class=\"op\">.</span>Unlock<span class=\"op\">()</span></span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    _<span class=\"op\">,</span> ok <span class=\"op\">:=</span> users<span class=\"op\">[</span>name<span class=\"op\">]</span></span>\n<span id=\"cb2-20\"><a href=\"#cb2-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> ok</span>\n<span id=\"cb2-21\"><a href=\"#cb2-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/user/5/user.go\">Listing\n<code>user/5</code></a>)</p>\n<p>We thought we were testing <code>Create</code>, but we really aren’t,\nbecause <code>Create</code> does nothing at all, yet the test doesn’t\ndetect that. Alice <em>always</em> exists, so the test always passes.\nThis kind of <em>mirage test</em> is especially dangerous, because it\nlooks like you have a test, but you don’t.</p>\n<p>It turns out that <code>Create</code> needs not just to leave the\nworld in a state where Alice exists. What’s important about\n<code>Create</code> is that it <em>changes</em> the world from a state\nwhere Alice doesn’t exist to one where she does.</p>\n<p>You might think that goes without saying, but we’ve just proved that\nit doesn’t. We need to pay attention to preconditions as well as\npostconditions, according to the contract that the system under test is\nsupposed to fulfil.</p>\n<p>Let’s write a test that <em>would</em> catch this bug, then:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestCreateCreatesGivenUser<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Fatal<span class=\"op\">(</span><span class=\"st\">&quot;Alice unexpectedly exists&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Create<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice not created&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/user/6/user_test.go\">Listing\n<code>user/6</code></a>)</p>\n<p>The difference is very simple, but important: we check our\npreconditions.</p>\n<p>What about <em>this</em> test, then?</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestDeleteDeletesGivenUser<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Create<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Delete<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice still exists after delete&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>Again, this looks reasonable on a cursory inspection. It creates\nAlice, deletes her (sorry, Alice), and then ensures that she no longer\nexists. What could be wrong with <code>Delete</code> that this test\nwouldn’t catch?</p>\n<p>Well, what if <em>both</em> <code>Create</code> and\n<code>Delete</code> do nothing at all? That seems like a pretty major\nbug, yet this test doesn’t detect it. There are no preconditions, so the\noutcome of the test is the same whether <code>Create</code> and\n<code>Delete</code> actually have any effect or not. The test isn’t\nwrong, as far as it goes: it just doesn’t <em>go</em> far enough.\nThere’s a pretty big loophole in it.</p>\n<p>This kind of bug isn’t as unlikely as you might think, either. I’ve\nmade this exact mistake in the past: I stubbed out <code>Create</code>\nand <code>Delete</code> methods with placeholders, then forgot that I\nhadn’t finished them, because the test was passing. It’s easy to do.</p>\n<p>What we’re missing here, in fact, is another precondition: that the\nuser <em>does</em> exist before we try to delete them.</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestDeleteDeletesGivenUser<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Create<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice not created&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Delete<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb5-9\"><a href=\"#cb5-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice still exists after delete&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb5-10\"><a href=\"#cb5-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb5-11\"><a href=\"#cb5-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/user/6/user_test.go\">Listing\n<code>user/6</code></a>)</p>\n<p>If <code>Create</code> doesn’t do anything, this test will fail at\nthe first check. If <code>Delete</code> doesn’t do anything, it’ll fail\nat the second.</p>\n<p>In any non-trivial codebase, you’re pretty much guaranteed to find at\nleast a few tests that are optimistically feeble in this way. Look for\nany test that doesn’t properly establish its preconditions, and fix it.\nThis will add a lot of value to the test suite overall.</p>\n<p>Another example of this kind of problem is when the test fails to\ncheck some important but implicit <em>postconditions</em>. For example,\nin <code>TestDelete</code>, the explicit postcondition here is that\nAlice shouldn’t exist after deletion, so what are we implicitly missing?\nWhat else could a reasonable person ask for from a <code>Delete</code>\nfunction?</p>\n<p>As usual, a productive way to answer that is to think about possible\nbugs in <code>Delete</code>. Suppose, for example, that\n<code>Delete</code> mistakenly deletes not only Alice, but <em>all</em>\nusers in the database. That kind of thing is surprisingly easy to do,\nespecially with SQL queries (omitting a <code>WHERE</code> clause, for\nexample).</p>\n<p>If calling <code>Delete</code> on a single user instead nukes the\nwhole database, that’s a pretty major bug, wouldn’t you say? This test\ndoesn’t detect it, because it focuses only on what <em>should</em>\nhappen, and ignores what shouldn’t.</p>\n<p>How <em>could</em> we detect such a bug, then? Quite easily, it turns\nout.</p>\n<p>Here’s what we do. We create <em>two</em> users in the test, but\ndelete only one of them. Then we check that the one we deleted doesn’t\nexist, and the one we didn’t delete still exists:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestDeleteDeletesGivenUserOnly<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Create<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice not created&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Create<span class=\"op\">(</span><span class=\"st\">&quot;Bob&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Bob&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb6-9\"><a href=\"#cb6-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Bob not created&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb6-10\"><a href=\"#cb6-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb6-11\"><a href=\"#cb6-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Delete<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb6-12\"><a href=\"#cb6-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb6-13\"><a href=\"#cb6-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice still exists after delete&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb6-14\"><a href=\"#cb6-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb6-15\"><a href=\"#cb6-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Bob&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb6-16\"><a href=\"#cb6-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Bob was unexpectedly deleted&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb6-17\"><a href=\"#cb6-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb6-18\"><a href=\"#cb6-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>This test has accumulated a bit of paperwork, so let’s refactor that\nout into a helper function:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestDeleteDeletesGivenUserOnly<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    createUserOrFail<span class=\"op\">(</span>t<span class=\"op\">,</span> <span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    createUserOrFail<span class=\"op\">(</span>t<span class=\"op\">,</span> <span class=\"st\">&quot;Bob&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Delete<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Alice&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Alice still exists after delete&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span><span class=\"st\">&quot;Bob&quot;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb7-10\"><a href=\"#cb7-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;Bob was unexpectedly deleted&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb7-11\"><a href=\"#cb7-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb7-12\"><a href=\"#cb7-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span>\n<span id=\"cb7-13\"><a href=\"#cb7-13\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb7-14\"><a href=\"#cb7-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> createUserOrFail<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">,</span> name <span class=\"dt\">string</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb7-15\"><a href=\"#cb7-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Helper<span class=\"op\">()</span></span>\n<span id=\"cb7-16\"><a href=\"#cb7-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    user<span class=\"op\">.</span>Create<span class=\"op\">(</span>name<span class=\"op\">)</span></span>\n<span id=\"cb7-17\"><a href=\"#cb7-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">!</span>user<span class=\"op\">.</span>Exists<span class=\"op\">(</span>name<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb7-18\"><a href=\"#cb7-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Errorf<span class=\"op\">(</span><span class=\"st\">&quot;%s not created&quot;</span><span class=\"op\">,</span> name<span class=\"op\">)</span></span>\n<span id=\"cb7-19\"><a href=\"#cb7-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb7-20\"><a href=\"#cb7-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/user/7/user_test.go\">Listing\n<code>user/7</code></a>)</p>\n<p>Who would have thought that there were so much scope for things to go\nwrong with a seemingly simple <code>Delete</code> function? Well,\n<em>you</em> would, or at least you will now.</p>\n<p>If you find yourself, as a result, becoming thoroughly sceptical\nabout the idea that <em>anything</em> works the way it’s supposed to,\ncongratulations: you’re thinking like a tester.</p>\n<h2 id=\"persnickety-tests\">Persnickety tests</h2>\n<p>Sometimes, though not often, people can take testing a bit\n<em>too</em> much to heart, and test more than strictly necessary. As\nwe’ve seen, it’s much easier to err the other way, and leave out\nimportant things such as preconditions and implicit postconditions, like\nnot deleting all the users in the database. But overtesting does afflict\nsome test suites.</p>\n<p>It’s important to keep tests focused on only the part of the system\nthey’re supposed to care about, and on only the <em>behaviour</em> that\nmatters. They should avoid checking for irrelevant things.</p>\n<p>Beware also of simply comparing too much. Sometimes it can be\nconvenient to compare a function’s <em>entire</em> result against an\nexpected value, rather than individually checking each of its fields,\nbut it’s not always a good idea.</p>\n<p>Comparing the whole struct makes sense when all the fields are\naffected by the behaviour under test. But when only some fields are\nimportant to <em>this</em> test, checking irrelevant fields makes the\ntest brittle, and obscures its real purpose. The same applies to\nchecking entire strings or output files, when only certain parts of the\ndata are actually important.</p>\n<blockquote>\n<p><em>The easiest way to avoid brittle tests is to check only the\nproperties you care about. Be selective in your assertions. Don’t check\nfor exact string matches, for example, but look for relevant substrings\nthat will remain unchanged as the program evolves.</em><br />\n—Alan Donovan &amp; Brian Kernighan, <a href=\"https://amzn.to/3ObBI2O\">“The Go Programming Language”</a></p>\n</blockquote>\n<p>Watch out for tests that lazily compare output against a golden file,\nfor example, when the behaviour they’re testing is only about a small\nsubset of that file. Similarly, <a href=\"https://bitfieldconsulting.com/posts/comparing-errors\">a test\nshould not assert the exact value of an error</a>, but only that there\n<em>is</em> some error, when there’s supposed to be.</p>\n<p>Some exposure to the idea of <em>property-based</em> testing, as\ncommonly used in <a href=\"https://bitfieldconsulting.com/posts/fuzz-tests\">fuzz testing</a>, can also\nbe helpful for constructing robust tests. For example, what’s important\nabout a result is often not its <em>exact</em> value, but some\n<em>property</em> of the value, especially an invariant property.</p>\n<p>I recently reviewed a program that needed to create a “fingerprint”\nof a piece of data, for deduplication purposes. In case the same data\nwas submitted to the system later, the fingerprint would enable the\nsystem to recognise it without actually having to store all the data,\nwhich could be very large.</p>\n<p>A cryptographic digest, or hash value, is an obvious way to do this,\nso the program had a test something like this:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb8-1\"><a href=\"#cb8-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestHashReturnsMD5HashOfGivenData<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    data <span class=\"op\">:=</span> <span class=\"op\">[]</span><span class=\"dt\">byte</span><span class=\"op\">(</span><span class=\"st\">&quot;These pretzels are making me thirsty.&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    want <span class=\"op\">:=</span> md5<span class=\"op\">.</span>Sum<span class=\"op\">(</span>data<span class=\"op\">)</span></span>\n<span id=\"cb8-5\"><a href=\"#cb8-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    got <span class=\"op\">:=</span> fingerprint<span class=\"op\">.</span>Hash<span class=\"op\">(</span>data<span class=\"op\">)</span></span>\n<span id=\"cb8-6\"><a href=\"#cb8-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> want <span class=\"op\">!=</span> got <span class=\"op\">{</span></span>\n<span id=\"cb8-7\"><a href=\"#cb8-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Errorf<span class=\"op\">(</span><span class=\"st\">&quot;want %v, got %v&quot;</span><span class=\"op\">,</span> want<span class=\"op\">,</span> got<span class=\"op\">)</span></span>\n<span id=\"cb8-8\"><a href=\"#cb8-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb8-9\"><a href=\"#cb8-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/fingerprint/1/fingerprint_test.go\">Listing\n<code>fingerprint/1</code></a>)</p>\n<p>The implementation of <code>Hash</code> doesn’t matter, but let’s\nassume it’s something like this:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> Hash<span class=\"op\">(</span>data <span class=\"op\">[]</span><span class=\"dt\">byte</span><span class=\"op\">)</span> <span class=\"op\">[</span>md5<span class=\"op\">.</span>Size<span class=\"op\">]</span><span class=\"dt\">byte</span> <span class=\"op\">{</span></span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> md5<span class=\"op\">.</span>Sum<span class=\"op\">(</span>data<span class=\"op\">)</span></span>\n<span id=\"cb9-3\"><a href=\"#cb9-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/fingerprint/1/fingerprint.go\">Listing\n<code>fingerprint/1</code></a>)</p>\n<p>Fine. But <a href=\"https://en.wikipedia.org/wiki/MD5#Security\">MD5 is\ninsecure</a>, so I suggested using a SHA-256 hash instead:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb10-1\"><a href=\"#cb10-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> Hash<span class=\"op\">(</span>data <span class=\"op\">[]</span><span class=\"dt\">byte</span><span class=\"op\">)</span> <span class=\"op\">[</span>sha256<span class=\"op\">.</span>Size<span class=\"op\">]</span><span class=\"dt\">byte</span> <span class=\"op\">{</span></span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> sha256<span class=\"op\">.</span>Sum256<span class=\"op\">(</span>data<span class=\"op\">)</span></span>\n<span id=\"cb10-3\"><a href=\"#cb10-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/fingerprint/2/fingerprint.go\">Listing\n<code>fingerprint/2</code></a>)</p>\n<p>This broke the test, which makes no sense, because <code>Hash</code>\n<em>works</em>. So what’s the problem?</p>\n<p>Well, what are we really testing here? Not that <code>Hash</code>\nproduces an <em>MD5</em> hash, specifically; that’s incidental. What\nmatters is that the same data should always hash to the same value,\nwhatever that value actually is. And, no less importantly, that\n<em>different</em> data should hash to different values.</p>\n<p>So we ended up with a test something like this instead:</p>\n<pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> TestHashGivesSameUniqueHashForSameData<span class=\"op\">(</span>t <span class=\"op\">*</span>testing<span class=\"op\">.</span>T<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    t<span class=\"op\">.</span>Parallel<span class=\"op\">()</span></span>\n<span id=\"cb11-3\"><a href=\"#cb11-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    data <span class=\"op\">:=</span> <span class=\"op\">[]</span><span class=\"dt\">byte</span><span class=\"op\">(</span><span class=\"st\">&quot;These pretzels are making me thirsty.&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb11-4\"><a href=\"#cb11-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    orig <span class=\"op\">:=</span> fingerprint<span class=\"op\">.</span>Hash<span class=\"op\">(</span>data<span class=\"op\">)</span></span>\n<span id=\"cb11-5\"><a href=\"#cb11-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    same <span class=\"op\">:=</span> fingerprint<span class=\"op\">.</span>Hash<span class=\"op\">(</span>data<span class=\"op\">)</span></span>\n<span id=\"cb11-6\"><a href=\"#cb11-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    different <span class=\"op\">:=</span> fingerprint<span class=\"op\">.</span>Hash<span class=\"op\">([]</span><span class=\"dt\">byte</span><span class=\"op\">(</span><span class=\"st\">&quot;Hello, Newman&quot;</span><span class=\"op\">))</span></span>\n<span id=\"cb11-7\"><a href=\"#cb11-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> orig <span class=\"op\">!=</span> same <span class=\"op\">{</span></span>\n<span id=\"cb11-8\"><a href=\"#cb11-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;same data produced different hash&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb11-9\"><a href=\"#cb11-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb11-10\"><a href=\"#cb11-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> orig <span class=\"op\">==</span> different <span class=\"op\">{</span></span>\n<span id=\"cb11-11\"><a href=\"#cb11-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t<span class=\"op\">.</span>Error<span class=\"op\">(</span><span class=\"st\">&quot;different data produced same hash&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb11-12\"><a href=\"#cb11-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb11-13\"><a href=\"#cb11-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre>\n<p>(<a href=\"https://github.com/bitfield/tpg-tests/blob/main/fingerprint/2/fingerprint_test.go\">Listing\n<code>fingerprint/2</code></a>)</p>\n<p>This test is better, because it doesn’t care about the implementation\ndetails of <code>Hash</code>, such as which algorithm is used. What it\ncares about is that the same input to <code>Hash</code> always gives the\nsame result, so it catches bugs like an unstable hash algorithm or even\na random result.</p>\n<p>And, because a maliciously lazy implementation of <code>Hash</code>\nmight simply <em>always</em> return the same fixed value, the test also\nrequires that different data hashes to different values.</p>\n<p>This isn’t completely bug-proof, of course. It’s possible, for\nexample, that <code>Hash</code> always produces the same value unless\nthe input is exactly “Hello, Newman”. We could use fuzz testing to\ntackle this, or just a table test with a bunch of different inputs.</p>\n<p>But you get the point. We made the test both less brittle and less\nfeeble without adding much extra code; all it took was a little extra\n<em>thinking</em>.</p>\n<p>In the next and final post in this series, we’ll look at speed and\nreliability of tests. If the test suite as a whole is too slow, it\nsimply won’t be run, so it’s no use. On the other hand, if the tests are\nunreliable, and often fail even when the code is correct, they’re also\nuseless in a different way. Let’s talk about how to fix that situation\nnext time.</p>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: Cut the crap – remove AI bullshit from websites","url":"https://cut-the-crab.streamlit.app/","date":1733655579,"author":"muc-martin","unread":true,"desc":"","content":"\n<p>I’ve spent a lot of time reading articles that promise a lot but never give me what I’m looking for. They’re full of clickbait titles, scary claims, and pointless filler. It’s frustrating, and it’s a waste of my time.<p>So I made a tool. You give it a URL, and it tries to cut through all that noise. It gives you a shorter version of the content without all the nonsense. I built this because I’m tired of falling for the same tricks. I just want the facts, not a bunch of filler.<p>What do you think? I’m also thinking of making a Chrome extension that does something similar—like a reader mode, but one that actually removes the crap that gets in the way of real information. Feedback welcome.</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42356443\">https://news.ycombinator.com/item?id=42356443</a></p>\n<p>Points: 350</p>\n<p># Comments: 196</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"The 2024 'Advent Calendars' Offering Programming Language Tips, Space Photos, and Memories","url":"https://entertainment.slashdot.org/story/24/12/04/0143242/the-2024-advent-calendars-offering-programming-language-tips-space-photos-and-memories?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1733672040,"author":"EditorDavid","unread":true,"desc":"","content":"Not every tech \"advent calendar\" involves programming puzzles. Instead the geek tradition of programming-language advent calendars \"seems to have started way back in 2000,\" according to one history, \"when London-based programmer Mark Fowler launched a calendar highlighting a different Perl module each day.\" \nSo the tradition continues...\n\nNearly a quarter of a century later, there's still a Perl Advent Calendar, celebrating tips and tricks like \"a few special packages waiting under the tree that can give your web applications a little extra pep in their step.\"\nAnd of course there's a separate advent calendar for Raku programmers.\nSince 2009 web performance consultant (and former Yahoo and Facebook engineer) Stoyan Stefanov has been pulling together an annual Web Performance calendar with helpful blog posts. \nThere's also a JVM Advent calendar with daily helpful hints for Java programmers.\nAnother advent calendar promises daily posts about C#.\nThe HTMHell site &mdash; which bills itself as \"a collection of bad practices in HTML, copied from real websites\" &mdash; is celebrating the season with the \"HTMHell Advent Calendar,\" promising daily articles on security, accessibility, UX, and performance.\nThere's even an advent calendar with tips for the reverse-engineering framework Radar.\nThere's still a lovely web-design themed calendar at Designcember.com.\n\n\nAnd meanwhile developers at the Svelte frontend framework are actually promising to release something new each day, \"whether it's a new feature in Svelte or SvelteKit or an improvement to the website!\" \n\n\nBut not every tech advent calendar is about programming...\n\nAdafruit's managing director is publishing a Retrocomputing Advent Calendar &mdash; daily looks at the ghosts of computers past.\n\nThe Atlantic continues its 17-year tradition of a Space Telescope advent calendar, featuring daily images from both NASA's Hubble telescope and James Webb Space Telescope\nThe gaming blog Rock Paper Shotgun has been counting down their favorite games of 2024...\n<p><div class=\"share_submission\" style=\"position:relative;\">\n<a class=\"slashpop\" href=\"http://twitter.com/home?status=The+2024+'Advent+Calendars'+Offering+Programming+Language+Tips%2C+Space+Photos%2C+and+Memories%3A+https%3A%2F%2Fentertainment.slashdot.org%2Fstory%2F24%2F12%2F04%2F0143242%2F%3Futm_source%3Dtwitter%26utm_medium%3Dtwitter\"><img src=\"https://a.fsdn.com/sd/twitter_icon_large.png\"></a>\n<a class=\"slashpop\" href=\"http://www.facebook.com/sharer.php?u=https%3A%2F%2Fentertainment.slashdot.org%2Fstory%2F24%2F12%2F04%2F0143242%2Fthe-2024-advent-calendars-offering-programming-language-tips-space-photos-and-memories%3Futm_source%3Dslashdot%26utm_medium%3Dfacebook\"><img src=\"https://a.fsdn.com/sd/facebook_icon_large.png\"></a>\n\n\n\n</div></p><p><a href=\"https://entertainment.slashdot.org/story/24/12/04/0143242/the-2024-advent-calendars-offering-programming-language-tips-space-photos-and-memories?utm_source=rss1.0moreanon&amp;utm_medium=feed\">Read more of this story</a> at Slashdot.</p>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: Replace CAPTCHAs with WebAuthn passkeys for bot prevention","url":"https://github.com/singlr-ai/nocaptcha","date":1733682932,"author":"uday_singlr","unread":true,"desc":"","content":"\n<p>I built Nocaptcha after getting frustrated with traditional CAPTCHAs both as a user and developer. WebAuthn passkeys offered a promising alternative that's both more secure and user-friendly.<p>What makes Nocaptcha different:\n- Uses WebAuthn standard instead of puzzle-solving\n- No need for users to remember passwords or solve puzzles\n- Open source<p>Current limitation: \nWorking with W3C WebAuthn Community Group on true passkey disposal for this use case.<p>Looking for feedback particularly on:\n1. Integration experience\n2. User experience compared to traditional CAPTCHAs</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42359067\">https://news.ycombinator.com/item?id=42359067</a></p>\n<p>Points: 65</p>\n<p># Comments: 35</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: A portable hash map in C","url":"https://github.com/e-dant/salmagundi","date":1733688325,"author":"e-dant","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://github.com/e-dant/salmagundi\">https://github.com/e-dant/salmagundi</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42359949\">https://news.ycombinator.com/item?id=42359949</a></p>\n<p>Points: 169</p>\n<p># Comments: 89</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Thanks to AI, the Hottest New Programming Language is... English","url":"https://developers.slashdot.org/story/24/12/08/2154224/thanks-to-ai-the-hottest-new-programming-language-is-english?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1733695020,"author":"EditorDavid","unread":true,"desc":"","content":"\"Generative AI is transforming software development by enabling natural language prompts to generate code, reducing the need for traditional programming skills,\" argues Analytics India magazine.\n\n\nTraditionally, coding was the bastion of the select few who had mastered mighty languages like C++, Python, or Java. The idea of programming seemed exclusively reserved for those fluent in syntax and logic. However, the narrative is now being challenged by natural language coding being implemented in AI tools like GitHub Copilot. Andrej Karpathy, senior director of AI at Tesla predicted this trend last year.... English is emerging as the universal coding language. \n\nNVIDIA CEO Jensen Huang believes that English is becoming a new programming language thanks to AI advancements. Speaking at the World Government Summit, Huang explained, \"It is our job to create computing technology such that nobody has to program and that the programming language is human\"... He calls this a \"miracle of AI,\" emphasising how it closes the technology divide and empowers people from all fields to become effective technologists without traditional coding skills... \"In the future, you will tell the computer what you want, and it will do it,\"&#226; Huang commented. Large language models (LLMs) like OpenAI's GPT-4 and its successors have made this possible... \n\n\nMicrosoft CEO Satya Nadella has been equally vocal about the potential of English for coding. Microsoft's GitHub Copilot, an AI code assistant, enables developers to describe their needs in natural language and receive functional code in response. Nadella describes this as part of a broader mission to \"empower every person and every organisation on the planet to achieve more\".... In a discussion earlier last year, Stability AI CEO Emad Mostaque claimed, \"41% of codes on GitHub are AI-generated\"... \n\nIn 2024, the ability to program is no longer reserved for a few. It's a skill anyone can wield, thanks to the power of natural language processing and AI\n \n\"No longer is the power to create software restricted to those who can decipher programming languages,\" the article concludes. \"Anyone with a problem to solve and a clear enough articulation of that problem can now write software.\" \n\nAlthough the article also includes this consoling quote from Nvidia's Huang in March. \"There is an artistry to prompt engineering. It's how you fine-tune the instructions to get exactly what you want\"<p><div class=\"share_submission\" style=\"position:relative;\">\n<a class=\"slashpop\" href=\"http://twitter.com/home?status=Thanks+to+AI%2C+the+Hottest+New+Programming+Language+is...+English+%3A+https%3A%2F%2Fdevelopers.slashdot.org%2Fstory%2F24%2F12%2F08%2F2154224%2F%3Futm_source%3Dtwitter%26utm_medium%3Dtwitter\"><img src=\"https://a.fsdn.com/sd/twitter_icon_large.png\"></a>\n<a class=\"slashpop\" href=\"http://www.facebook.com/sharer.php?u=https%3A%2F%2Fdevelopers.slashdot.org%2Fstory%2F24%2F12%2F08%2F2154224%2Fthanks-to-ai-the-hottest-new-programming-language-is-english%3Futm_source%3Dslashdot%26utm_medium%3Dfacebook\"><img src=\"https://a.fsdn.com/sd/facebook_icon_large.png\"></a>\n\n\n\n</div></p><p><a href=\"https://developers.slashdot.org/story/24/12/08/2154224/thanks-to-ai-the-hottest-new-programming-language-is-english?utm_source=rss1.0moreanon&amp;utm_medium=feed\">Read more of this story</a> at Slashdot.</p>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"The Theory and Technique of Electronic Music (2006)","url":"https://msp.ucsd.edu/techniques.htm","date":1733697971,"author":"ofalkaed","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://msp.ucsd.edu/techniques.htm\">https://msp.ucsd.edu/techniques.htm</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42361404\">https://news.ycombinator.com/item?id=42361404</a></p>\n<p>Points: 240</p>\n<p># Comments: 72</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Linux Kernel 6.12 Confirmed As LTS, Will Be Supported For 'Multiple Years'","url":"https://linux.slashdot.org/story/24/12/09/0125219/linux-kernel-612-confirmed-as-lts-will-be-supported-for-multiple-years?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1733714400,"author":"EditorDavid","unread":true,"desc":"","content":"Slashdot reader prisoninmate shared this report from the blog 9to5Linux\n\n\n\nRenowned Linux kernel developer Greg Kroah-Hartman announced Thursday that the Linux 6.12 kernel series has been officially marked as LTS (Long Term Support) on the kernel.org website with a predicted life expectancy of at least two years. \n\nLinux kernel 6.12 was released on November 17th, 2024, and introduces new features like real-time \"PREEMPT_RT\" support, a new scheduler called sched_ext, and DRM panic messages as QR codes, as well as numerous new and updated drivers for better hardware support... \n\nLinux kernel 6.12 joins the many other long-term support kernel branches, namely Linux 6.6 LTS, Linux 6.1 LTS, Linux 5.15 LTS, Linux 5.10 LTS, and Linux 5.4 LTS. Apart from the latter, the rest of them, including Linux kernel 6.12, will be officially supported until the end of December 2026. Hopefully, Linux kernel 6.12 will be supported for more than two years as the kernel maintainers usually aim for four years of support for a new LTS kernel, especially if there's demand from hardware manufacturers and other companies that aim to use a long-term supported kernel in their devices.\n<p><div class=\"share_submission\" style=\"position:relative;\">\n<a class=\"slashpop\" href=\"http://twitter.com/home?status=Linux+Kernel+6.12+Confirmed+As+LTS%2C+Will+Be+Supported+For+'Multiple+Years'%3A+https%3A%2F%2Flinux.slashdot.org%2Fstory%2F24%2F12%2F09%2F0125219%2F%3Futm_source%3Dtwitter%26utm_medium%3Dtwitter\"><img src=\"https://a.fsdn.com/sd/twitter_icon_large.png\"></a>\n<a class=\"slashpop\" href=\"http://www.facebook.com/sharer.php?u=https%3A%2F%2Flinux.slashdot.org%2Fstory%2F24%2F12%2F09%2F0125219%2Flinux-kernel-612-confirmed-as-lts-will-be-supported-for-multiple-years%3Futm_source%3Dslashdot%26utm_medium%3Dfacebook\"><img src=\"https://a.fsdn.com/sd/facebook_icon_large.png\"></a>\n\n\n\n</div></p><p><a href=\"https://linux.slashdot.org/story/24/12/09/0125219/linux-kernel-612-confirmed-as-lts-will-be-supported-for-multiple-years?utm_source=rss1.0moreanon&amp;utm_medium=feed\">Read more of this story</a> at Slashdot.</p>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Compromising OpenWrt Supply Chain","url":"https://flatt.tech/research/posts/compromising-openwrt-supply-chain-sha256-collision/","date":1733718969,"author":"udev4096","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://flatt.tech/research/posts/compromising-openwrt-supply-chain-sha256-collision/\">https://flatt.tech/research/posts/compromising-openwrt-supply-chain-sha256-collision/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42363102\">https://news.ycombinator.com/item?id=42363102</a></p>\n<p>Points: 560</p>\n<p># Comments: 95</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Itch.io Taken Down by Funko","url":"https://bsky.app/profile/itch.io/post/3lcu6h465bs2n","date":1733728759,"author":"spiralganglion","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://bsky.app/profile/itch.io/post/3lcu6h465bs2n\">https://bsky.app/profile/itch.io/post/3lcu6h465bs2n</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42363727\">https://news.ycombinator.com/item?id=42363727</a></p>\n<p>Points: 1118</p>\n<p># Comments: 447</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"OpenWrt Supply Chain Compromission via Truncated SHA-256 Collision and Command Injection","url":"https://www.reddit.com/r/programming/comments/1ha7b2v/openwrt_supply_chain_compromission_via_truncated/","date":1733742256,"author":"/u/cym13","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/cym13\"> /u/cym13 </a> <br/> <span><a href=\"https://flatt.tech/research/posts/compromising-openwrt-supply-chain-sha256-collision/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/programming/comments/1ha7b2v/openwrt_supply_chain_compromission_via_truncated/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Memory-safe PNG decoders now vastly outperform C PNG libraries","url":"https://www.reddit.com/r/rust/comments/1ha7uyi/memorysafe_png_decoders_now_vastly_outperform_c/","date":1733744525,"author":"/u/Shnatsel","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p><strong>TL;DR:</strong> Memory-safe implementations of PNG (<a href=\"https://crates.io/crates/png\">png</a>, <a href=\"https://crates.io/crates/zune-png\">zune-png</a>, <a href=\"https://github.com/google/wuffs/\">wuffs</a>) now dramatically outperform memory-unsafe ones (<a href=\"http://www.libpng.org/\">libpng</a>, <a href=\"https://libspng.org/\">spng</a>, <a href=\"https://github.com/nothings/stb\">stb_image</a>) when decoding images.</p> <p>Rust <a href=\"https://crates.io/crates/png\">png</a> crate that tops our benchmark shows <strong>1.8x</strong> improvement over <code>libpng</code> on x86 and <strong>1.5x</strong> improvement on ARM.</p> <h3>How was this measured?</h3> <p>Each implementation is slightly different. It&#39;s easy to show a single image where one implementation has an edge over the others, but this would not translate to real-world performance.</p> <p>In order to get benchmarks that are more representative of real world, we measured decoding times across the entire <a href=\"https://qoiformat.org/benchmark/\">QOI benchmark corpus</a> which contains many different types of images (icons, screenshots, photos, etc).</p> <p>We&#39;ve configured the C libraries to use <a href=\"https://github.com/zlib-ng/zlib-ng\">zlib-ng</a> to give them the best possible chance. Zlib-ng is still not widely deployed, so the gap between the C PNG library you&#39;re probably using is even greater than these benchmarks show!</p> <p>Results on x86 (Zen 4):</p> <pre><code>Running decoding benchmark with corpus: QoiBench image-rs PNG: 375.401 MP/s (average) 318.632 MP/s (geomean) zune-png: 376.649 MP/s (average) 302.529 MP/s (geomean) wuffs PNG: 376.205 MP/s (average) 287.181 MP/s (geomean) libpng: 208.906 MP/s (average) 173.034 MP/s (geomean) spng: 299.515 MP/s (average) 235.495 MP/s (geomean) stb_image PNG: 234.353 MP/s (average) 171.505 MP/s (geomean) </code></pre> <p>Results on ARM (Apple silicon):</p> <pre><code>Running decoding benchmark with corpus: QoiBench image-rs PNG: 256.059 MP/s (average) 210.616 MP/s (geomean) zune-png: 221.543 MP/s (average) 178.502 MP/s (geomean) wuffs PNG: 255.111 MP/s (average) 200.834 MP/s (geomean) libpng: 168.912 MP/s (average) 143.849 MP/s (geomean) spng: 138.046 MP/s (average) 112.993 MP/s (geomean) stb_image PNG: 186.223 MP/s (average) 139.381 MP/s (geomean) </code></pre> <p>You can reproduce the benchmark on your own hardware using the instructions <a href=\"https://github.com/fintelia/corpus-bench/tree/3d0b8b82244400ee8bc33539d18d79fcb329b8fb\">here</a>.</p> <h3>How is this possible?</h3> <p>PNG format is just <a href=\"https://en.wikipedia.org/wiki/Deflate\">DEFLATE</a> compression (same as in <code>gzip</code>) plus <a href=\"https://en.wikipedia.org/wiki/PNG#Filtering\">PNG-specific filters</a> that try to make image data easier for DEFLATE to compress. You need to optimize both PNG filters and DEFLATE to make PNG fast.</p> <h4>DEFLATE</h4> <p>Every memory-safe PNG decoder brings their own DEFLATE implementation. WUFFS gains performance by decompressing entire image at once, which <a href=\"https://nigeltao.github.io/blog/2021/fastest-safest-png-decoder.html#running-off-a-cliff\">lets them go fast without running off a cliff</a>. <code>zune-png</code> uses a similar strategy in its DEFLATE implementation, <a href=\"https://crates.io/crates/zune-inflate\">zune-inflate</a>.</p> <p><code>png</code> crate takes a different approach. It uses <a href=\"https://crates.io/crates/fdeflate\">fdeflate</a> as its DEFLATE decoder, which supports streaming instead of decompressing the entire file at once. Instead it gains performance via clever tricks such as <a href=\"https://fastcompression.blogspot.com/2015/10/huffman-revisited-part-4-multi-bytes.html\">decoding multiple bytes at once</a>.</p> <p>Support for streaming decompression makes <code>png</code> crate more widely applicable than the other two. In fact, there is ongoing experimentation on using Rust <code>png</code> crate as the PNG decoder in Chromium, replacing <code>libpng</code> entirely. <strong>Update:</strong> WUFFS also supports a form of streaming decompression, see <a href=\"https://www.reddit.com/r/rust/comments/1ha7uyi/memorysafe_png_decoders_now_vastly_outperform_c/m19zz77/?context=3\">here</a>.</p> <h4>Filtering</h4> <p>Most libraries use explicit <a href=\"https://medium.com/@anilcangulkaya7/what-is-simd-and-how-to-use-it-3d1125faac89\">SIMD</a> instructions to accelerate filtering. Unfortunately, they are architecture-specific. For example, <code>zune-png</code> is slower on ARM than on x86 because the author hasn&#39;t written SIMD implementations for ARM yet.</p> <p>A notable exception is stb_image, which doesn&#39;t use explicit SIMD and instead came up with a <a href=\"https://github.com/nothings/stb/blob/5c205738c191bcb0abc65c4febfa9bd25ff35234/stb_image.h#L4657-L4668\">clever formulation</a> of the most common and compute-intensive filter. However, due to architectural differences it also only benefits x86.</p> <p>The <code>png</code> crate once again takes a different approach. Instead of explicit SIMD it relies on <a href=\"https://en.wikipedia.org/wiki/Automatic_vectorization\">automatic vectorization</a>. Rust compiler is actually excellent at turning your code into SIMD instructions <a href=\"https://matklad.github.io/2023/04/09/can-you-trust-a-compiler-to-optimize-your-code.html\">as long as you write it in a way that&#39;s amenable to it</a>. This approach lets you write code once and have it perform well everywhere. Architecture-specific optimizations can be added on top of it in the few select places where they are beneficial. Right now x86 uses the <code>stb_image</code> formulation of a single filter, while the rest of the code is the same everywhere.</p> <h3>Is this production-ready?</h3> <p>Yes! </p> <p>All three memory-safe implementations support APNG, reading/writing auxiliary chunks, and other features expected of a modern PNG library.</p> <p><code>png</code> and <code>zune-png</code> have been tested on a wide range of real-world images, with over 100,000 of them in the test corpus alone. And <code>png</code> is used by every user of the <code>image</code> crate, so it has been thoroughly battle-tested.</p> <p>WUFFS PNG v0.4 <a href=\"https://github.com/fintelia/corpus-bench/blob/3d0b8b82244400ee8bc33539d18d79fcb329b8fb/src/main.rs#L404-L405\">seems to fail on grayscale images with alpha</a> in our tests. We haven&#39;t investigated this in depth, it might be a configuration issue on our part rather than a bug. Still, we cannot vouch for WUFFS like we can for Rust libraries.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Shnatsel\"> /u/Shnatsel </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1ha7uyi/memorysafe_png_decoders_now_vastly_outperform_c/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1ha7uyi/memorysafe_png_decoders_now_vastly_outperform_c/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Douglas Crockford Is Not Your Dad","url":"https://www.reddit.com/r/programming/comments/1ha7zog/douglas_crockford_is_not_your_dad/","date":1733745035,"author":"/u/lerilecalmmia","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/lerilecalmmia\"> /u/lerilecalmmia </a> <br/> <span><a href=\"https://douglascrockfordisnotyourdad.technomancy.us/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/programming/comments/1ha7zog/douglas_crockford_is_not_your_dad/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Just a k9s appreciation post","url":"https://www.reddit.com/r/kubernetes/comments/1ha844u/just_a_k9s_appreciation_post/","date":1733745519,"author":"/u/chdman","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Hello, </p> <p>After using lens for over 2 years I switched to k9s a week ago and I&#39;m in love with this tool. I cannot go back to lens at all. Thanks to all the people developing/supporting this project.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/chdman\"> /u/chdman </a> <br/> <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1ha844u/just_a_k9s_appreciation_post/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1ha844u/just_a_k9s_appreciation_post/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"OTIO support in Kdenlive","url":"https://www.reddit.com/r/linux/comments/1ha9127/otio_support_in_kdenlive/","date":1733748731,"author":"/u/f_r_d","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/f_r_d\"> /u/f_r_d </a> <br/> <span><a href=\"/r/kdenlive/comments/1ha90r8/otio_support_in_kdenlive/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/linux/comments/1ha9127/otio_support_in_kdenlive/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Himalaya: CLI to Manage Emails","url":"https://github.com/pimalaya/himalaya","date":1733750227,"author":"xparadigm","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://github.com/pimalaya/himalaya\">https://github.com/pimalaya/himalaya</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42366025\">https://news.ycombinator.com/item?id=42366025</a></p>\n<p>Points: 315</p>\n<p># Comments: 90</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"JupyterLab 101 Book is Now Available","url":"https://www.blog.pythonlibrary.org/2024/12/09/jupyterlab-101-book-is-now-available/","date":1733751078,"author":"Mike","unread":true,"desc":"","content":"<p>JupyterLab, the latest iteration of the Jupyter Notebook, is a versatile tool that empowers you to share your code in an easily understandable format.</p>\n<figure id=\"attachment_12441\" aria-describedby=\"caption-attachment-12441\" style=\"width: 1024px\" class=\"wp-caption aligncenter\"><a href=\"https://www.amazon.com/dp/B0DMFJWSJN\"><img fetchpriority=\"high\" decoding=\"async\" class=\"size-large wp-image-12441\" src=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-1024x768.jpg\" alt=\"\" width=\"1024\" height=\"768\" srcset=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-1024x768.jpg 1024w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-300x225.jpg 300w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-768x576.jpg 768w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-1536x1152.jpg 1536w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-2048x1536.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><figcaption id=\"caption-attachment-12441\" class=\"wp-caption-text\">Front View Two Hard Cover Book Psd Mockup</figcaption></figure>\n<p>Hundreds of thousands of people around the world use Jupyter Notebooks or variations of the Notebook architecture for any or all of the following:</p>\n<ul class=\"a-unordered-list a-vertical\">\n<li><span class=\"a-list-item\">teaching</span></li>\n<li><span class=\"a-list-item\">presentations</span></li>\n<li><span class=\"a-list-item\">learning a computer language</span></li>\n<li><span class=\"a-list-item\">numerical simulations</span></li>\n<li><span class=\"a-list-item\">statistical modeling</span></li>\n<li><span class=\"a-list-item\">data visualization</span></li>\n<li><span class=\"a-list-item\">machine learning</span></li>\n<li><span class=\"a-list-item\">and much more!</span></li>\n</ul>\n<p>Jupyter Notebooks can be emailed, put on GitHub, or run online. You may also add HTML, images, Markdown, videos, LaTeX, and custom MIME types to your Notebooks. Finally, Jupyter Notebooks support big data integration.</p>\n<p>JupyterLab 101 will get you up to speed on the newest user interface for Jupyter Notebooks and the other tools that JupyterLab supports. You now have a tabbed interface that you can use to edit multiple Notebooks, open terminals in your browser, create a Python REPL, and more. JupyterLab also includes a debugger utility to help you figure out your coding issues.</p>\n<p>Rest assured, JupyterLab supports all the same programming languages as Jupyter Notebook. The main difference lies in the user interface, and this guide is here to help you navigate it effectively and efficiently.</p>\n<p>After reading JupyterLab 101, you will be an expert in JupyterLab and produce quality Notebooks quickly!</p>\n<h2>Where to Purchase</h2>\n<p>Purchase on <a href=\"https://driscollis.gumroad.com/l/jupyterlab101\">Gumroad</a>, <a href=\"https://leanpub.com/jupyterlab101/\">Leanpub</a> or <a href=\"https://www.amazon.com/dp/B0DMFJWSJN\">Amazon</a></p>\n<p>The post <a href=\"https://www.blog.pythonlibrary.org/2024/12/09/jupyterlab-101-book-is-now-available/\">JupyterLab 101 Book is Now Available</a> appeared first on <a href=\"https://www.blog.pythonlibrary.org\">Mouse Vs Python</a>.</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Flawless Replay - Time traveling debugger for Rust workflows","url":"https://www.reddit.com/r/rust/comments/1haa58t/flawless_replay_time_traveling_debugger_for_rust/","date":1733752254,"author":"/u/bkolobara","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/bkolobara\"> /u/bkolobara </a> <br/> <span><a href=\"https://flawless.dev/replay/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1haa58t/flawless_replay_time_traveling_debugger_for_rust/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Your experience with Crossplane and ArgoCD to deploy IAC","url":"https://www.reddit.com/r/kubernetes/comments/1haacss/your_experience_with_crossplane_and_argocd_to/","date":1733752877,"author":"/u/MuscleLazy","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>I’m thinking of the following basic design, create a EKS management cluster with Terraform, then run on it ArgoCD and Crossplane to deploy infrastructure as code, like new EKS clusters, CICD pipeline etc. The goal is to get rid of Terraform drifting. What are your experiences and blocks with Crossplane, in this scenario.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/MuscleLazy\"> /u/MuscleLazy </a> <br/> <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1haacss/your_experience_with_crossplane_and_argocd_to/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1haacss/your_experience_with_crossplane_and_argocd_to/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Task-specific LLM evals that do and don't work","url":"https://eugeneyan.com/writing/evals/","date":1733754211,"author":"ZeljkoS","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://eugeneyan.com/writing/evals/\">https://eugeneyan.com/writing/evals/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42366481\">https://news.ycombinator.com/item?id=42366481</a></p>\n<p>Points: 148</p>\n<p># Comments: 37</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"problems with Rook Ceph","url":"https://www.reddit.com/r/kubernetes/comments/1hab3i5/problems_with_rook_ceph/","date":1733754998,"author":"/u/berops_com","unread":true,"desc":"","content":"<table> <tr><td> <a href=\"https://www.reddit.com/r/kubernetes/comments/1hab3i5/problems_with_rook_ceph/\"> <img src=\"https://b.thumbs.redditmedia.com/ai_zHnWFbz-RL8KDmBZuppWTO0RIwf0DLCDKtI30LiI.jpg\" alt=\"problems with Rook Ceph\" title=\"problems with Rook Ceph\" /> </a> </td><td> <!-- SC_OFF --><div class=\"md\"><p>During the night our client experienced a casual problem with Rook Ceph when the Ceph OSD disks didn’t respond. The issue resolved itself in a couple of minutes but to do a post-mortem we started investigating the cause in the morning. Long story short, we couldn’t find the cause that day. There was nothing special in the logs of the Rook Ceph pods and the only suspicious thing in the Grafana dashboard was a spike in the average OSD operation time. We called it a day and planned to continue the investigation tomorrow. However, the same incident happened during the night. Most importantly at the same time and got resolved by itself again. We turned our attention from the Rook Ceph to the particular nodes on which the OSDs weren’t responding. We saw quite intense CPU iowait in the Grafana but just as spikes in an average OSD operation time, it looked more like a symptom than a cause. So, that day we didn’t find the root cause either and went to sleep but when we woke up there was another surprise. The same incident with the Rook Ceph and again at the same time. At least this time the OSDs on only one of the nodes weren’t responding. So we took a deeper look into the metrics of this node and spotted a gap in the Grafana graphs (there should be the first image).<br/> We didn’t recognize these gaps in previous days because unless you don’t zoom in enough it looks like a constant rise finishing with a spike (there should be the second image).Anyway, from this point we knew that Prometheus didn’t get the data from this node at the time of the Rook Ceph incident, so we looked at the /var/log/syslog and saw an outage of the interface that is used to connect the affected node to the Kubernetes cluster.<br/> 2024-12-06T04:30:06.769443+01:00 rancher-production-node-9 kernel: bnxt_en 0000:c1:00.0 enp193s0f0np0: NIC Link is Down<br/> 2024-12-06T04:30:06.796676+01:00 rancher-production-node-9 systemd-networkd[1358015]: enp193s0f0np0: Lost carrier<br/> 2024-12-06T04:30:06.805420+01:00 rancher-production-node-9 systemd-networkd[1358015]: enp193s0f0np0: DHCPv6 lease lost<br/> 2024-12-06T04:30:06.806466+01:00 rancher-production-node-9 systemd-timesyncd[1358005]: No network connectivity, watching for changes.2024-12-06T04:42:36.080426+01:00 rancher-production-node-9 kernel: bnxt_en 0000:c1:00.0 enp193s0f0np0: NIC Link is Up, 1000 Mbps full duplex, Flow control: none<br/> 2024-12-06T04:42:36.080447+01:00 rancher-production-node-9 kernel: bnxt_en 0000:c1:00.0 enp193s0f0np0: FEC autoneg off encoding: None<br/> 2024-12-06T04:42:36.081696+01:00 rancher-production-node-9 systemd-networkd[1358015]: enp193s0f0np0: Gained carrier<br/> Eventually, we found out that this was the root cause of every Rook Ceph incident we experienced for the last few days and it happened due to the Hetzner incidents.<br/> How many of you spend an unreasonable amount of time searching for the root cause of an incident in a bad place? Also, did you get tricked by Grafana graphs anytime? What are your experiences with Hetzner incidents? How do you make production systems on Hetzner more reliable? Is the tax we pay for Hetzner being a cheap cloud provider?</p> <p><a href=\"https://preview.redd.it/yl3ztpqj3u5e1.png?width=887&amp;format=png&amp;auto=webp&amp;s=550fc45d29781e53631fcf938529fc1cb6f3adfd\">https://preview.redd.it/yl3ztpqj3u5e1.png?width=887&amp;format=png&amp;auto=webp&amp;s=550fc45d29781e53631fcf938529fc1cb6f3adfd</a></p> <p><a href=\"https://preview.redd.it/7552soqj3u5e1.png?width=887&amp;format=png&amp;auto=webp&amp;s=a0d36006c494bda861e37417e7b8037a2e8ee8e7\">https://preview.redd.it/7552soqj3u5e1.png?width=887&amp;format=png&amp;auto=webp&amp;s=a0d36006c494bda861e37417e7b8037a2e8ee8e7</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/berops_com\"> /u/berops_com </a> <br/> <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1hab3i5/problems_with_rook_ceph/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1hab3i5/problems_with_rook_ceph/\">[comments]</a></span> </td></tr></table>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"cmd-stream/Protobuf is about 2.5 times faster than gRPC/Protobuf","url":"https://www.reddit.com/r/golang/comments/1hacd4r/cmdstreamprotobuf_is_about_25_times_faster_than/","date":1733758428,"author":"/u/ymz-ncnk","unread":true,"desc":"","content":"<table> <tr><td> <a href=\"https://www.reddit.com/r/golang/comments/1hacd4r/cmdstreamprotobuf_is_about_25_times_faster_than/\"> <img src=\"https://external-preview.redd.it/2uCQpiKUOUqpJS09YSUaWMRsG8ChWEYLAxGMh2QDg34.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=168c48cd9f1c8e0fd54838342037404d57136f55\" alt=\"cmd-stream/Protobuf is about 2.5 times faster than gRPC/Protobuf\" title=\"cmd-stream/Protobuf is about 2.5 times faster than gRPC/Protobuf\" /> </a> </td><td> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/ymz-ncnk\"> /u/ymz-ncnk </a> <br/> <span><a href=\"https://github.com/ymz-ncnk/go-client-server-communication-benchmarks\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hacd4r/cmdstreamprotobuf_is_about_25_times_faster_than/\">[comments]</a></span> </td></tr></table>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Just launched NerveMQ - a SQLite-powered message queue that speaks SQS 🚀","url":"https://www.reddit.com/r/rust/comments/1haddsd/just_launched_nervemq_a_sqlitepowered_message/","date":1733761069,"author":"/u/majorpog","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Hey all, I&#39;ve been working on this for a few weeks and wanted to share! It&#39;s called <a href=\"https://github.com/fortress-build/nervemq\">NerveMQ</a> - basically AWS SQS but running locally with SQLite as the backend.</p> <p>Why? Because sometimes you just want a simple message queue that: - Works exactly like SQS (you can use existing SDKs, or use it as a local mock SQS for testing) - Doesn&#39;t need a whole cluster setup - Actually persists your data (sorry Redis) - Is stupid simple to deploy (it&#39;s just one binary)</p> <p>I also just thought it would be fun to build. I may have come up with the other &quot;why&quot;s after the fact.</p> <p>The cool stuff: - Multi-tenant support with namespaces - Built-in auth system - bearer-based auth or AWS SIGv4 - Admin UI for managing everything (+ an admin API) - Apache 2.0 licensed</p> <p>Future plans: - DB-per-queue for higher throughput - High availability via replication and raft consensus</p> <p>It&#39;s still early days but the core functionality is there. Would love to get some feedback from anyone who wants to try it out (and of course, stars) :)</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/majorpog\"> /u/majorpog </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1haddsd/just_launched_nervemq_a_sqlitepowered_message/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1haddsd/just_launched_nervemq_a_sqlitepowered_message/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"MySQL Change root Password Command","url":"https://www.cyberciti.biz/faq/mysql-change-root-password/","date":1733761140,"author":"Vivek Gite","unread":true,"desc":"","content":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><div style=\"float: right; margin-top: 0; margin-left: 5px;\"><a href=\"https://www.cyberciti.biz/faq/category/mysql/\" title=\"See all MySQL Database Server related FAQ\"><img alt=\"See all MySQL Database Server related FAQ\" border=\"0\" height=\"52\" src=\"https://www.cyberciti.biz/media/new/category/old/mysqllogo.gif\" width=\"100\"/></a></div>\n<p><span class=\"drop_cap\">H</span>ow do I change MySQL root password under Linux, FreeBSD, OpenBSD and UNIX-like like operating system over the ssh session?</p>\n<p>Love this? sudo share_on: <strong><a href=\"https://twitter.com/intent/tweet?url=https://www.cyberciti.biz/faq/mysql-change-root-password/&amp;text=MySQL Change root Password Command&amp;via=nixcraft\">Twitter</a></strong> - <strong><a href=\"https://www.facebook.com/sharer/sharer.php?u=https://www.cyberciti.biz/faq/mysql-change-root-password/\">Facebook</a></strong> - <strong><a href=\"https://www.linkedin.com/sharing/share-offsite/?url=https://www.cyberciti.biz/faq/mysql-change-root-password/\">LinkedIn</a></strong> - <strong><a href=\"https://wa.me/?text=MySQL Change root Password Command https://www.cyberciti.biz/faq/mysql-change-root-password/\">Whatsapp</a></strong> - <strong><a href=\"https://reddit.com/submit?url=https://www.cyberciti.biz/faq/mysql-change-root-password/&amp;title=MySQL Change root Password Command\">Reddit</a></strong></p>\n<p>The post <a href=\"https://www.cyberciti.biz/faq/mysql-change-root-password/\">MySQL Change root Password Command</a> appeared first on <a href=\"https://www.cyberciti.biz/faq/\" title=\"Linux and Unix tutorials for new and seasoned sysadmin section\">nixCraft</a>.</p></div>\n    ","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Willow, Our Quantum Chip","url":"https://blog.google/technology/research/google-willow-quantum-chip/","date":1733761703,"author":"robflaherty","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://blog.google/technology/research/google-willow-quantum-chip/\">https://blog.google/technology/research/google-willow-quantum-chip/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42367649\">https://news.ycombinator.com/item?id=42367649</a></p>\n<p>Points: 1051</p>\n<p># Comments: 416</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Popular Python AI library Ultralytics compromised with a crypto miner","url":"https://www.reddit.com/r/programming/comments/1hae36h/popular_python_ai_library_ultralytics_compromised/","date":1733762863,"author":"/u/CrankyBear","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/CrankyBear\"> /u/CrankyBear </a> <br/> <span><a href=\"https://opensourcewatch.beehiiv.com/p/popular-python-ai-library-ultralytics-compromised-with-a-crypto-miner\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/programming/comments/1hae36h/popular_python_ai_library_ultralytics_compromised/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Flathub is becoming its own entity and that is a great thing","url":"https://www.reddit.com/r/linux/comments/1hae7kx/flathub_is_becoming_its_own_entity_and_that_is_a/","date":1733763173,"author":"/u/0riginal-Syn","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/0riginal-Syn\"> /u/0riginal-Syn </a> <br/> <span><a href=\"/r/kde/comments/1hae6wf/flathub_is_becoming_its_own_entity_and_that_is_a/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/linux/comments/1hae7kx/flathub_is_becoming_its_own_entity_and_that_is_a/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Best observability setup with Go.","url":"https://www.reddit.com/r/golang/comments/1haeewd/best_observability_setup_with_go/","date":1733763666,"author":"/u/Used_Frosting6770","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Currently, I have a setup where errors are logged at the HTTP layer and saved into a temporary file. This file is later read, indexed, and displayed using Grafana, Loki, and Promtail. I want to improve this setup. GPT recommended using Logrus for structured logging and the ELK stack.</p> <p>I&#39;m curious about what others are using for similar purposes. My goal is to have a dashboard to view all logs, monitor resource usage and set up email alerts for specific error patterns.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Used_Frosting6770\"> /u/Used_Frosting6770 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1haeewd/best_observability_setup_with_go/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1haeewd/best_observability_setup_with_go/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Reducing CO₂ emissions with faster software","url":"https://www.reddit.com/r/programming/comments/1haepzc/reducing_co%E2%82%82_emissions_with_faster_software/","date":1733764401,"author":"/u/itamarst","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/itamarst\"> /u/itamarst </a> <br/> <span><a href=\"https://pythonspeed.com/articles/co2-emissions-software/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/programming/comments/1haepzc/reducing_co₂_emissions_with_faster_software/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"GPU Switching: A Multi-GPU Game Changer","url":"https://www.reddit.com/r/linux/comments/1hafb16/gpu_switching_a_multigpu_game_changer/","date":1733765840,"author":"/u/gabriel_3","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/gabriel_3\"> /u/gabriel_3 </a> <br/> <span><a href=\"https://news.opensuse.org/2024/12/09/gpu-switching-game-changing/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/linux/comments/1hafb16/gpu_switching_a_multigpu_game_changer/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"State of the Crates 2025","url":"https://www.reddit.com/r/rust/comments/1hafdai/state_of_the_crates_2025/","date":1733765991,"author":"/u/ohrv","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/ohrv\"> /u/ohrv </a> <br/> <span><a href=\"https://ohadravid.github.io/posts/2024-12-state-of-the-crates/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1hafdai/state_of_the_crates_2025/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Sora is here","url":"https://openai.com/index/sora-is-here/","date":1733767330,"author":"toomuchtodo","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://openai.com/index/sora-is-here/\">https://openai.com/index/sora-is-here/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42368604\">https://news.ycombinator.com/item?id=42368604</a></p>\n<p>Points: 942</p>\n<p># Comments: 787</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"New dog, old trick: DaMAgeCard attack targets memory directly via SD card reader","url":"https://swarm.ptsecurity.com/new-dog-old-tricks-damagecard-attack-targets-memory-directly-thru-sd-card-reader/","date":1733768100,"author":"thebeardisred","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://swarm.ptsecurity.com/new-dog-old-tricks-damagecard-attack-targets-memory-directly-thru-sd-card-reader/\">https://swarm.ptsecurity.com/new-dog-old-tricks-damagecard-attack-targets-memory-directly-thru-sd-card-reader/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42368784\">https://news.ycombinator.com/item?id=42368784</a></p>\n<p>Points: 135</p>\n<p># Comments: 17</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: Ternary Computer System","url":"https://www.ternary-computing.com/history/CPU-History.html","date":1733768591,"author":"claudio_mos","unread":true,"desc":"","content":"\n<p>Hi everyone!\nI'm an Italian programmer, very passionate about computer architecture. Some time ago I realized that some architectures potentially much superior to the classic VonNeumann, have been forgotten because there were no reliable technical solutions to implement them.\nOne of these architectures particularly struck me and it is the \"Dataflow architecture\", in which there is no Program counter, but the instructions are executed in real contemporaneity whenever the operands are available.\nIn trying to find a technical solution that implements this type of architecture effectively (spoiler: yes, maybe I succeeded but I still have to test the real correct functioning!) I realized that this solution works more than well with three logical states. And at this point I discovered that perhaps it is better to implement a CPU with three states (ternary) instead of a white one. This as a first step to realize my dataflow solution.\nObviously a world has opened up to me regarding ternary CPUs, I have discovered not only that they are the best solution implemented for a computing device, but also that an increasing number of university and researcher papers are dealing with them in recent times.\nThis is also thanks to the enormous potential compared to normal CPUs; lower circuit complexity (and also lower consumption and lower heat production) but at the same time the truly formidable information representation capabilities compared to binary counterparts!\nSo here I am creating this ternary CPU and all the hardware and software to be able to use it immediately. In the link you have found some other details, but obviously for questions, suggestions or anything else you can insert your comment here!</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42368872\">https://news.ycombinator.com/item?id=42368872</a></p>\n<p>Points: 81</p>\n<p># Comments: 11</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"On Ghost Engineers And Proof or a Lack thereof","url":"https://www.reddit.com/r/programming/comments/1hah1d1/on_ghost_engineers_and_proof_or_a_lack_thereof/","date":1733770040,"author":"/u/CarefreeCrayon","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/CarefreeCrayon\"> /u/CarefreeCrayon </a> <br/> <span><a href=\"https://nishtahir.com/on-ghost-engineers-and-proof-or-a-lack-thereof/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/programming/comments/1hah1d1/on_ghost_engineers_and_proof_or_a_lack_thereof/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"ALICE finds first ever evidence of the antimatter partner of hyperhelium-4","url":"https://home.cern/news/news/physics/alice-finds-first-ever-evidence-antimatter-partner-hyperhelium-4","date":1733770877,"author":"elashri","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://home.cern/news/news/physics/alice-finds-first-ever-evidence-antimatter-partner-hyperhelium-4\">https://home.cern/news/news/physics/alice-finds-first-ever-evidence-antimatter-partner-hyperhelium-4</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42369294\">https://news.ycombinator.com/item?id=42369294</a></p>\n<p>Points: 221</p>\n<p># Comments: 57</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"I built my personal website completely in Go","url":"https://www.reddit.com/r/golang/comments/1hahlgs/i_built_my_personal_website_completely_in_go/","date":1733771389,"author":"/u/mxr_9","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>For over a year, I worked on developing a complete website for myself in Go, templ and htmx. I want to share with you the source code as I think it could be potentially useful for study. At its core, the site is a <a href=\"http://fontseca.dev/work/fontseca-dev-s-rpc-like-api\">RPC-like API</a> with a collection of 70+ methods that provide me flexibility in action; it is, structurally, similar to <a href=\"https://api.slack.com/web\">APIs like Slack&#39;s</a>. (I also built <a href=\"https://www.fontseca.dev/playground\">a playground</a> to play around third party APIs or mine.) </p> <p>• Website accessible at: <a href=\"https://www.fontseca.dev/\">https://www.fontseca.dev</a><br/> • Source code: <a href=\"https://github.com/fontseca/fontseca.dev\">https://github.com/fontseca/.dev</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/mxr_9\"> /u/mxr_9 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hahlgs/i_built_my_personal_website_completely_in_go/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hahlgs/i_built_my_personal_website_completely_in_go/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Trellis – 3D mesh generative model","url":"https://trellis3d.github.io/","date":1733771947,"author":"tarr11","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://trellis3d.github.io/\">https://trellis3d.github.io/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42369476\">https://news.ycombinator.com/item?id=42369476</a></p>\n<p>Points: 293</p>\n<p># Comments: 48</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Visualize and Edit Your Kubernetes YAML with Diagrams","url":"https://www.reddit.com/r/kubernetes/comments/1hahx1k/visualize_and_edit_your_kubernetes_yaml_with/","date":1733772195,"author":"/u/iamCut","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Hi guys, I built this tool to easily modify JSON and YAML by visualizing them into diagrams.</p> <p>Let me know what you think, I&#39;m open for feature requests and feedbacks :)</p> <p><a href=\"https://todiagram.com\">https://todiagram.com</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/iamCut\"> /u/iamCut </a> <br/> <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1hahx1k/visualize_and_edit_your_kubernetes_yaml_with/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1hahx1k/visualize_and_edit_your_kubernetes_yaml_with/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Dioxus 0.6 - Massive Tooling Improvements: Mobile Simulators, Magical Hot-Reloading, Interactive CLI, RSX Autocomplete, Streaming HTML, WGPU Overlays, and more!","url":"https://www.reddit.com/r/rust/comments/1hahy2d/dioxus_06_massive_tooling_improvements_mobile/","date":1733772264,"author":"/u/jkelleyrtp","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/jkelleyrtp\"> /u/jkelleyrtp </a> <br/> <span><a href=\"https://dioxuslabs.com/blog/release-060\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1hahy2d/dioxus_06_massive_tooling_improvements_mobile/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Fire risk assessment of battery home storage compared to general house fires","url":"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4995517","date":1733772820,"author":"gnabgib","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4995517\">https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4995517</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42369622\">https://news.ycombinator.com/item?id=42369622</a></p>\n<p>Points: 116</p>\n<p># Comments: 98</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"December 2024 Leadership Council Update","url":"https://www.reddit.com/r/rust/comments/1haj713/december_2024_leadership_council_update/","date":1733775352,"author":"/u/ehuss","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/ehuss\"> /u/ehuss </a> <br/> <span><a href=\"https://blog.rust-lang.org/inside-rust/2024/12/09/leadership-council-update.html\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1haj713/december_2024_leadership_council_update/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"gARM Advanced ARM64 Compiler for High-Performance on the GO","url":"https://www.reddit.com/r/golang/comments/1hak1ul/garm_advanced_arm64_compiler_for_highperformance/","date":1733777506,"author":"/u/Capable-Spinach10","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Hackers unite let&#39;s lift Go to new heights together, over the past weeks I&#39;ve been working on gARM (<a href=\"https://github.com/go-dockly/garm\">https://github.com/go-dockly/garm</a>) because of being unhappy with go&#39;s current state of Plan9 assembly mess and the many arm64 capabilities that remain untapped. Circumstance forces me to release a still unfinished PoC before its time, but gosh do I want to see gARM become a reality. Consider becoming an early contributor and carve out your marble in the hall of legends. I look forward to a sparring with You. Just a 🌟 would mean the 🌎 Thank you so much !</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Capable-Spinach10\"> /u/Capable-Spinach10 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hak1ul/garm_advanced_arm64_compiler_for_highperformance/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hak1ul/garm_advanced_arm64_compiler_for_highperformance/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Memory-safe PNG decoders now vastly outperform C PNG libraries","url":"https://www.reddit.com/r/programming/comments/1hak25t/memorysafe_png_decoders_now_vastly_outperform_c/","date":1733777528,"author":"/u/Alexander_Selkirk","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Alexander_Selkirk\"> /u/Alexander_Selkirk </a> <br/> <span><a href=\"https://old.reddit.com/r/rust/comments/1ha7uyi/memorysafe_png_decoders_now_vastly_outperform_c/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/programming/comments/1hak25t/memorysafe_png_decoders_now_vastly_outperform_c/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"What we know about CEO shooting suspect","url":"https://www.bbc.com/news/articles/cp9nxee2r0do","date":1733779048,"author":"1vuio0pswjnm7","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://www.bbc.com/news/articles/cp9nxee2r0do\">https://www.bbc.com/news/articles/cp9nxee2r0do</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42370622\">https://news.ycombinator.com/item?id=42370622</a></p>\n<p>Points: 487</p>\n<p># Comments: 965</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Go surpasses Node.js for API Client Language Popularity in 2024 according to Cloudflare Radar report","url":"https://www.reddit.com/r/golang/comments/1hakue9/go_surpasses_nodejs_for_api_client_language/","date":1733779474,"author":"/u/gbrayut","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/gbrayut\"> /u/gbrayut </a> <br/> <span><a href=\"https://radar.cloudflare.com/year-in-review/2024#api-client-language-popularity\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hakue9/go_surpasses_nodejs_for_api_client_language/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Xylella Fastidiosa: A crisis brewing in Europe's olive groves","url":"https://www.everymansci.com/society/xylella-fastidiosa-and-olive-oil-a-billion-euro-crisis-brewing-in-europes-olive-groves/","date":1733779770,"author":"indigodaddy","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://www.everymansci.com/society/xylella-fastidiosa-and-olive-oil-a-billion-euro-crisis-brewing-in-europes-olive-groves/\">https://www.everymansci.com/society/xylella-fastidiosa-and-olive-oil-a-billion-euro-crisis-brewing-in-europes-olive-groves/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42370709\">https://news.ycombinator.com/item?id=42370709</a></p>\n<p>Points: 75</p>\n<p># Comments: 45</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Debanking (and Debunking?)","url":"https://www.bitsaboutmoney.com/archive/debanking-and-debunking/","date":1733784987,"author":"wmf","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://www.bitsaboutmoney.com/archive/debanking-and-debunking/\">https://www.bitsaboutmoney.com/archive/debanking-and-debunking/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42371476\">https://news.ycombinator.com/item?id=42371476</a></p>\n<p>Points: 128</p>\n<p># Comments: 92</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"\"This is not a joke, Funko just called my mom\"","url":"https://twitter.com/itchio/status/1866239798924763227","date":1733785004,"author":"haunter","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://twitter.com/itchio/status/1866239798924763227\">https://twitter.com/itchio/status/1866239798924763227</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42371481\">https://news.ycombinator.com/item?id=42371481</a></p>\n<p>Points: 557</p>\n<p># Comments: 142</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Added sugar intake and its associations with incidence of cardiovascular disease","url":"https://www.frontiersin.org/journals/public-health/articles/10.3389/fpubh.2024.1452085/full","date":1733791553,"author":"gnabgib","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://www.frontiersin.org/journals/public-health/articles/10.3389/fpubh.2024.1452085/full\">https://www.frontiersin.org/journals/public-health/articles/10.3389/fpubh.2024.1452085/full</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42372379\">https://news.ycombinator.com/item?id=42372379</a></p>\n<p>Points: 94</p>\n<p># Comments: 71</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"I'm attending my first ever KubeCon, any tips to share?","url":"https://www.reddit.com/r/kubernetes/comments/1haplej/im_attending_my_first_ever_kubecon_any_tips_to/","date":1733792318,"author":"/u/newred8","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Hi there,</p> <p>I&#39;ve never attended any conferences, and tomorrow is going to me my first KubeCon in Delhi India.</p> <p>Can anyone attend any talk? I didn&#39;t check mark all the scheduled talk!</p> <p>What is the best way to navigate in networking with people, exhibitions and solutions showcase?</p> <p>Could you suggest some tips that can help me in utilising this opportunity to the fullest?</p> <p>TIA</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/newred8\"> /u/newred8 </a> <br/> <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1haplej/im_attending_my_first_ever_kubecon_any_tips_to/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1haplej/im_attending_my_first_ever_kubecon_any_tips_to/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Does Linux run almost everything?","url":"https://www.reddit.com/r/linux/comments/1harcar/does_linux_run_almost_everything/","date":1733797606,"author":"/u/Some_Programmer7161","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>So, following a discussion with a friend, I am convinced that Linux runs almost everything. In my knowledge, any programmable machine that is not a desktop or a laptop runs on some version of Linux. How correct or incorrect am I to believe that?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Some_Programmer7161\"> /u/Some_Programmer7161 </a> <br/> <span><a href=\"https://www.reddit.com/r/linux/comments/1harcar/does_linux_run_almost_everything/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/linux/comments/1harcar/does_linux_run_almost_everything/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Save Music, Save the Archive","url":"https://www.savethearchive.com/","date":1733797871,"author":"m463","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://www.savethearchive.com/\">https://www.savethearchive.com/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42373098\">https://news.ycombinator.com/item?id=42373098</a></p>\n<p>Points: 276</p>\n<p># Comments: 146</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Is anyone playing with the combination of generative AI and OpenCyc?","url":"https://2ro.co/post/769440256241123328/study-opencyc","date":1733797937,"author":"2ro","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://2ro.co/post/769440256241123328/study-opencyc\">https://2ro.co/post/769440256241123328/study-opencyc</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42373106\">https://news.ycombinator.com/item?id=42373106</a></p>\n<p>Points: 80</p>\n<p># Comments: 44</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Tree Calculus","url":"https://treecalcul.us/","date":1733801432,"author":"iamwil","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://treecalcul.us/\">https://treecalcul.us/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42373437\">https://news.ycombinator.com/item?id=42373437</a></p>\n<p>Points: 218</p>\n<p># Comments: 92</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"GNU Shepherd 1.0.0 released!","url":"https://www.reddit.com/r/linux/comments/1hativk/gnu_shepherd_100_released/","date":1733804571,"author":"/u/9bladed","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/9bladed\"> /u/9bladed </a> <br/> <span><a href=\"https://www.gnu.org/software/shepherd/news/2024/12/the-shepherd-1.0.0-released/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/linux/comments/1hativk/gnu_shepherd_100_released/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"introducing brainlet","url":"https://www.reddit.com/r/linux/comments/1hav2zn/introducing_brainlet/","date":1733810030,"author":"/u/vim-god","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/vim-god\"> /u/vim-god </a> <br/> <span><a href=\"https://i.redd.it/t0g7wfuqmy5e1.png\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/linux/comments/1hav2zn/introducing_brainlet/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"What storage should i choose?","url":"https://www.reddit.com/r/kubernetes/comments/1havcvd/what_storage_should_i_choose/","date":1733811073,"author":"/u/MothGirlMusic","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Hi! Im setting up my own k8s on debian 11. Going amazing and now looking for storage solutions. I need storage for pods but some Services require i mount them also in a filebrowser so staff can edit or update data separate to the Services using the data. Web games or pther Services that need maintainance from time to time. I was thinking Mini as a storageclass would be great but it only seems like its used as a proxy, not a full storage solution. I saw longhorn is pretty nice, but would i be able to mount storage blocks from a pod running a service to another pod running a file Browser?</p> <p>Any advice would be wonderful. This is absolutely a dev Environment, our Team is still learning kubernetes.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/MothGirlMusic\"> /u/MothGirlMusic </a> <br/> <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1havcvd/what_storage_should_i_choose/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1havcvd/what_storage_should_i_choose/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Type inference, generics","url":"https://www.reddit.com/r/golang/comments/1hax54q/type_inference_generics/","date":1733818657,"author":"/u/Saarbremer","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Type inference is a very powerful tool in statically typed languages like go. With static typing and type inference we can write code easily and still benefit from all the luxury static typing has to offer: A lot of programs will be rejected due to inconsistency of data handling which avoids a lot of bugs and unwanted runtime panics.</p> <p>However, I wonder if type inference for generics could be more complete when it comes to generics. The blog entry <a href=\"https://go.dev/blog/type-inference\">on type inference</a> is quite complete on how type inference works. It also discusses shortly type inference for generics. </p> <p>But I wonder if go should evolve to more:</p> <p>Here&#39;s an example that will fail at three locations, although only one is expected to fail with full type inference: <a href=\"https://go.dev/play/p/F7ZwEcip-F7\">https://go.dev/play/p/F7ZwEcip-F7</a></p> <p>The type of the generic functions could easily be deducted when doing a backward propagation. Is compilation time the only reason to not support this kind of type inference or am I missing something completely? </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Saarbremer\"> /u/Saarbremer </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hax54q/type_inference_generics/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hax54q/type_inference_generics/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""}]}