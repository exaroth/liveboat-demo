{"id":"KZgg6v3y1EHngSu15w9ddbD2SchD7Q","title":"Dev News - Last 2 days","displayTitle":"Dev News - Last 2 days","url":"","feedLink":"","items":[{"title":"Elon Musk wanted an OpenAI for-profit","url":"https://openai.com/index/elon-musk-wanted-an-openai-for-profit/","date":1734118601,"author":"arvindh-manian","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://openai.com/index/elon-musk-wanted-an-openai-for-profit/\">https://openai.com/index/elon-musk-wanted-an-openai-for-profit/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42411608\">https://news.ycombinator.com/item?id=42411608</a></p>\n<p>Points: 552</p>\n<p># Comments: 623</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: @smoores/epub, a JavaScript library for working with EPUB publications","url":"https://www.npmjs.com/package/@smoores/epub","date":1734119546,"author":"smoores","unread":true,"desc":"","content":"\n<p>Howdy! I've just written a blog post about this, and I figured I would share it here: <a href=\"https://smoores.dev/post/announcing_smoores_epub/\" rel=\"nofollow\">https://smoores.dev/post/announcing_smoores_epub/</a>. As I've been working on Storyteller[1], I've been developing a library for working with EPUB files, since that's a large amount of the work that Storyteller does. After a friend asked for advice on creating EPUB books in Node.js, I decided to publish Storyteller's EPUB library as a standalone NPM package. I really love the EPUB spec, and I think the Node.js developer community deserves an actively maintained library for working with it!<p>[1]: <a href=\"https://smoores.gitlab.io/storyteller\" rel=\"nofollow\">https://smoores.gitlab.io/storyteller</a></p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42411727\">https://news.ycombinator.com/item?id=42411727</a></p>\n<p>Points: 148</p>\n<p># Comments: 43</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"OpenAI whistleblower found dead in San Francisco apartment","url":"https://www.mercurynews.com/2024/12/13/openai-whistleblower-found-dead-in-san-francisco-apartment/","date":1734126989,"author":"mmorearty","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://www.mercurynews.com/2024/12/13/openai-whistleblower-found-dead-in-san-francisco-apartment/\">https://www.mercurynews.com/2024/12/13/openai-whistleblower-found-dead-in-san-francisco-apartment/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42412718\">https://news.ycombinator.com/item?id=42412718</a></p>\n<p>Points: 974</p>\n<p># Comments: 402</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: Performant intracontinental public transport routing in Rust","url":"https://github.com/ellenhp/farebox","date":1734134428,"author":"ellenhp","unread":true,"desc":"","content":"\n<p>I made a public transport route planning program that's capable of planning journeys across Europe or North America! There's only one other FOSS project I know of (MOTIS/Transitous) that can do transit routing at this scale, and in the testing I've performed mine is about 50x faster. I've spent a few weeks on this project now and it's getting to the point where I can show it off, but the API responses need a lot of work before they're usable for any downstream application.<p>Example query (Berlin to Barcelona): <a href=\"https://farebox.airmail.rs/plan/52.5176122,13.4180261/41.380458,2.1455451\" rel=\"nofollow\">https://farebox.airmail.rs/plan/52.5176122,13.4180261/41.380...</a><p>There are some bugs still. Notably, it's not capable of planning the return trip for this route, nor the reverse of the trip from Seattle to NYC that I gave in the blog post.<p>Blog post: <a href=\"https://blog.ellenhp.me/performant-intracontinental-transit-routing-in-rust\" rel=\"nofollow\">https://blog.ellenhp.me/performant-intracontinental-transit-...</a><p>Repo: <a href=\"https://github.com/ellenhp/farebox\">https://github.com/ellenhp/farebox</a><p>Side-note but in the past some have criticized my writing style and it's been a bit hurtful at times but if you have <i>constructive</i> feedback on the blog post I'd appreciate it. I'm trying to get better at writing. :)</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42413464\">https://news.ycombinator.com/item?id=42413464</a></p>\n<p>Points: 162</p>\n<p># Comments: 24</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Making a recommender by just using Polars!","url":"https://www.youtube.com/watch?v=U3Fi6dR_2X8","date":1734136240,"author":"probabl","unread":true,"desc":"","content":"Can we make a movie recommender by just leveraging a DataFrame library? We like to think so, which is also a great excuse for us to dive deeper into Polars. It is a bit unconventional, but that might just be a reason to explore it!\n\nWebsite: https://probabl.ai/\nDiscord: https://discord.probabl.ai/\nLinkedIn: https://www.linkedin.com/company/probabl\nTwitter: https://x.com/probabl_ai\n\nWe also host a podcast called Sample Space, which you can find on your favourite podcast player. All the links can be found here:\nhttps://rss.com/podcasts/sample-space/\n\nIf you're keen to see more videos like this, you can follow us over at  @probabl_ai.","flags":null,"enclosureUrl":"https://www.youtube.com/v/U3Fi6dR_2X8?version=3","enclosureMime":""},{"title":"What is entropy? A measure of just how little we know","url":"https://www.quantamagazine.org/what-is-entropy-a-measure-of-just-how-little-we-really-know-20241213/","date":1734162550,"author":"nsoonhui","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://www.quantamagazine.org/what-is-entropy-a-measure-of-just-how-little-we-really-know-20241213/\">https://www.quantamagazine.org/what-is-entropy-a-measure-of-just-how-little-we-really-know-20241213/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42415386\">https://news.ycombinator.com/item?id=42415386</a></p>\n<p>Points: 334</p>\n<p># Comments: 143</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: Svader – Create GPU-rendered Svelte components","url":"https://github.com/sockmaster27/svader","date":1734174049,"author":"sokmastr","unread":true,"desc":"","content":"\n<p>Svader is a library for rendering 2D shaders on Svelte websites, using either WebGL or WebGPU.<p>It's streamlined for the specific use case of rendering 2D graphics using fragment shaders as an alternative to SVG or the JS canvas API, so it's not meant for doing 3D objects like three.js, for example.<p>This started as something I needed for my own project, but I eventually decided to split it into a separate library. I've since found that this use case fits really well into the Svelte compiler-based approach and its fine-grained reactivity system.<p>In general, I think using shaders like these has some really positive upsides compared to traditional ways of doing graphics on the web — not just for games and stuff, but also for something like data visualizations and aesthetic details. My dream is that one day, you'll see web developers using small, isolated shader components ubiquitously across web applications, just as naturally as something like SVGs are used today.</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42416230\">https://news.ycombinator.com/item?id=42416230</a></p>\n<p>Points: 183</p>\n<p># Comments: 41</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: A simple web game to help learn chords and basic progressions","url":"https://chords.yottanami.com/","date":1734174314,"author":"yottanami","unread":true,"desc":"","content":"\n<p>Hi Hacker News,<p>I've created Chord Nebula, a simple web-based game designed to help users learn and practice piano chords, basic progressions, and harmony fundamentals. The game integrates with MIDI keyboards, allowing you to play chords in real-time and receive immediate feedback based on the key you choose.<p>GitHub Repository: \n<a href=\"https://github.com/yottanami/chord_nebula\">https://github.com/yottanami/chord_nebula</a>\nLive Demo: <a href=\"https://chords.yottanami.com\" rel=\"nofollow\">https://chords.yottanami.com</a><p>Requirements:\nTo use Chord Nebula, you'll need a MIDI keyboard connected to your computer.<p>Current Status:\nChord Nebula is still a simple project. I'm committed to improving it based on user feedback and would greatly appreciate any support or contributions from the community.<p>Looking for Feedback and Collaborators:\nI'm eager to hear your thoughts on Chord Nebula! Whether it's suggestions for new features, improvements, or bug reports, your feedback is invaluable. Additionally, if you're interested in collaborating to enhance the game, feel free to reach out or contribute directly via GitHub.<p>Thanks for taking the time to check out Chord Nebula!</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42416258\">https://news.ycombinator.com/item?id=42416258</a></p>\n<p>Points: 178</p>\n<p># Comments: 39</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Linux Predictions For 2025","url":"https://linux.slashdot.org/story/24/12/14/0058244/linux-predictions-for-2025?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1734181200,"author":"BeauHD","unread":true,"desc":"","content":"BrianFagioli shares a report from BetaNews: As we close out 2024, we Linux enthusiasts are once again looking ahead to what the future holds. While Linux has long been the unsung hero of technology, powering servers, supercomputers, and the cloud, it's also a dominant force in the consumer space, even if many don't realize it. With Android leading the way as the most widely used Linux-based operating system, 2025 is shaping up to be another landmark year for the open source world Here are the predictions mentioned in the article:\n \n- Linux will continue to dominate the enterprise sector\n- Linux will further solidify its role in powering cloud infrastructure, with major providers like AWS and Google Cloud relying on it.\n- Gaming on Linux is set to grow in 2025 \n- Linux will play a major role in AI development \n- Linux's appeal to developers and tech enthusiasts will remain strong\n- The open source movement will grow stronger\n \nWhat additional predictions do you have for Linux in 2025?<p><div class=\"share_submission\" style=\"position:relative;\">\n<a class=\"slashpop\" href=\"http://twitter.com/home?status=Linux+Predictions+For+2025%3A+https%3A%2F%2Flinux.slashdot.org%2Fstory%2F24%2F12%2F14%2F0058244%2F%3Futm_source%3Dtwitter%26utm_medium%3Dtwitter\"><img src=\"https://a.fsdn.com/sd/twitter_icon_large.png\"></a>\n<a class=\"slashpop\" href=\"http://www.facebook.com/sharer.php?u=https%3A%2F%2Flinux.slashdot.org%2Fstory%2F24%2F12%2F14%2F0058244%2Flinux-predictions-for-2025%3Futm_source%3Dslashdot%26utm_medium%3Dfacebook\"><img src=\"https://a.fsdn.com/sd/facebook_icon_large.png\"></a>\n\n\n\n</div></p><p><a href=\"https://linux.slashdot.org/story/24/12/14/0058244/linux-predictions-for-2025?utm_source=rss1.0moreanon&amp;utm_medium=feed\">Read more of this story</a> at Slashdot.</p>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Show HN: Open-sourcing my failed startup Buzee – A file search application","url":"https://github.com/gsidhu/buzee-tauri","date":1734186299,"author":"thatgurjot","unread":true,"desc":"","content":"\n<p>Buzee is a file search application that helps you find your files effortlessly.<p>As a modern-day knowledge worker, I have several thousand documents, presentations and other files on my computer. I built Buzee in my free time to help me weave my way through this maze. I have been using it pretty much everyday since the day I built it - and I love it!<p>I thought I could turn Buzee into a startup. I reached out to offices and helped set it up for them. But it didn't pan out.<p>I am now letting go of this project because I have other priorities in life.<p>Please feel free to do with this project as you wish. I am happy to help you get started with the codebase.<p>Do share what you build. I would love to see it!<p>Cheers</p>\n<hr>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42417330\">https://news.ycombinator.com/item?id=42417330</a></p>\n<p>Points: 207</p>\n<p># Comments: 79</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Conquering Configuration Constraints: Real-World Patterns for Distributing Data... Daniel Hrabovcak","url":"https://www.youtube.com/watch?v=_BkW5OAeXPQ","date":1734190598,"author":"CNCF [Cloud Native Computing Foundation]","unread":true,"desc":"","content":"Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io\n\nConquering Configuration Constraints: Real-World Patterns for Distributing Data at Scale in Kubernetes - Daniel Hrabovcak","flags":null,"enclosureUrl":"https://www.youtube.com/v/_BkW5OAeXPQ?version=3","enclosureMime":""},{"title":"Implementing background jobs","url":"https://www.reddit.com/r/golang/comments/1headif/implementing_background_jobs/","date":1734204466,"author":"/u/jessesv_","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>I have a desktop app using Wails where I want to be able to run long running tasks in the background.</p> <p>Coming from .net, I&#39;ve been looking for packages that are similar to hangfire where i can just do the following</p> <p><code>c# BackgroundJob.Enqueue&lt;IBackgroundJob&gt;(job =&gt; job.Execute()); </code></p> <p>I&#39;ve found a few packages and an implementation using goroutines but not sure how to decide which one to go for.</p> <p><strong>github.com/hibiken/asynq</strong>: It seems the way to enqueue tasks here is to have a payload, task, and task handler, where different tasks are handled by their own handlers based on a list of task types. Does this mean I can have just one task handler and have it handle all tasks?</p> <p><strong>github.com/gammazero/workerpool</strong>: This one seems more straight forward where you just create a new workerpool and can submit functions that perform some work. Makes a lot more sense in my head but maybe I can do the same in asynq?</p> <p><strong>goroutines</strong>: I found a post on stackoverflow where the same was being done with a simple goroutine but the issue was that any further requests would hang until the goroutine completed, it looked like this: </p> <p><code>go func MyHandler(w http.ResponseWriter, r *http.Request) { //handle form values go doSomeBackgroundWork() // this will take 2 or 3 seconds w.WriteHeader(http.StatusOK) } </code></p> <p>Ideally what I would like to have is a backgroundJobService of some sorts where I call an enqueue method and pass the struct that implements something like IBackgroundJob with an Execute method.</p> <p>What would best fit my usecase here?</p> <p>Thanks</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/jessesv_\"> /u/jessesv_ </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1headif/implementing_background_jobs/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1headif/implementing_background_jobs/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"IRATA.ONLINE: A Community for Retro-Computing Enthusiasts","url":"https://irata.online/","date":1734205370,"author":"Bluestein","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://irata.online/\">https://irata.online/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42418982\">https://news.ycombinator.com/item?id=42418982</a></p>\n<p>Points: 204</p>\n<p># Comments: 48</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"The Humble For Loop in Rust","url":"https://www.reddit.com/r/rust/comments/1hecds7/the_humble_for_loop_in_rust/","date":1734210022,"author":"/u/kibwen","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/kibwen\"> /u/kibwen </a> <br/> <span><a href=\"https://blog.startifact.com/posts/humble-for-loop-rust/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1hecds7/the_humble_for_loop_in_rust/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"TidesDB - Open-source high performance, transactional, durable storage engine/column store (v0.2.0b RELEASE!)","url":"https://www.reddit.com/r/linux/comments/1heceqz/tidesdb_opensource_high_performance_transactional/","date":1734210091,"author":"/u/diagraphic","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/diagraphic\"> /u/diagraphic </a> <br/> <span><a href=\"/r/C_Programming/comments/1hecakw/tidesdb_opensource_high_performance_transactional/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/linux/comments/1heceqz/tidesdb_opensource_high_performance_transactional/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Announcing General Availability of Bitnami Premium","url":"https://www.reddit.com/r/kubernetes/comments/1hecotc/announcing_general_availability_of_bitnami_premium/","date":1734210867,"author":"/u/onedr0p","unread":true,"desc":"","content":"<table> <tr><td> <a href=\"https://www.reddit.com/r/kubernetes/comments/1hecotc/announcing_general_availability_of_bitnami_premium/\"> <img src=\"https://external-preview.redd.it/mmNnDhSlpmLzkAIOmWfx9XPI03SgjCnejIoZDi5xExE.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=921213bbada1c36e1db4f5ddddae58f250ed84da\" alt=\"Announcing General Availability of Bitnami Premium\" title=\"Announcing General Availability of Bitnami Premium\" /> </a> </td><td> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/onedr0p\"> /u/onedr0p </a> <br/> <span><a href=\"https://blog.bitnami.com/2024/11/bitnami-premium.html?m=1\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1hecotc/announcing_general_availability_of_bitnami_premium/\">[comments]</a></span> </td></tr></table>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"SeekStorm - an open-source, sub-millisecond full-text search library & multi-tenancy server","url":"https://www.reddit.com/r/rust/comments/1hed3g5/seekstorm_an_opensource_submillisecond_fulltext/","date":1734211996,"author":"/u/kibwen","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/kibwen\"> /u/kibwen </a> <br/> <span><a href=\"https://github.com/SeekStorm/SeekStorm\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1hed3g5/seekstorm_an_opensource_submillisecond_fulltext/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Threads Beat Async/Await","url":"https://www.reddit.com/r/programming/comments/1heeq4r/threads_beat_asyncawait/","date":1734216639,"author":"/u/self","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/self\"> /u/self </a> <br/> <span><a href=\"http://lucumr.pocoo.org/2024/11/18/threads-beat-async-await\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/programming/comments/1heeq4r/threads_beat_asyncawait/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"How easily can Go exe be decompiled/reversed compared to other languages ?","url":"https://www.reddit.com/r/golang/comments/1hef3xg/how_easily_can_go_exe_be_decompiledreversed/","date":1734217755,"author":"/u/D4kzy","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>I noticed that when I compile my binaries for windows with GO, some of the path and package name are in the binary itself.</p> <p>When I use -trimpath flag it gets better, but still there is some stuff.</p> <p>It made me think how easy it is to reverse GO exe ? How to make it more time consuming for bad people ?</p> <p>I know everything can be reversed with enough time. I know Java and python (pyinstaller) default exe can be literally decompiled to get a good portion of the source code. I wonder the case with Go ...</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/D4kzy\"> /u/D4kzy </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hef3xg/how_easily_can_go_exe_be_decompiledreversed/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hef3xg/how_easily_can_go_exe_be_decompiledreversed/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"School smartphone ban results in better sleep and improved mood: study","url":"https://www.york.ac.uk/news-and-events/news/2024/research/school-smartphone-ban-better-sleep/","date":1734220304,"author":"jonatron","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://www.york.ac.uk/news-and-events/news/2024/research/school-smartphone-ban-better-sleep/\">https://www.york.ac.uk/news-and-events/news/2024/research/school-smartphone-ban-better-sleep/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42420352\">https://news.ycombinator.com/item?id=42420352</a></p>\n<p>Points: 879</p>\n<p># Comments: 564</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Modifying slice argument","url":"https://www.reddit.com/r/golang/comments/1heirl0/modifying_slice_argument/","date":1734229320,"author":"/u/fleekonpoint","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>If I have a slice as an argument to a function and I want to modify the slice (so that the changes to the slice will be available after the function call ends), are there just 2 ways to accomplish this?</p> <ol> <li>Return a new slice from the function</li> <li>Pass a pointer to the slice and modify the slice via the pointer</li> </ol> <p>``` func main() { s := make([]int, 0)</p> <pre><code>// ModifyPointer(&amp;s) // or // s = ModifyReturn(s) // should return 1,2,3,4,5 fmt.Println(s) </code></pre> <p>}</p> <p>func ModifyPointer(s <em>[]int) { for i := range 5 { *s = append(</em>s, 1) } }</p> <p>func ModifyReturn(s []int) []int { for i := range 5 { s = append(s, 1) } </p> <pre><code>return s </code></pre> <p>} ```</p> <p>Are these correct? And is one preferred over the other? </p> <p>EDIT: Also, if I don&#39;t have to grow or shrink the slice, I don&#39;t need either option right? Since the underlying memory address for the slice data won&#39;t change?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/fleekonpoint\"> /u/fleekonpoint </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1heirl0/modifying_slice_argument/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1heirl0/modifying_slice_argument/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Linux 6.6.66 LTS Kernel Released With New Hardware Support & Many Fixes","url":"https://www.reddit.com/r/linux/comments/1heittm/linux_6666_lts_kernel_released_with_new_hardware/","date":1734229545,"author":"/u/unixbhaskar","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/unixbhaskar\"> /u/unixbhaskar </a> <br/> <span><a href=\"https://www.phoronix.com/news/Linux-6.6.66-LTS-Released\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/linux/comments/1heittm/linux_6666_lts_kernel_released_with_new_hardware/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Tenstorrent and the State of AI Hardware Startups","url":"https://irrationalanalysis.substack.com/p/tenstorrent-and-the-state-of-ai-hardware","date":1734231598,"author":"zdw","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://irrationalanalysis.substack.com/p/tenstorrent-and-the-state-of-ai-hardware\">https://irrationalanalysis.substack.com/p/tenstorrent-and-the-state-of-ai-hardware</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42421157\">https://news.ycombinator.com/item?id=42421157</a></p>\n<p>Points: 198</p>\n<p># Comments: 87</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"📂 mc: Modern File Copying Tool in Rust","url":"https://www.reddit.com/r/rust/comments/1hejzp4/mc_modern_file_copying_tool_in_rust/","date":1734233630,"author":"/u/WeatherZealousideal5","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Hey everyone! 🚀 I just released <strong>mc</strong>, a fast and user-friendly file copying tool written in Rust. Think of it as a modern alternative to <del>cp</del> but with better UX! Unlike <em>cp</em> it shows progress, verifies integrity, and supports advanced features.</p> <h1>🔑 Key Features:</h1> <ul> <li>Copy files or entire folders effortlessly.</li> <li>🔄 <strong>Progress bar</strong> to keep you updated.</li> <li>🔐 <strong>Hash verification</strong> to ensure data integrity.</li> <li>🔗 Support for <strong>hard</strong> and <strong>symbolic links</strong>.</li> <li>⚡ Faster than Finder or Explorer.</li> <li>🛏️ Keeps your system awake during large transfers.</li> </ul> <h1>Install:</h1> <p>Head over to the <a href=\"https://github.com/thewh1teagle/mc/releases/latest\">Releases</a> page for installation options or explore the <a href=\"https://github.com/thewh1teagle/mc\">source code</a> on GitHub.</p> <p>I’ve focused on creating a great UX, but there’s always room to grow! I’m actively working on improvements (check out the <a href=\"https://github.com/thewh1teagle/mc/issues\">issues</a>). Feedback and contributions are welcome! ❤️</p> <p>Would love to hear your thoughts! 😊</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/WeatherZealousideal5\"> /u/WeatherZealousideal5 </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1hejzp4/mc_modern_file_copying_tool_in_rust/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1hejzp4/mc_modern_file_copying_tool_in_rust/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Data Flow and Motion in High-Performance Computing","url":"https://medium.com/@kyodo-tech/data-flow-and-motion-in-high-performance-computing-6ec8340c38e9?source=rss-ac02ab142942------2","date":1734237430,"author":"Kyodo Tech","unread":true,"desc":"","content":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NvY_Yl_JB6sA2U5DwgRCfg.png\" /></figure><p>In high-performance computing (HPC), the disparity between compute speed and data movement dominates performance considerations. CPUs execute billions of instructions per second, yet moving data — whether between memory levels or across subsystems — remains orders of magnitude slower. This discrepancy is rooted in physical constraints, such as the speed of light and the time required for electrons to traverse memory buses. Memory bandwidth, latency, and caching hierarchy (L1, L2, L3 caches) are foundational in determining system performance. Understanding and optimizing these factors is central to streamlining data flow and minimizing data motion. The challenge becomes even more significant when working in managed languages like Go, where garbage collection and memory abstraction add further complexity.</p><h3>The Cost of Data Motion vs. Compute</h3><p>The principle that “compute is cheaper than data motion” arises because modern processors are highly optimized for localized operations on data already present in caches. Moving data between caches, main memory, or across interconnects introduces latency that dwarfs computation times. For example, accessing L1 cache can take as little as 1–3 CPU cycles, while accessing main memory may take 100+ cycles. These latencies magnify when data transfers traverse NUMA nodes or I/O subsystems.</p><h4>Memory Bandwidth and Caching</h4><p>Memory bandwidth refers to the rate at which data can be read from or written to memory. It becomes a bottleneck when a program’s working set exceeds the capacity of higher-level caches. Memory-aware optimizations aim to bridge this gap by focusing on how data is accessed and structured.</p><ul><li><strong>Exploiting Cache Hierarchies:</strong> Structure data to maximize temporal and spatial locality. Temporal locality refers to reusing the same data frequently, while spatial locality involves accessing contiguous memory regions. For instance, iterating over a matrix row-wise rather than column-wise takes advantage of how modern CPUs prefetch adjacent memory blocks, drastically reducing cache misses.</li><li><strong>Avoiding Cache Pollution:</strong> Access only the data required for computation, reducing unnecessary evictions of useful cache lines. Polluting the cache with extraneous data results in thrashing, where useful data is repeatedly evicted and reloaded. In Go, this might involve careful iteration patterns for slices and maps to ensure efficient cache usage.</li><li><strong>Leverage Blocking Techniques:</strong> Divide computations into chunks that fit within the L1 or L2 cache size, minimizing the need for repeated memory accesses. For example, matrix multiplication algorithms can be restructured to process submatrices that fit entirely into cache.</li><li><strong>Profile and Optimize Memory Behavior:</strong> Tools such as perf, pprof, and cache simulators can identify bandwidth bottlenecks and optimize data placement. Profiling also reveals whether TLB misses—caused by frequent page table lookups—are affecting performance. This insight is vital when processing large datasets in Go, where heap allocations may exacerbate memory fragmentation.</li></ul><h4>Speed-of-Light Constraints</h4><p>Data motion is constrained by physical distances within the hardware. For example, even within a single CPU, moving data between registers, caches, and RAM involves electrical signal propagation limited by the speed of light. At large scales, such as distributed systems or memory-bound HPC tasks, these propagation delays dominate execution times. Optimizing local data usage minimizes these delays and improves system efficiency.</p><h3>Streamlining Data Flow</h3><p>Streamlining data flow requires designing systems to process data efficiently within the constraints of hardware and software. In Go, the choice of data structures, serialization formats, and concurrency primitives directly impacts data flow and execution efficiency.</p><h4>Serialization: JSON vs. Protobuf vs. FlatBuffers</h4><p>Serialization formats are a key consideration in data-intensive applications. JSON is widely used but inefficient due to its verbose structure and reliance on runtime parsing. Protobuf, in contrast, is compact and well-suited for binary serialization but involves additional memory copies during encoding and decoding. FlatBuffers take this further by enabling zero-copy deserialization, which avoids unnecessary data duplication entirely.</p><ul><li><strong>JSON:</strong> Best for human-readable data exchange but expensive in terms of data motion and parsing. Large JSON payloads frequently trigger multiple allocations during deserialization in Go.</li><li><strong>Protobuf:</strong> Compact and fast, with schema enforcement. However, Protobuf involves intermediate memory allocations due to the need for temporary message structures during decoding.</li><li><strong>FlatBuffers:</strong> Ideal for HPC workloads where zero-copy deserialization reduces data motion and garbage collection pressure. FlatBuffers store serialized data in a manner that allows direct access without parsing.</li></ul><p>For systems requiring high throughput, FlatBuffers often outperform Protobuf by avoiding redundant memory copies, especially for large datasets. However, JSON remains useful for debugging and configuration due to its human-readable format.</p><p>Another <strong>pattern to Avoid</strong> is using JSON for serialization in high-throughput systems.</p><pre>jsonData, _ := json.Marshal(data)<br>json.Unmarshal(jsonData, &amp;parsedData)</pre><p>A <strong>better alternative</strong> is using FlatBuffers for zero-copy deserialization.</p><pre>// Serialize using FlatBuffers<br>builder := flatbuffers.NewBuilder(1024)<br>... // FlatBuffers schema-based data setup<br>buf := builder.FinishedBytes()<br><br>// Access serialized data without copying<br>flatData := GetRootAsFlatData(buf, 0)<br>value := flatData.SomeField()</pre><p>This eliminates the overhead of intermediate allocations and redundant parsing.</p><h4>In-Place Data Transformations</h4><p>Modifying data in place rather than creating copies avoids unnecessary memory allocations and reduces data motion. In Go, this practice is particularly important because it minimizes interactions with the garbage collector. For instance:</p><p>A common <strong>pattern to avoid</strong> is duplicating data during transformations.</p><pre>func doubleSlice(data []int) []int {<br>    result := make([]int, len(data))<br>    for i := range data {<br>        result[i] = data[i] * 2<br>    }<br>    return result<br>}</pre><p>The <strong>better alternative</strong> modifies the data in place.</p><pre>func doubleSlice(data []int) {<br>    for i := range data {<br>        data[i] *= 2<br>    }<br>}</pre><p>This approach eliminates redundant allocations and keeps the data within the cache hierarchy, significantly improving performance in iterative computations. Combining this technique with batched operations ensures that data remains cache-resident during intensive computations.</p><h4>Favor Asynchronous Communication</h4><p>Asynchronous communication can eliminate unnecessary blocking and improve throughput in applications where tasks can progress independently. In Go, channels are the primary mechanism for implementing asynchronous workflows. They decouple sender and receiver goroutines, allowing the system to process data in a pipeline or fan-out/fan-in pattern. However, note that managing concurrency well is equally important, poorly implemented, it can amplify contention.</p><p>Note a <strong>pattern to avoid</strong> with channels is coupling goroutines with frequent intercommunication via channels.</p><pre>func worker(input &lt;-chan int, output chan&lt;- int) {<br>    for num := range input {<br>        output &lt;- num * 2<br>    }<br>}</pre><p>The <strong>better alternative</strong> uses partitioned data processing with independent goroutines.</p><pre>func worker(data []int) {<br>    for i := range data {<br>        data[i] *= 2<br>    }<br>}<br><br>func main() {<br>    data := make([]int, 1000)<br>    chunkSize := 100<br><br>    var wg sync.WaitGroup<br>    for i := 0; i &lt; len(data); i += chunkSize {<br>        wg.Add(1)<br>        go func(slice []int) {<br>            defer wg.Done()<br>            worker(slice)<br>        }(data[i:min(i+chunkSize, len(data))])<br>    }<br>    wg.Wait()<br>}</pre><p>This minimizes synchronization overhead while maintaining concurrency. Asynchronous patterns like this reduce contention and improve scalability by allowing different stages of computation to progress concurrently.</p><h4>Minimize Inter-Goroutine Communication</h4><p>While Go’s lightweight goroutines make concurrency easy, excessive communication between goroutines can lead to bottlenecks. Minimize inter-goroutine communication by designing systems where each goroutine operates independently on localized data.</p><h4>Avoid Locks and Mutexes</h4><p>Locks and mutexes serialize access to shared resources, removing concurrency benefits and increasing contention. Instead, use channels for synchronization or atomic operations for simple counters. When data sharing is unavoidable, minimize critical sections to reduce contention.</p><h3>Scalability as an Architecture Choice</h3><p>Designing for scalability begins at the architectural level. For single-application designs, consider:</p><ul><li><strong>Stateless Services:</strong> Avoid coupling application state to individual processes. Use external stores for state management, enabling horizontal scaling.</li><li><strong>Partitioning Workloads:</strong> Divide tasks into smaller, independent units that can be distributed across multiple worker processes or threads.</li><li><strong>Backpressure Management:</strong> Use bounded channels or rate-limiting techniques to ensure that the system can handle varying workloads without becoming overwhelmed.</li></ul><h3>Memory Allocation and Garbage Collection in Go</h3><p>Go’s garbage collector (GC) is optimized for low-latency applications, but HPC workloads often require precise control over memory to minimize GC interruptions.</p><h4>Escape Analysis</h4><p>Escape analysis determines whether a variable can be allocated on the stack instead of the heap. Stack allocations are much cheaper as they avoid GC involvement. Writing functions that limit pointer escapes helps reduce GC overhead:</p><pre>func createBuffer(size int) []byte {<br>    buf := make([]byte, size)<br>    return buf // Avoid returning a pointer to escape heap allocation<br>}</pre><p>Profiling escape analysis in Go with go build -gcflags=&quot;-m&quot; identifies opportunities for stack allocation. Avoiding heap allocations in performance-critical code paths ensures consistent, low-latency execution.</p><h4>Object Pooling</h4><p>Using sync.Pool for object pooling reduces heap allocations by recycling objects. This approach is particularly effective for short-lived objects like buffers or temporary data structures.</p><p>The <strong>pattern to avoid</strong> is frequent heap allocations leading to GC overhead.</p><pre>func createBuffers(count int, size int) [][]byte {<br>    buffers := make([][]byte, count)<br>    for i := range buffers {<br>        buffers[i] = make([]byte, size)<br>    }<br>    return buffers<br>}</pre><p>A <strong>better alternative</strong> preallocates memory and recycle buffers using sync.Pool.</p><pre>var bufferPool = sync.Pool{<br>    New: func() interface{} {<br>        return make([]byte, 1024)<br>    },<br>}<br><br>func process() {<br>    buf := bufferPool.Get().([]byte)<br>    defer bufferPool.Put(buf)<br>    // Process data with buf<br>}</pre><p>Pooling reduces heap pressure and improves memory reuse, i.e. reduces memory fragmentation and ensures that buffers are allocated contiguously, maximizing cache performance. Over-pooling, however, may retain unused objects, inflating memory usage and requiring careful monitoring.</p><h4>Managing Allocation Patterns</h4><ul><li><strong>Batch Allocation:</strong> Allocate slices and objects in large batches to amortize allocation overhead. Batch allocation improves cache performance by reducing scattered allocations.</li><li><strong>Avoid Fragmentation:</strong> Use contiguous slices rather than fragmented structures to maintain cache-friendly layouts. Fragmentation leads to increased TLB misses and degraded memory access times.</li><li><strong>Minimize Pointer Chaining:</strong> Excessive pointers degrade cache performance due to scattered memory accesses. Flattening data structures minimizes this overhead.</li></ul><p>An exmaple <strong>pattern to avoid</strong> that is not immediately obvious: Iterating over a 2D slice inefficiently by accessing columns (which leads to non-contiguous memory access).</p><pre>for j := 0; j &lt; len(matrix[0]); j++ {<br>    for i := 0; i &lt; len(matrix); i++ {<br>        matrix[i][j] *= 2<br>    }<br>}</pre><p>A <strong>better alternative</strong> iterates row-by-row to leverage spatial locality.</p><pre>for i := 0; i &lt; len(matrix); i++ {<br>    for j := 0; j &lt; len(matrix[0]); j++ {<br>        matrix[i][j] *= 2<br>    }<br>}</pre><p>Adjacent elements in memory are accessed sequentially, reducing cache misses.</p><h4>Memory Alignment</h4><p>Memory alignment ensures that data structures are positioned at memory addresses that are multiples of their size. Misaligned data can lead to performance penalties on some architectures. Go’s memory allocator aligns objects to their size by default, but manual alignment may be necessary for specific use cases, such as SIMD operations.</p><p>To aid memory alignment, <strong>pattern to avoid</strong> is using pointer-heavy or fragmented data structures, leading to scattered memory access.</p><pre>type Node struct {<br>    Value int<br>    Next  *Node<br>}</pre><p>A <strong>better alternative</strong> is to use contiguous slices for data storage where possible.</p><pre>type Node struct {<br>    Values []int<br>}</pre><p>Flattening structures improves cache performance and minimizes pointer dereferencing.</p><h4>GC Tuning in HPC</h4><p>Garbage collection in Go introduces predictable but non-negligible latency. Tuning GC behavior for HPC workloads involves:</p><ul><li><strong>Reduce Allocation Frequency:</strong> Preallocate memory and reuse objects to reduce pressure on the GC.</li><li><strong>Profile GC Activity:</strong> Use pprof to identify regions with high allocation rates and optimize them to minimize GC overhead.</li><li><strong>Adjust GOGC:</strong> The GOGC environment variable controls GC aggressiveness. Lowering it reduces memory usage but increases GC frequency.</li></ul><h3>Managing Performance Counters and Logging</h3><p>Performance counters and logging are essential for understanding application behavior. However, excessive instrumentation can degrade performance, especially in HPC environments.</p><h4>Lock-Free Metrics Collection</h4><p>Using atomic operations for counters ensures thread-safe, low-latency updates without locks:</p><pre>var requestCount uint64<br><br>func incrementRequestCount() {<br>    atomic.AddUint64(&amp;requestCount, 1)<br>}</pre><p>Atomic Compare-and-Swap (CAS) operations can also be used for complex metrics updates, maintaining high performance even under heavy contention.</p><h4>Efficient Logging</h4><p>Logging should balance granularity and overhead. Techniques include:</p><ul><li><strong>Structured Logging:</strong> Use lightweight formats like JSON for logs, ensuring they can be parsed efficiently.</li><li><strong>Batch Logging:</strong> Aggregate log entries in memory and write them in batches to reduce I/O overhead.</li><li><strong>Asynchronous Logging:</strong> Offload log writing to separate goroutines to minimize impact on application performance.</li></ul><h4>Push-Based Metrics Collection</h4><p>Aggregating and occasionally pushing metrics balances real-time monitoring with low overhead. For example:</p><pre>func reportMetrics() {<br>    total := atomic.LoadUint64(&amp;requestCount)<br>    fmt.Printf(&quot;Total Requests: %d\\n&quot;, total)<br>}</pre><p>Batching metrics ensures that reporting does not interfere with computation, aligning with lock-free principles for minimal contention.</p><h3>Conclusion</h3><p>Optimizing data flow and minimizing data motion requires understanding hardware limitations, such as memory bandwidth and cache hierarchies. Go, while a garbage-collected language, is well-suited for HPC when its memory management features are leveraged effectively. Techniques like serialization optimization, object pooling, in-place transformations, asynchronous communication, and lock-free metrics collection help Go applications achieve high throughput and low latency. When paired with careful profiling and tuning, these strategies elevate Go as a practical choice for HPC, balancing developer productivity with computational efficiency.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6ec8340c38e9\" width=\"1\" height=\"1\" alt=\"\">","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"The No-Feedback Rejection Stings","url":"https://www.reddit.com/r/programming/comments/1help42/the_nofeedback_rejection_stings/","date":1734239957,"author":"/u/BeautifulAnywhere392","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/BeautifulAnywhere392\"> /u/BeautifulAnywhere392 </a> <br/> <span><a href=\"https://mastermentee.substack.com/p/the-no-feedback-rejection-stings?r=2lsctx\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/programming/comments/1help42/the_nofeedback_rejection_stings/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"What's one thing you wish there was a GUI for?","url":"https://www.reddit.com/r/linux/comments/1hemy47/whats_one_thing_you_wish_there_was_a_gui_for/","date":1734245066,"author":"/u/walterblackkk","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>We all know how capable the command line is and many of us even prefer it over graphical apps. But anyway there is no harm in having more options, and I think it&#39;s ok to prefer GUIs for all or certain tasks, even for advanced system administration, monitoring and the like. What is one area you wish to see more gui options for? This can potentially inspire developers to create such apps. </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/walterblackkk\"> /u/walterblackkk </a> <br/> <span><a href=\"https://www.reddit.com/r/linux/comments/1hemy47/whats_one_thing_you_wish_there_was_a_gui_for/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/linux/comments/1hemy47/whats_one_thing_you_wish_there_was_a_gui_for/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"When a Crystal Ball Isn't Enough to Make You Rich","url":"https://elmwealth.com/crystal-ball/","date":1734247357,"author":"EvgeniyZh","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://elmwealth.com/crystal-ball/\">https://elmwealth.com/crystal-ball/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42422077\">https://news.ycombinator.com/item?id=42422077</a></p>\n<p>Points: 197</p>\n<p># Comments: 105</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"How similar is Rust to C++?","url":"https://www.reddit.com/r/rust/comments/1henk91/how_similar_is_rust_to_c/","date":1734247775,"author":"/u/Dramatic_Zebra5107","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Up untill know, I&#39;ve coded mostly in Java and Python. However, I work on mathematical stuff - data science/MILP optimizations/... which needs to be performant. This is taken care of for me by libraries and solvers, but I&#39;d like to learn to write performant code anyway.</p> <p>Thus, I&#39;d like to learn Rust or C++ and I plan implementing algorithms like simplex method, differential equation solvers, etc.</p> <p>From what I read, Rust sounds like it would be more fun than C++, which is important to me. On the other hand, most of the solvers/libraries I use are written in C/C++, so knowing that language could be a huge plus.</p> <p>So my question is - if I learn and use Rust for these personal projects, how hard would it be to switch to C/C++ if such need arises in my work?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Dramatic_Zebra5107\"> /u/Dramatic_Zebra5107 </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1henk91/how_similar_is_rust_to_c/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1henk91/how_similar_is_rust_to_c/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Tech Notes: The Jujutsu version control system","url":"https://www.reddit.com/r/programming/comments/1hentx8/tech_notes_the_jujutsu_version_control_system/","date":1734249003,"author":"/u/Alexander_Selkirk","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Alexander_Selkirk\"> /u/Alexander_Selkirk </a> <br/> <span><a href=\"https://neugierig.org/software/blog/2024/12/jujutsu.html\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/programming/comments/1hentx8/tech_notes_the_jujutsu_version_control_system/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"I turned my 11-year-old Sony Xperia M Dual into a Mini Home Lab Server with LineageOS + Termux + Magisk","url":"https://www.reddit.com/r/linux/comments/1heovhy/i_turned_my_11yearold_sony_xperia_m_dual_into_a/","date":1734253753,"author":"/u/Musheer360","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Musheer360\"> /u/Musheer360 </a> <br/> <span><a href=\"/r/selfhosted/comments/1heo77c/i_turned_my_11yearold_sony_xperia_m_dual_into_a/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/linux/comments/1heovhy/i_turned_my_11yearold_sony_xperia_m_dual_into_a/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Canonical Kubernetes Platform v1.32 stable is announced!","url":"https://www.reddit.com/r/kubernetes/comments/1hep9pd/canonical_kubernetes_platform_v132_stable_is/","date":1734255593,"author":"/u/HomayoonAlm","unread":true,"desc":"","content":"<table> <tr><td> <a href=\"https://www.reddit.com/r/kubernetes/comments/1hep9pd/canonical_kubernetes_platform_v132_stable_is/\"> <img src=\"https://external-preview.redd.it/HY1w9a9IkUyAEh8ke1BrwQ8bOzm3i2YZuEBnZrsaEpk.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=d9d4fcd7572135a3149092a0251011c38e388eba\" alt=\"Canonical Kubernetes Platform v1.32 stable is announced!\" title=\"Canonical Kubernetes Platform v1.32 stable is announced!\" /> </a> </td><td> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/HomayoonAlm\"> /u/HomayoonAlm </a> <br/> <span><a href=\"https://itnext.io/seamless-cluster-creation-management-announcing-canonical-kubernetes-platform-a6a03f345ca5\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1hep9pd/canonical_kubernetes_platform_v132_stable_is/\">[comments]</a></span> </td></tr></table>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Key Value store alternative to Redis for Golang","url":"https://www.reddit.com/r/golang/comments/1hepxjo/key_value_store_alternative_to_redis_for_golang/","date":1734258625,"author":"/u/Efficient-Pea-2990","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>We have a REST API Server written in Golang. We are currently using Redis for serving Access and Refresh token keys. We only store keys(ids) and values. We heard about Bitcask, Badger, BoltDB etc. It will be much helpful, if any one can share their experience on using Go based KeyValue store/database.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Efficient-Pea-2990\"> /u/Efficient-Pea-2990 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hepxjo/key_value_store_alternative_to_redis_for_golang/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hepxjo/key_value_store_alternative_to_redis_for_golang/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Favorite CKA Notes","url":"https://www.reddit.com/r/kubernetes/comments/1heqqmq/favorite_cka_notes/","date":1734262145,"author":"/u/NtzsnS32","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>I’m preparing for the CKA exam and looking for detailed, well-organized resources. When I studied for other certifications, I used to create notebooks so comprehensive I could just read through them and know everything I needed to pass—practical, exam-focused, and memorable. They didn’t cover every edge case but were complete enough to function as a one-stop resource. For example, my Terraform Associate notes were around 7,000 words, and I imagine a comparable CKA would be 2× in length at least.</p> <p>For CKA, I haven’t found anything similar yet. Most resources either too high level, or are so dense it’s hard to distinguish what’s important for the exam. I’m looking for something that explains key concepts, includes practical examples, and covers what’s essential to know—without being overwhelming.</p> <p>If anyone has come across a resource or notes like this, I’d love to hear about your favorite ones.</p> <p>Thanks!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/NtzsnS32\"> /u/NtzsnS32 </a> <br/> <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1heqqmq/favorite_cka_notes/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1heqqmq/favorite_cka_notes/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"In-Depth Ruby Concurrency: Navigating the Ruby Concurrency Landscape","url":"https://jpcamara.com/2024/12/14/my-rubyconf-talk.html","date":1734263181,"author":"chmaynard","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://jpcamara.com/2024/12/14/my-rubyconf-talk.html\">https://jpcamara.com/2024/12/14/my-rubyconf-talk.html</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42422942\">https://news.ycombinator.com/item?id=42422942</a></p>\n<p>Points: 116</p>\n<p># Comments: 13</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Xfce 4.20 released","url":"https://www.reddit.com/r/linux/comments/1hernd5/xfce_420_released/","date":1734265913,"author":"/u/myoldacchad1bioupvts","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/myoldacchad1bioupvts\"> /u/myoldacchad1bioupvts </a> <br/> <span><a href=\"https://www.xfce.org/about/news/?post=1734220800\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/linux/comments/1hernd5/xfce_420_released/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"FlowSchema examples needed","url":"https://www.reddit.com/r/kubernetes/comments/1herw9j/flowschema_examples_needed/","date":1734266858,"author":"/u/pachirulis","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Any good examples of ratelimiting (rejecting abusers) service accounts with FlowSchema? (Ideally with wildcards) I can&#39;t get it to work, at best slows down some requests but never reject them</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/pachirulis\"> /u/pachirulis </a> <br/> <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1herw9j/flowschema_examples_needed/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1herw9j/flowschema_examples_needed/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Announcing the GoDev Non-Stop 30 Challenge! 🚀","url":"https://www.reddit.com/r/golang/comments/1hes0f7/announcing_the_godev_nonstop_30_challenge/","date":1734267288,"author":"/u/Much-Escape3554","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>What is it?</p> <p>For 30 days straight—January 1 to January 31, 2025—I’ll be solving your toughest Go development tasks for free! From distributed systems to Kafka pipelines, MongoDB integrations, ClickHouse analytics, and gRPC APIs—I’m here to code, deliver, and inspire.</p> <p>How to Participate?</p> <pre><code>Submit your Go coding challenges before December 31, 2024, 23:59. Challenges should focus on real-world high-load tasks, performance bottlenecks, or interesting problem spaces. Every solution will be open source, cleanly implemented, documented, and tested. You get working code and fresh insights. </code></pre> <p>Examples of Tasks:</p> <pre><code>Build a distributed task scheduler with Kafka and MongoDB. Implement budget and frequency limiters for RTB systems. Develop real-time monitoring tools with Prometheus and Grafana. </code></pre> <p>⚙️ What’s in it for you?</p> <pre><code>A robust, production-quality solution for your problem. A chance to collaborate on exciting open-source projects. Recognition and visibility in the Go developer community. </code></pre> <p>Limited Slots! If there aren’t enough tasks, I’ll generate synthetic ones with ChatGPT. If submissions exceed my capacity, I’ll pick the most intriguing challenges. </p> <p>Drop your ideas as GitHub issues here: <a href=\"https://github.com/devflex-pro/01-2025-Challenge\">[GitHub]</a></p> <p>Let’s build, share, and inspire—Non-Stop 30 starts soon! </p> <p>Spread the word, tag your friends, and submit your tasks!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Much-Escape3554\"> /u/Much-Escape3554 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hes0f7/announcing_the_godev_nonstop_30_challenge/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hes0f7/announcing_the_godev_nonstop_30_challenge/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Understanding Round Robin DNS","url":"https://www.reddit.com/r/programming/comments/1hesdx8/understanding_round_robin_dns/","date":1734268664,"author":"/u/stackoverflooooooow","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/stackoverflooooooow\"> /u/stackoverflooooooow </a> <br/> <span><a href=\"https://blog.hyperknot.com/p/understanding-round-robin-dns\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/programming/comments/1hesdx8/understanding_round_robin_dns/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Talk to me about macros","url":"https://www.reddit.com/r/rust/comments/1heswfv/talk_to_me_about_macros/","date":1734270446,"author":"/u/barrowburner","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Hello Rust community,</p> <p>I&#39;m writing to help clarify and clear up my misconceptions around macros. I am taking my first steps with Rust, and I am experiencing a moderate aversion to the whole concept of macros. Something about them doesn&#39;t smell quite right: they feel like they solve a problem that with a bit of thought could have been solved in another, better way. They feel like a duct-tape solution. However, I don&#39;t really know enough about comptime (Zig: more below) or macros to judge them on their merits and deficiencies. I don&#39;t have enough context or understanding of macros, in any language, to know how to frame my thoughts or questions.</p> <p>My hobby language for the last year or so has been Zig, and while it would be a stretch to say I&#39;m competent with Zig, it is fair to say that I&#39;m comfortable with the language, and I do very much enjoy working with it. Zig is known for having eschewed macros entirely, and for having replaced them with its comptime keyword. <a href=\"https://zig.news/edyu/wtf-is-zig-comptime-and-inline-257b\">Here</a> is a great intro to comptime for those who are curious. This feels well designed: it basically allows you to evaluate Zig code at compile time and negates the requirement for macros entirely. Again, though, this is not much more than a feeling; I don&#39;t have enough experience with them to discuss their merits, and I have no basis for comparison with other solutions.</p> <p>I would like to ask for your opinions, hot takes, etc. regarding macros:</p> <ul> <li><p>What do you like/dislike about macros in Rust?</p></li> <li><p>for those of you with experience in both Rust and Zig: any thoughts on one&#39;s approach vs the other&#39;s?</p></li> <li><p>for those of you with experience in both Rust and C++: any thoughts on how Rust may or may not have improved on the cpp implementation of macros?</p></li> <li><p>if anyone has interesting articles, podcasts, blogs, etc. that discuss macros, I&#39;d love to read through</p></li> </ul> <p>Thanks in advance for taking the time!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/barrowburner\"> /u/barrowburner </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1heswfv/talk_to_me_about_macros/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1heswfv/talk_to_me_about_macros/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"How to Make Coding Fun and Addictive","url":"https://blog.algomaster.io/p/how-to-make-coding-fun-and-addictive","date":1734271256,"author":"Ashish Pratap Singh","unread":true,"desc":"","content":"<p>If you&#8217;re like most people, you probably didn&#8217;t start coding because you were genuinely passionate about it.</p><p>Maybe you got into it out of necessity, stumbled into it by chance, or felt pressured because everyone else was doing it. </p><p>Without any built-in motivation, coding can easily feel like a tough, tedious chore.</p><p>But have you ever wondered if coding could actually feel as <strong>fun and addictive</strong> as playing your favorite video games or scrolling through Instagram?</p><p>What if I told you there&#8217;s a way to make your brain <em>want</em> to code just as much as it craves games or social media?</p><p>For some context &#8212; in my coding career I&#8217;ve learned <strong>9 programming languages</strong>, built over <strong>40 coding projects</strong>, solved more than <strong>1500 LeetCode problems</strong>, and <strong>cracked interviews</strong> at multiple big tech companies.</p><p>But I didn&#8217;t start out this way.</p><p>In fact, I was the opposite. Before starting my coding journey, I was a video game addict, spending hours playing games like FIFA and Need for Speed, and a chronic social media scroller.</p><p>So, how did I go from video games to becoming hooked to coding?</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ea84ed7-b543-49d7-aea9-317d11e1f871_630x354.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ea84ed7-b543-49d7-aea9-317d11e1f871_630x354.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ea84ed7-b543-49d7-aea9-317d11e1f871_630x354.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ea84ed7-b543-49d7-aea9-317d11e1f871_630x354.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ea84ed7-b543-49d7-aea9-317d11e1f871_630x354.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ea84ed7-b543-49d7-aea9-317d11e1f871_630x354.png\" width=\"643\" height=\"361.3047619047619\" data-attrs=\"{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3ea84ed7-b543-49d7-aea9-317d11e1f871_630x354.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:354,&quot;width&quot;:630,&quot;resizeWidth&quot;:643,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}\" class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ea84ed7-b543-49d7-aea9-317d11e1f871_630x354.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ea84ed7-b543-49d7-aea9-317d11e1f871_630x354.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ea84ed7-b543-49d7-aea9-317d11e1f871_630x354.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ea84ed7-b543-49d7-aea9-317d11e1f871_630x354.png 1456w\" sizes=\"100vw\" loading=\"lazy\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg role=\"img\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.8\" stroke=\"#000\" xmlns=\"http://www.w3.org/2000/svg\"><g><title></title><path d=\"M21 3V8M21 8H16M21 8L18 5.29962C16.7056 4.14183 15.1038 3.38328 13.3879 3.11547C11.6719 2.84766 9.9152 3.08203 8.32951 3.79031C6.74382 4.49858 5.39691 5.65051 4.45125 7.10715C3.5056 8.5638 3.00158 10.2629 3 11.9996M3 21V16M3 16H8M3 16L6 18.7C7.29445 19.8578 8.89623 20.6163 10.6121 20.8841C12.3281 21.152 14.0848 20.9176 15.6705 20.2093C17.2562 19.501 18.6031 18.3491 19.5487 16.8925C20.4944 15.4358 20.9984 13.7367 21 12\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></g></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><p>In this article, I&#8217;ll share <strong>5 psychological hacks </strong>that helped me rewire my brain to genuinely enjoy coding. By applying these strategies, you can turn coding from a dreaded task into something you look forward to every day.</p><h1><strong>What Truly Motivates Us?</strong></h1><p>Before we jump into the &#8220;how,&#8221; let&#8217;s start with the &#8220;why&#8221; &#8212; why are some activities, like video games, so addictive, while others, like coding, can be hard to stay motivated for?</p><p>The answer lies in this single molecule in our brain called <strong>dopamine</strong>.</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1d55ab09-f54c-47ae-879e-016148548ecd_630x444.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1d55ab09-f54c-47ae-879e-016148548ecd_630x444.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1d55ab09-f54c-47ae-879e-016148548ecd_630x444.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1d55ab09-f54c-47ae-879e-016148548ecd_630x444.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1d55ab09-f54c-47ae-879e-016148548ecd_630x444.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1d55ab09-f54c-47ae-879e-016148548ecd_630x444.png\" width=\"630\" height=\"444\" data-attrs=\"{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1d55ab09-f54c-47ae-879e-016148548ecd_630x444.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:444,&quot;width&quot;:630,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}\" class=\"sizing-normal\" alt=\"\" title=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1d55ab09-f54c-47ae-879e-016148548ecd_630x444.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1d55ab09-f54c-47ae-879e-016148548ecd_630x444.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1d55ab09-f54c-47ae-879e-016148548ecd_630x444.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1d55ab09-f54c-47ae-879e-016148548ecd_630x444.png 1456w\" sizes=\"100vw\" loading=\"lazy\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg role=\"img\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.8\" stroke=\"#000\" xmlns=\"http://www.w3.org/2000/svg\"><g><title></title><path d=\"M21 3V8M21 8H16M21 8L18 5.29962C16.7056 4.14183 15.1038 3.38328 13.3879 3.11547C11.6719 2.84766 9.9152 3.08203 8.32951 3.79031C6.74382 4.49858 5.39691 5.65051 4.45125 7.10715C3.5056 8.5638 3.00158 10.2629 3 11.9996M3 21V16M3 16H8M3 16L6 18.7C7.29445 19.8578 8.89623 20.6163 10.6121 20.8841C12.3281 21.152 14.0848 20.9176 15.6705 20.2093C17.2562 19.501 18.6031 18.3491 19.5487 16.8925C20.4944 15.4358 20.9984 13.7367 21 12\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></g></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a><figcaption class=\"image-caption\"><a href=\"https://en.wikipedia.org/wiki/Dopamine\">https://en.wikipedia.org/wiki/Dopamine</a></figcaption></figure></div><p>Dopamine is our brain&#8217;s &#8220;wanting&#8221; chemical. It&#8217;s what drives us to go after rewards and keeps us coming back for more.</p><p>When you win in a video game or get a like on social media, you get a quick burst of dopamine making them instantly rewarding.</p><p>But coding doesn&#8217;t always work that way, at least not in the beginning.</p><p>In coding, the rewards are often delayed.</p><p>Learning a new programming language or working through a coding project doesn&#8217;t always give you that quick dopamine hit.</p><p>But what if we could trick our brains to release dopamine more often while coding, making it feel as rewarding as gaming?</p><h1><strong>1. Streaks</strong></h1><p>Have you noticed how games and apps reward you for <strong>showing up every day</strong>?</p><p>This is called a <strong>streak</strong>, and it&#8217;s a powerful motivator.</p><p>On <strong>LeetCode</strong>, for example, every consecutive day you solve a problem contributes to your current streak.</p><p>This motivated me to solve at least one problem daily when I was preparing for my coding interviews.</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50337c20-b001-4059-b847-a2be476cb091_630x425.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50337c20-b001-4059-b847-a2be476cb091_630x425.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50337c20-b001-4059-b847-a2be476cb091_630x425.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50337c20-b001-4059-b847-a2be476cb091_630x425.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50337c20-b001-4059-b847-a2be476cb091_630x425.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50337c20-b001-4059-b847-a2be476cb091_630x425.png\" width=\"630\" height=\"425\" data-attrs=\"{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/50337c20-b001-4059-b847-a2be476cb091_630x425.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:425,&quot;width&quot;:630,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}\" class=\"sizing-normal\" alt=\"\" title=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50337c20-b001-4059-b847-a2be476cb091_630x425.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50337c20-b001-4059-b847-a2be476cb091_630x425.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50337c20-b001-4059-b847-a2be476cb091_630x425.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50337c20-b001-4059-b847-a2be476cb091_630x425.png 1456w\" sizes=\"100vw\" loading=\"lazy\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg role=\"img\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.8\" stroke=\"#000\" xmlns=\"http://www.w3.org/2000/svg\"><g><title></title><path d=\"M21 3V8M21 8H16M21 8L18 5.29962C16.7056 4.14183 15.1038 3.38328 13.3879 3.11547C11.6719 2.84766 9.9152 3.08203 8.32951 3.79031C6.74382 4.49858 5.39691 5.65051 4.45125 7.10715C3.5056 8.5638 3.00158 10.2629 3 11.9996M3 21V16M3 16H8M3 16L6 18.7C7.29445 19.8578 8.89623 20.6163 10.6121 20.8841C12.3281 21.152 14.0848 20.9176 15.6705 20.2093C17.2562 19.501 18.6031 18.3491 19.5487 16.8925C20.4944 15.4358 20.9984 13.7367 21 12\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></g></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><p>It became a fun challenge to keep that streak alive.</p><p>You see the same thing on <strong>GitHub</strong>. Every time you push a change or contribute, you get a green dot, creating a visual record of your progress.</p><p>Those green dots make you want to code every day since you don&#8217;t want to break the streak.</p><p>Seeing your streak grow is satisfying and helps you stay committed.</p><p>But keeping a streak doesn&#8217;t mean you need to code for hours every day.</p><p>Sometimes, it&#8217;s just about showing up for 10&#8211;15 minutes, which is enough to keep the momentum going.</p><p>Over time, these small sessions add up, and coding becomes a habit.</p><p>You can create your own streak by <strong>marking days on a calendar</strong> or using a <strong>tracking app</strong>.</p><blockquote><p><em>Each day you check off gives you releases dopamine, making you feel good and motivating you to continue your streak.</em></p></blockquote><h1><strong>2. Make it easy</strong></h1><p><strong>Make coding as easy as possible in the beginning</strong>.</p><p>Think about video games &#8212; they always start off easy.</p><p>That&#8217;s intentional. Early victories give you a taste of success, motivating you to keep going.</p><p>We&#8217;re more likely to stick with something if it feels easy.</p><p>When you&#8217;re new to coding, don&#8217;t jump into complex projects or algorithms right away.</p><p>Instead, start with <strong>small, achievable tasks</strong>.</p><p>Begin with small projects: a calculator app, a simple game, or a basic to-do list.</p><p>These may seem basic, but that&#8217;s the point! Completing these tasks gives you an instant dopamine hit &#8212; a little celebration in your brain.</p><p>If you&#8217;re on LeetCode, start with easy problems. Every solved problem is like a small win that releases dopamine and keeps you coming back.</p><p>This positive feedback loop helps you form a habit of coding everyday.</p><p>As you get comfortable with the easy stuff, start leveling up.</p><p>Just like in a game, you&#8217;re now ready for the next challenge.</p><p>This way, you&#8217;re challenging yourself just enough to improve without feeling overwhelmed.</p><p>It tricks your brain into thinking coding isn&#8217;t so hard and it&#8217;s something you want to keep doing.</p><h1><strong>3. Make it Fun</strong></h1><p>Next, <strong>make coding fun</strong>.</p><p>Most of us start learning to code to land that dream job or ace an interview.</p><p>But what if, just for a moment, you coded without worrying about the end result?</p><p>Think about when you play video games &#8212; you play because it&#8217;s fun, challenging, and maybe a bit competitive.</p><p>Coding can be the same way.</p><p>In the beginning, <strong>code without any pressure or expectation.</strong></p><p>When I first started learning to code, it was with C language, and honestly, I found it dull and boring.</p><p>It felt like something I had to learn to get a good grade, not something I was excited to dive into.</p><p>But things changed when I picked up Python during my summer break. For the first time, I felt like I could actually <em>create</em> something.</p><p>After learning the basics, I started building little things &#8212; first a simple calculator app, then games like Pong and Tetris, and then full-stack applications.</p><p>I wasn&#8217;t thinking about grades, interviews, or jobs &#8212; just the excitement of creating something from scratch.</p><p>Over time, I realized that when I genuinely enjoyed what I was creating, I&#8217;d lose track of time and that&#8217;s when coding started to become more than just a skill. It became a passion.</p><p>So, how can you make coding enjoyable for yourself?</p><p><strong>Start by picking projects that genuinely excite you.</strong></p><p>These projects are easy enough to finish in a short time but engaging enough to keep you interested.</p><p>They&#8217;re just for fun, a chance to experiment and make mistakes without pressure.</p><blockquote><p><em>When coding becomes fun, it shifts from something you have to do to something you want to do.</em></p></blockquote><div class=\"subscription-widget-wrap-editor\" data-attrs=\"{&quot;url&quot;:&quot;https://blog.algomaster.io/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}\" data-component-name=\"SubscribeWidgetToDOM\"><div class=\"subscription-widget show-subscribe\"><div class=\"preamble\"><p class=\"cta-caption\">Subscribe to receive new articles every week.</p></div><form class=\"subscription-widget-subscribe\"><input type=\"email\" class=\"email-input\" name=\"email\" placeholder=\"Type your email&#8230;\" tabindex=\"-1\"><input type=\"submit\" class=\"button primary\" value=\"Subscribe\"><div class=\"fake-input-wrapper\"><div class=\"fake-input\"></div><div class=\"fake-button\"></div></div></form></div></div><h1><strong>4. Checklist</strong></h1><p>Now, let&#8217;s talk about how you can gamify coding to reward yourself everyday.</p><p>The answer is to have a <strong>checklist of tasks</strong> and tick them off as you complete them.</p><p>In video games: each mission or level you complete gives you points, new abilities, or just the thrill of winning.</p><p>This reward triggers a dopamine release that keeps you playing.</p><p>Similarly, think of a checklist as a series of <strong>mini-missions</strong>.</p><p>Every time you cross an item off a checklist, it gives you a dopamine hit that helps you stay motivated motivated and keeps you coming back for more.</p><p><em>Now, creating a checklist for coding isn&#8217;t just about listing random tasks.</em></p><p>It&#8217;s about breaking down your big goals into byte sized tasks.</p><p><strong>Decide what tasks are crucial</strong> to get started and prioritize them.</p><p>Identify <strong>1&#8211;3 tasks</strong> to accomplish each day.</p><p>When learning something new, create a checklist of topics to cover. Go as granular as possible and add sub-topics as part of your checklist.</p><p>Lets say your big goal is to &#8216;Become a full-stack developer.&#8217;</p><p>That&#8217;s exciting, but it&#8217;s also overwhelming.</p><p>Instead, break it down into smaller steps like:</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81f495c7-769a-4a5a-8377-a86794e36102_394x291.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81f495c7-769a-4a5a-8377-a86794e36102_394x291.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81f495c7-769a-4a5a-8377-a86794e36102_394x291.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81f495c7-769a-4a5a-8377-a86794e36102_394x291.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81f495c7-769a-4a5a-8377-a86794e36102_394x291.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81f495c7-769a-4a5a-8377-a86794e36102_394x291.png\" width=\"394\" height=\"291\" data-attrs=\"{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/81f495c7-769a-4a5a-8377-a86794e36102_394x291.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:291,&quot;width&quot;:394,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}\" class=\"sizing-normal\" alt=\"\" title=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81f495c7-769a-4a5a-8377-a86794e36102_394x291.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81f495c7-769a-4a5a-8377-a86794e36102_394x291.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81f495c7-769a-4a5a-8377-a86794e36102_394x291.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81f495c7-769a-4a5a-8377-a86794e36102_394x291.png 1456w\" sizes=\"100vw\" loading=\"lazy\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg role=\"img\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.8\" stroke=\"#000\" xmlns=\"http://www.w3.org/2000/svg\"><g><title></title><path d=\"M21 3V8M21 8H16M21 8L18 5.29962C16.7056 4.14183 15.1038 3.38328 13.3879 3.11547C11.6719 2.84766 9.9152 3.08203 8.32951 3.79031C6.74382 4.49858 5.39691 5.65051 4.45125 7.10715C3.5056 8.5638 3.00158 10.2629 3 11.9996M3 21V16M3 16H8M3 16L6 18.7C7.29445 19.8578 8.89623 20.6163 10.6121 20.8841C12.3281 21.152 14.0848 20.9176 15.6705 20.2093C17.2562 19.501 18.6031 18.3491 19.5487 16.8925C20.4944 15.4358 20.9984 13.7367 21 12\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></g></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><p>For each of the steps, go deeper and create a checklist of things you need to learn and build.</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9273fd33-b408-4e39-b6df-6a041d905dd6_630x390.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9273fd33-b408-4e39-b6df-6a041d905dd6_630x390.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9273fd33-b408-4e39-b6df-6a041d905dd6_630x390.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9273fd33-b408-4e39-b6df-6a041d905dd6_630x390.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9273fd33-b408-4e39-b6df-6a041d905dd6_630x390.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9273fd33-b408-4e39-b6df-6a041d905dd6_630x390.png\" width=\"630\" height=\"390\" data-attrs=\"{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/9273fd33-b408-4e39-b6df-6a041d905dd6_630x390.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:390,&quot;width&quot;:630,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}\" class=\"sizing-normal\" alt=\"\" title=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9273fd33-b408-4e39-b6df-6a041d905dd6_630x390.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9273fd33-b408-4e39-b6df-6a041d905dd6_630x390.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9273fd33-b408-4e39-b6df-6a041d905dd6_630x390.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9273fd33-b408-4e39-b6df-6a041d905dd6_630x390.png 1456w\" sizes=\"100vw\" loading=\"lazy\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg role=\"img\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.8\" stroke=\"#000\" xmlns=\"http://www.w3.org/2000/svg\"><g><title></title><path d=\"M21 3V8M21 8H16M21 8L18 5.29962C16.7056 4.14183 15.1038 3.38328 13.3879 3.11547C11.6719 2.84766 9.9152 3.08203 8.32951 3.79031C6.74382 4.49858 5.39691 5.65051 4.45125 7.10715C3.5056 8.5638 3.00158 10.2629 3 11.9996M3 21V16M3 16H8M3 16L6 18.7C7.29445 19.8578 8.89623 20.6163 10.6121 20.8841C12.3281 21.152 14.0848 20.9176 15.6705 20.2093C17.2562 19.501 18.6031 18.3491 19.5487 16.8925C20.4944 15.4358 20.9984 13.7367 21 12\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></g></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><p><strong>You can use AI tools like ChatGPT to generate these checklists with any level of granularity you need.</strong></p><p>When you have a checklist in place, every day feels like a small victory.</p><p>Even if you don&#8217;t finish everything, you have a clear view of your achievements and what&#8217;s left.</p><p>Coding becomes something you want to come back to, just to see that checklist getting smaller.</p><p>You can use an app like <strong>Notion</strong> or a simple to-do list to create your checklist and track your progress.</p><h1><strong>5. Novelty</strong></h1><p>Alright, let&#8217;s talk about one of the most powerful, yet underrated, aspects of learning: <strong>novelty</strong>.</p><p>Our brains are wired to seek out new experiences.</p><p>Without variety, coding can start to feel repetitive, even boring.</p><p>I remember the first time I switched from Python to learning Java &#8212; it was like learning to ride a bike all over again.</p><p>Everything felt different, from the syntax to the approach to solving problems.</p><p>But that challenge was also what made it exciting.</p><p>One way to keep things interesting is by exploring different types of projects and technologies.</p><p>If you&#8217;ve been working on web development for a while, try something different &#8212; maybe build a game or experiment with AI models.</p><p>Each type of project brings its own set of challenges, tools, and skills, giving you that novelty boost.</p><p>And novelty isn&#8217;t just about what you learn &#8212; it&#8217;s also about <em>how</em> you learn.</p><p>Sometimes, the same topic presented in a new format can completely change how you feel about it.</p><p>If you&#8217;ve been learning through videos, experiment with hands-on projects or taking notes by hand.</p><h1><strong>Dopamine Detox</strong></h1><p>Now, let&#8217;s talk about something that might sound a bit uncomfortable &#8212; a <strong>dopamine detox</strong>.</p><div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb4a00645-0c52-4193-9543-a44a8453a8a7_450x450.jpeg\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\"><picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb4a00645-0c52-4193-9543-a44a8453a8a7_450x450.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb4a00645-0c52-4193-9543-a44a8453a8a7_450x450.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb4a00645-0c52-4193-9543-a44a8453a8a7_450x450.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb4a00645-0c52-4193-9543-a44a8453a8a7_450x450.jpeg 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb4a00645-0c52-4193-9543-a44a8453a8a7_450x450.jpeg\" width=\"450\" height=\"450\" data-attrs=\"{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b4a00645-0c52-4193-9543-a44a8453a8a7_450x450.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:450,&quot;width&quot;:450,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}\" class=\"sizing-normal\" alt=\"\" title=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb4a00645-0c52-4193-9543-a44a8453a8a7_450x450.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb4a00645-0c52-4193-9543-a44a8453a8a7_450x450.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb4a00645-0c52-4193-9543-a44a8453a8a7_450x450.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb4a00645-0c52-4193-9543-a44a8453a8a7_450x450.jpeg 1456w\" sizes=\"100vw\" loading=\"lazy\"></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\"><div class=\"pencraft pc-reset icon-container restack-image\"><svg role=\"img\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.8\" stroke=\"#000\" xmlns=\"http://www.w3.org/2000/svg\"><g><title></title><path d=\"M21 3V8M21 8H16M21 8L18 5.29962C16.7056 4.14183 15.1038 3.38328 13.3879 3.11547C11.6719 2.84766 9.9152 3.08203 8.32951 3.79031C6.74382 4.49858 5.39691 5.65051 4.45125 7.10715C3.5056 8.5638 3.00158 10.2629 3 11.9996M3 21V16M3 16H8M3 16L6 18.7C7.29445 19.8578 8.89623 20.6163 10.6121 20.8841C12.3281 21.152 14.0848 20.9176 15.6705 20.2093C17.2562 19.501 18.6031 18.3491 19.5487 16.8925C20.4944 15.4358 20.9984 13.7367 21 12\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></g></svg></div><div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div></div></div></div></a></figure></div><p>The idea behind a dopamine detox is to reset your brain&#8217;s reward system by cutting back on high-dopamine activities like social media and gaming.</p><p>When you lower these instant rewards, your brain becomes more receptive to the dopamine that comes from productive activities, like solving a coding problem or completing a project.</p><p>Start by identifying the activities that give you those instant dopamine hits and can take time away from coding.</p><p>Try to avoid these high-dopamine activities early in the day. If you start your day with them, important tasks like coding can seem less appealing.</p><p>Instead, use these high-dopamine activities as rewards.</p><p>After you&#8217;ve completed good number of coding tasks, give yourself a few minutes on social media or watch a video.</p><p>By doing this, coding becomes the primary focus, and distractions become rewards instead of problems.</p><p>When you reward yourself, you&#8217;re telling your brain, &#8220;This is good, let&#8217;s do it again.&#8221;</p><p>So, celebrate your wins, even the small ones.</p><div><hr></div><p>Finally, <strong>be kind to yourself.</strong> Not every day will go perfectly, and that&#8217;s completely okay.</p><p>There will be times when you encounter bugs that frustrate you, days where you&#8217;re feeling off or maybe moments where it feels like you&#8217;re not progressing as fast as you&#8217;d like.</p><p>The important thing is to get back up and keep going, even if it&#8217;s just a small step forward.</p><p>I know I&#8217;ve shared a lot of strategies in this article, and you don&#8217;t have to apply all of them.</p><p>Experiment, see what resonates with you, and adopt the ones that genuinely make coding more enjoyable and sustainable for you.</p><div><hr></div><p>Hope you enjoyed reading this article.</p><p>If you found it valuable, hit a like &#10084;&#65039; and consider subscribing for more such content every week.</p><p>If you have any questions or suggestions, leave a comment.</p><div class=\"captioned-button-wrap\" data-attrs=\"{&quot;url&quot;:&quot;https://blog.algomaster.io/p/how-i-mastered-data-structures-and-algorithms?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&amp;token=eyJ1c2VyX2lkIjo4MzYwMjc0MywicG9zdF9pZCI6MTQ1NjU1MjUyLCJpYXQiOjE3MjE1MjE3MzEsImV4cCI6MTcyNDExMzczMSwiaXNzIjoicHViLTIyMDIyNjgiLCJzdWIiOiJwb3N0LXJlYWN0aW9uIn0.2cNY811YEugd5iH9XJQhakBzyahGqF7PcATBlFj5J2w&quot;,&quot;text&quot;:&quot;Share&quot;}\" data-component-name=\"CaptionedButtonToDOM\"><div class=\"preamble\"><p class=\"cta-caption\">This post is public so feel free to share it to help others.</p></div><p class=\"button-wrapper\" data-attrs=\"{&quot;url&quot;:&quot;https://blog.algomaster.io/p/how-to-make-coding-fun-and-addictive?utm_source=substack&utm_medium=email&utm_content=share&action=share&quot;,&quot;text&quot;:&quot;Share&quot;}\" data-component-name=\"ButtonCreateButton\"><a class=\"button primary\" href=\"https://blog.algomaster.io/p/how-to-make-coding-fun-and-addictive?utm_source=substack&utm_medium=email&utm_content=share&action=share\"><span>Share</span></a></p></div><div class=\"subscription-widget-wrap-editor\" data-attrs=\"{&quot;url&quot;:&quot;https://blog.algomaster.io/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}\" data-component-name=\"SubscribeWidgetToDOM\"><div class=\"subscription-widget show-subscribe\"><div class=\"preamble\"><p class=\"cta-caption\">Subscribe for free to receive new articles every week.</p></div><form class=\"subscription-widget-subscribe\"><input type=\"email\" class=\"email-input\" name=\"email\" placeholder=\"Type your email&#8230;\" tabindex=\"-1\"><input type=\"submit\" class=\"button primary\" value=\"Subscribe\"><div class=\"fake-input-wrapper\"><div class=\"fake-input\"></div><div class=\"fake-button\"></div></div></form></div></div><p>Checkout my <strong><a href=\"https://www.youtube.com/@ashishps_1/videos\">Youtube channel</a></strong> for more in-depth content.</p><p>Follow me on <strong><a href=\"https://www.linkedin.com/in/ashishps1/\">LinkedIn</a></strong> and <strong><a href=\"https://twitter.com/ashishps_1\">X</a></strong> to stay updated.</p><p>Checkout my <strong><a href=\"https://github.com/ashishps1\">GitHub repositories</a></strong> for free interview preparation resources.</p><p>I hope you have a lovely day!</p><p>See you soon,</p><p>Ashish</p>","flags":null,"enclosureUrl":"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1d55ab09-f54c-47ae-879e-016148548ecd_630x444.png","enclosureMime":""},{"title":"A visual proof that a^2 – b^2 = (a + b)(a – b)","url":"https://www.futilitycloset.com/2024/12/15/tidy-2/","date":1734271297,"author":"beardyw","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://www.futilitycloset.com/2024/12/15/tidy-2/\">https://www.futilitycloset.com/2024/12/15/tidy-2/</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42423409\">https://news.ycombinator.com/item?id=42423409</a></p>\n<p>Points: 282</p>\n<p># Comments: 111</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Proof of concept showcasing how a WASM program can access files outside node:wasi's preopens dir","url":"https://www.reddit.com/r/programming/comments/1hetgf7/proof_of_concept_showcasing_how_a_wasm_program/","date":1734272246,"author":"/u/guest271314","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/guest271314\"> /u/guest271314 </a> <br/> <span><a href=\"https://github.com/humodz/node-wasi-preopens-escape\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/programming/comments/1hetgf7/proof_of_concept_showcasing_how_a_wasm_program/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Solving Advent of Code at Compile Time with Rust Macros","url":"https://www.reddit.com/r/rust/comments/1heu1ub/solving_advent_of_code_at_compile_time_with_rust/","date":1734274112,"author":"/u/CodeBrad","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/CodeBrad\"> /u/CodeBrad </a> <br/> <span><a href=\"https://doublefree.bearblog.dev/solving-advent-of-code-at-compile-time-with-rust-macros/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1heu1ub/solving_advent_of_code_at_compile_time_with_rust/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"What are your biggest learnings about Go and how did you get to them?","url":"https://www.reddit.com/r/golang/comments/1heuhyq/what_are_your_biggest_learnings_about_go_and_how/","date":1734275427,"author":"/u/TheRealHackfred","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>I have been using Go for 3 years now and I think it&#39;s a great language. After using a language for a while to me it’s interesting to evaluate key learnings that changed the way I write code - either in that language specifically or in general. </p> <p>So I am curious: What were your key learnings and how did you come to internalise them?</p> <p>I have two of my own to start with:</p> <p>1 Don’t pass parameters (mostly structs) as pointers for optimisation.</p> <p>At the beginning we were cautious of passing larger structs (&gt;= 1KB) by value so regularly we used pointers instead. CPUs are quite efficient though and it turns out you need to pass such a struct many times (&gt;1000) before you can notice any real difference. These days we only pass structs as pointers if they’re nullable or (in rare cases) mutable. I can just recommend to run a simple benchmark on your own if you are interested in that topic (nice side-effect: you learn about Go’s benchmarking tools).</p> <p>2 Goroutines are much cheaper than OS threads</p> <p>Coming from Java and Scala I had already experienced that context switching can be costly and limit throughput in some applications (e.g. a web server that creates one thread per incoming request). So I was amazed to see how cheap Goroutines are in comparison (again by running and comparing two simple applications) which just took away the reluctance to create a high number of go routines. </p> <p>I love these kinds of insights so I would be thankful if you can share some of yours.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/TheRealHackfred\"> /u/TheRealHackfred </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1heuhyq/what_are_your_biggest_learnings_about_go_and_how/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1heuhyq/what_are_your_biggest_learnings_about_go_and_how/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"SVC16: Simplest Virtual Computer","url":"https://github.com/JanNeuendorf/SVC16","date":1734280766,"author":"thunderbong","unread":true,"desc":"","content":"\n<p>Article URL: <a href=\"https://github.com/JanNeuendorf/SVC16\">https://github.com/JanNeuendorf/SVC16</a></p>\n<p>Comments URL: <a href=\"https://news.ycombinator.com/item?id=42424370\">https://news.ycombinator.com/item?id=42424370</a></p>\n<p>Points: 79</p>\n<p># Comments: 21</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Chess-tui Play chess from your terminal !","url":"https://www.reddit.com/r/linux/comments/1hewjqt/chesstui_play_chess_from_your_terminal/","date":1734281127,"author":"/u/_sw1fty_","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p><a href=\"https://i.redd.it/6apcvj25k17e1.gif\">https://i.redd.it/6apcvj25k17e1.gif</a></p> <p>Hey, I have been working a lot on my open-source chess game, chess-tui. This is a simple rust written TUI that let&#39;s you play chess games from your terminal. You can now play against other players online or against any UCI compatible chess engine !</p> <p>Would love yo have your feedback on that, and if you like it make sure you star it !</p> <p>Repo: <a href=\"https://github.com/thomas-mauran/chess-tui\">https://github.com/thomas-mauran/chess-tui</a><br/> Website: <a href=\"https://thomas-mauran.github.io/chess-tui/\">https://thomas-mauran.github.io/chess-tui/</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/_sw1fty_\"> /u/_sw1fty_ </a> <br/> <span><a href=\"https://www.reddit.com/r/linux/comments/1hewjqt/chesstui_play_chess_from_your_terminal/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/linux/comments/1hewjqt/chesstui_play_chess_from_your_terminal/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Advent of Code on the Nintendo DS","url":"https://www.reddit.com/r/programming/comments/1hewnfk/advent_of_code_on_the_nintendo_ds/","date":1734281405,"author":"/u/starlevel01","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/starlevel01\"> /u/starlevel01 </a> <br/> <span><a href=\"https://sailor.li/aocnds.html\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/programming/comments/1hewnfk/advent_of_code_on_the_nintendo_ds/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"A solution to the problem of cluster-wide CRDs","url":"https://www.reddit.com/r/kubernetes/comments/1hexhh9/a_solution_to_the_problem_of_clusterwide_crds/","date":1734283615,"author":"/u/nfrankel","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/nfrankel\"> /u/nfrankel </a> <br/> <span><a href=\"https://blog.frankel.ch/cluster-wide-crds/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1hexhh9/a_solution_to_the_problem_of_clusterwide_crds/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Flux vs ArgoCD","url":"https://www.reddit.com/r/kubernetes/comments/1hexrx5/flux_vs_argocd/","date":1734284378,"author":"/u/SuchAd1135","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Is anyone using flux for managing the kubernetes desired state ? Would you consider flux or Argocd for better performance and stability ?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/SuchAd1135\"> /u/SuchAd1135 </a> <br/> <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1hexrx5/flux_vs_argocd/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/kubernetes/comments/1hexrx5/flux_vs_argocd/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""}]}