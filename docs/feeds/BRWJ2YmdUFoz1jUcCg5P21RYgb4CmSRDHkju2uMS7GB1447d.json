{"id":"BRWJ2YmdUFoz1jUcCg5P21RYgb4CmSRDHkju2uMS7GB1447d","title":"Mouse Vs Python","displayTitle":"Dev - Python Blog","url":"https://blog.pythonlibrary.org/feed","feedLink":"https://www.blog.pythonlibrary.org/","items":[{"title":"ANN – The textual-cogs Package – Creating Reusable Dialogs for Textual","url":"https://www.blog.pythonlibrary.org/2024/11/13/ann-the-textual-cogs-package-creating-reusable-dialogs-for-textual/","date":1731504617,"author":"Mike","unread":true,"desc":"","content":"<p>Textual-cogs is a collection of Textual dialogs that you can use in your Textual application. You can see a quick demo of the dialogs below:</p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-12490 size-full\" src=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/cog_demo.gif\" alt=\"Textual Cogs Demo App\" width=\"1130\" height=\"560\" /></p>\n<p dir=\"auto\">Dialogs included so far:</p>\n<ul dir=\"auto\">\n<li>Generic <code>MessageDialog</code> &#8211; shows messages to the user</li>\n<li><code>SaveFileDialog</code> &#8211; gives the user a way to select a location to save a file</li>\n<li><code>SingleChoiceDialog</code> &#8211; gives the user a series of choices to pick from</li>\n<li><code>TextEntryDialog</code> &#8211; ask the user a question and get their answer using an <code>Input</code> widget</li>\n<li>and more</li>\n</ul>\n<p>You can check out <a href=\"https://github.com/driscollis/textual-cogs\">textual-cogs on GitHub</a>.</p>\n<div class=\"markdown-heading\" dir=\"auto\">\n<h2 class=\"heading-element\" dir=\"auto\" tabindex=\"-1\">Installation</h2>\n<p>&nbsp;</p>\n</div>\n<p dir=\"auto\">You can install <code>textual-cog</code> using pip:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">python -m pip install textual-cog</pre>\n<p dir=\"auto\">You also need <a href=\"https://github.com/Textualize/textual\">Textual</a> to run these dialogs.</p>\n<div class=\"markdown-heading\" dir=\"auto\">\n<h2 class=\"heading-element\" dir=\"auto\" tabindex=\"-1\">Example Usage</h2>\n<p>&nbsp;</p>\n</div>\n<p dir=\"auto\">Here is an example of creating a small application that opens the <code>MessageDialog</code> immediately. You would normally open the dialog in response to a message or event that has occurred, such as when the application has an error or you need to tell the user something.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">from textual.app import App\nfrom textual.app import App, ComposeResult\n\nfrom textual_cogs.dialogs import MessageDialog\nfrom textual_cogs import icons\n\n\nclass DialogApp(App):\n    def on_mount(self) -&gt; ComposeResult:\n        def my_callback(value: None | bool) -&gt; None:\n            self.exit()\n\n        self.push_screen(\n            MessageDialog(\n                \"What is your favorite language?\",\n                icon=icons.ICON_QUESTION,\n                title=\"Warning\",\n            ),\n            my_callback,\n        )\n\n\nif __name__ == \"__main__\":\n    app = DialogApp()\n    app.run()</pre>\n<p>When you run this code, you will get something like the following:</p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-large wp-image-12491\" src=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/message_dialog-1024x627.jpg\" alt=\"MessageDialog from textual-cogs\" width=\"1024\" height=\"627\" srcset=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/message_dialog-1024x627.jpg 1024w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/message_dialog-300x184.jpg 300w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/message_dialog-768x470.jpg 768w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/message_dialog-1536x941.jpg 1536w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/message_dialog-2048x1254.jpg 2048w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\" /></p>\n<p>&nbsp;</p>\n<div class=\"markdown-heading\" dir=\"auto\">\n<h3 class=\"heading-element\" dir=\"auto\" tabindex=\"-1\">Creating a SaveFileDialog</h3>\n<p>&nbsp;</p>\n</div>\n<p dir=\"auto\">The following code demonstrates how to create a <code>SaveFileDialog</code>:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">from textual.app import App\nfrom textual.app import App, ComposeResult\n\nfrom textual_cogs.dialogs import SaveFileDialog\n\n\nclass DialogApp(App):\n    def on_mount(self) -&gt; ComposeResult:        \n        self.push_screen(SaveFileDialog())\n\nif __name__ == \"__main__\":\n    app = DialogApp()\n    app.run()</pre>\n<p>When you run this code, you will see the following:</p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-large wp-image-12492\" src=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/save_file_dialog-1024x627.jpg\" alt=\"SaveFileDialog from textual-cogs\" width=\"1024\" height=\"627\" srcset=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/save_file_dialog-1024x627.jpg 1024w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/save_file_dialog-300x184.jpg 300w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/save_file_dialog-768x470.jpg 768w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/save_file_dialog-1536x941.jpg 1536w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/save_file_dialog-2048x1254.jpg 2048w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\" /></p>\n<h2>Wrapping Up</h2>\n<p>The textual-cogs package is currently only a collection of reusable dialogs for your Textual application. However, this can help speed up your ability to add code to your TUI applications because the dialogs are taken care of for you.</p>\n<p>Check it out on <a href=\"https://github.com/driscollis/textual-cogs\">GitHub</a> or the <a href=\"https://pypi.org/project/textual-cogs/\">Python Package Index</a> today.</p>\n<p>The post <a href=\"https://www.blog.pythonlibrary.org/2024/11/13/ann-the-textual-cogs-package-creating-reusable-dialogs-for-textual/\">ANN &#8211; The textual-cogs Package &#8211; Creating Reusable Dialogs for Textual</a> appeared first on <a href=\"https://www.blog.pythonlibrary.org\">Mouse Vs Python</a>.</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"How to Debug Your Textual Application","url":"https://www.blog.pythonlibrary.org/2024/11/19/how-to-debug-your-textual-application/","date":1732021771,"author":"Mike","unread":true,"desc":"","content":"<p>Textual is a great Python package for creating a lightweight, powerful, text-based user interface. That means you can create a GUI in your terminal with Python without learning curses! But what happens when you encounter some problems that require debugging your application? A TUI takes over your terminal, which means you cannot see anything from Python&#8217;s <code>print()</code> statement.</p>\n<p><iframe title=\"YouTube video player\" src=\"https://www.youtube.com/embed/y5mxb9yyBpM?si=o6QxGe-8a866JCwh\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p>\n<p>Wait? What about your IDE? Can that help? Actually no. When you run a TUI, you need a fully functional terminal to interact with it. PyCharm doesn&#8217;t work well with Textual. WingIDE doesn&#8217;t even have a terminal emulator. Visual Studio Code also doesn&#8217;t work out of the box, although you may be able to make it work with a custom json or yaml file. But what do you do if you can&#8217;t figure that out?</p>\n<p>That is the crux of the problem and what you will learn about in this tutorial: How to debug Textual applications!</p>\n<h2>Getting Started</h2>\n<p>To get the most out of this tutorial, make sure you have installed Textual&#8217;s development tools by using the following command:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">python -m pip install textual-dev --upgrade</pre>\n<p>Once you have the latest version of <code>textual-dev</code> installed, you may continue!</p>\n<h2>Debugging with Developer Mode</h2>\n<p>When you want to debug a Textual application, you need to open two terminal windows. On Microsoft Windows, you can open two Powershell or two Command Prompts. In the first terminal, run this command:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">textual console</pre>\n<p>The Textual console will listen for any Textual application running in developer mode. But first, you need some kind of application to test with. Open up your favorite Python IDE and create a new file called <code>hello_textual.py</code>. Then enter the following code into it:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">from textual.app import App, ComposeResult\nfrom textual.widgets import Button\n\n\nclass WelcomeButton(App):\n\n    def compose(self) -&gt; ComposeResult:\n        yield Button(\"Exit\")\n\n    def on_button_pressed(self) -&gt; None:\n        self.mount(Button(\"Other\"))\n\n\nif __name__ == \"__main__\":\n    app = WelcomeButton()\n    app.run()</pre>\n<p>To run a Textual application, use the other terminal you opened earlier. The one that isn&#8217;t running Textual Console in it. Then run this command:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">textual run --dev hello_textual.py</pre>\n<p>You will see the following in your terminal:</p>\n<p><img decoding=\"async\" class=\"aligncenter size-large wp-image-12482\" src=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_app-1024x504.png\" alt=\"Simple Textual app\" width=\"1024\" height=\"504\" srcset=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_app-1024x504.png 1024w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_app-300x148.png 300w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_app-768x378.png 768w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_app.png 1088w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n<p>If you switch over to the other terminal, you will see a lot of output that looks something like this:</p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-large wp-image-12481\" src=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console-1024x564.png\" alt=\"Textual Console output\" width=\"1024\" height=\"564\" srcset=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console-1024x564.png 1024w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console-300x165.png 300w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console-768x423.png 768w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console.png 1108w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\" /></p>\n<p>Now, if you want to test that you are reaching a part of your code in Textual, you can add a <code>print()</code> function now to your <code>on_button_pressed()</code> method. You can also use <code>self.log.info()</code> which you can read about in the <a href=\"https://textual.textualize.io/guide/devtools/#log-method\">Textual documentation</a>.</p>\n<p>Let&#8217;s update your code to include some logging:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">from textual.app import App, ComposeResult\nfrom textual.widgets import Button\n\n\nclass WelcomeButton(App):\n\n    def compose(self) -&gt; ComposeResult:\n        yield Button(\"Exit\")\n        print(\"The compose() method was called!\")\n\n    def on_button_pressed(self) -&gt; None:\n        self.log.info(\"You pressed a button\")\n        self.mount(Button(\"Other\"))\n\n\nif __name__ == \"__main__\":\n    app = WelcomeButton()\n    app.run()</pre>\n<p>Now, when you run this code, you can check your Textual Console for output. The <code>print()</code> statement should be in the Console without you doing anything other than running the code. You must click the button to get the log statement in the Console.</p>\n<p>Here is what the log output will look like in the Console:</p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-large wp-image-12485\" src=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console_log-1024x224.png\" alt=\"Logging to the Textual Console\" width=\"1024\" height=\"224\" srcset=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console_log-1024x224.png 1024w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console_log-300x66.png 300w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console_log-768x168.png 768w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console_log.png 1103w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\" /></p>\n<p>And here is an example of what you get when you <code>print()</code> to the Console:</p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-large wp-image-12484\" src=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console_print-1024x349.png\" alt=\"Printing output to Textual Console\" width=\"1024\" height=\"349\" srcset=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console_print-1024x349.png 1024w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console_print-300x102.png 300w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console_print-768x262.png 768w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console_print.png 1098w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\" /></p>\n<p>There&#8217;s not much difference here, eh? Either way, you get the information you need and if you need to print out Python objects, this can be a handy debugging tool.</p>\n<p>If you find the output in the Console to be too verbose, you can use <code>-x</code> or <code>--exclude</code> to exclude log groups. Here&#8217;s an example:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">textual console -x SYSTEM -x EVENT -x DEBUG -x INFO</pre>\n<p>In this version of the Textual Console, you are suppressing SYSTEM, EVENT, DEBUG, and INFO messages.</p>\n<p>Launch your code from earlier and you will see that the output in your Console is greatly reduced:</p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-large wp-image-12483\" src=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console2-1024x567.png\" alt=\"Textual Console with output suppressed\" width=\"1024\" height=\"567\" srcset=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console2-1024x567.png 1024w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console2-300x166.png 300w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console2-768x425.png 768w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/11/textual_console2.png 1103w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\" /></p>\n<p>Now, let&#8217;s learn how to use notification as a debugging tool.</p>\n<h2>Debugging with Notification</h2>\n<p>If you like using <code>print()</code> statements then you will love that Textual&#8217;s <code>App()</code> class provides a <a href=\"https://textual.textualize.io/api/app/#textual.app.App.notify\"><code>notify()</code> method</a>. You can call it anywhere in your application using <code>self.app.notify()</code> , along with a message. If you are in your <code>App</code> class, you can reduce the call to simply <code>self.notify().</code></p>\n<p>Let&#8217;s take the example from earlier and update it to use the notify method instead:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">from textual.app import App, ComposeResult\nfrom textual.widgets import Button\n\n\nclass WelcomeButton(App):\n\n    def compose(self) -&gt; ComposeResult:\n        yield Button(\"Exit\")\n\n    def on_button_pressed(self) -&gt; None:\n        self.mount(Button(\"Other\"))\n        self.notify(\"You pressed the button!\")\n\n\nif __name__ == \"__main__\":\n    app = WelcomeButton()\n    app.run()</pre>\n<p>The <code>notify()</code> method takes the following parameters:</p>\n<ul>\n<li><code>message</code> &#8211; The message you want to display in the notification</li>\n<li><code>title</code> &#8211; An optional title to add to the message</li>\n<li><code>severity</code> &#8211; The message&#8217;s severity, which translates to a different color for the notification. You may use &#8220;information&#8221;, &#8220;error&#8221; or &#8220;warning&#8221;</li>\n<li><code>timeout</code> &#8211; The timeout in seconds for how long to show the message</li>\n</ul>\n<p>Try editing the notification to use more of these features. For example, you could update the code above to use this instead:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">self.notify(\"You pressed the button!\", title=\"Info Message\", severity=\"error\")</pre>\n<p>Textual&#8217;s <code>App</code> class also provides a <code>bell()</code> method you can call to play the system bell. You could add this to really get the user&#8217;s attention, assuming they have the system bell enabled on their computer.</p>\n<h2>Wrapping Up</h2>\n<p>Debugging your TUI application successfully is a skill. You need to know how to find errors, and Textual&#8217;s dev mode makes this easier. While it would be great if a Python IDE had a fully functional terminal built into it, that is a very niche need. So it&#8217;s great that Textual included the tooling you need to figure out your code.</p>\n<p>Give these tips a try, and you&#8217;ll soon be able to debug your Textual applications easily!</p>\n<p>The post <a href=\"https://www.blog.pythonlibrary.org/2024/11/19/how-to-debug-your-textual-application/\">How to Debug Your Textual Application</a> appeared first on <a href=\"https://www.blog.pythonlibrary.org\">Mouse Vs Python</a>.</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Black Friday Python Deals 2024","url":"https://www.blog.pythonlibrary.org/2024/11/25/black-friday-python-deals-2024/","date":1732561029,"author":"Mike","unread":true,"desc":"","content":"<p>Black Friday and Cyber Monday are nearly here, so it&#8217;s time to do a Python sale! All my <a href=\"https://driscollis.gumroad.com/\">books and courses</a> are<strong> 35% off</strong> until <strong>December 4th</strong> if you use this code: <strong>BF24</strong> at checkout.</p>\n<p>You can learn about any of the following topics in my books and courses:</p>\n<ul>\n<li>Basic Python (Python 101)</li>\n<li>PDF Processing (ReportLab book)</li>\n<li>Excel and Python</li>\n<li>Image processing (Pillow book)</li>\n<li>Python Logging (NEW this year!)</li>\n<li>Jupyter Notebook</li>\n<li>JupyterLab 101 (NEW this month!)</li>\n<li>and more</li>\n</ul>\n<p><a href=\"https://driscollis.gumroad.com/\">Check out my books and courses today!</a></p>\n<h2>Other Python Sales</h2>\n<ul>\n<li><strong><a href=\"https://learnbyexample.gumroad.com/\">Sundeep Agarwal</a></strong>: ~50% off Sundeep’s <a href=\"https://learnbyexample.gumroad.com/l/all-books/FestiveOffer\">all book</a> and <a href=\"https://learnbyexample.gumroad.com/l/python-bundle/FestiveOffer\">Python</a> bundles with code <code>FestiveOffer</code></li>\n<li><strong><a href=\"https://www.pythonmorsels.com/courses/jumpstart/overview/\">Python Jumpstart</a></strong> with Python Morsels: <strong>50% off</strong> Trey Hunner&#8217;s brand new Python course, an introduction to Python that’s <em>very</em> hands-on (<strong>$99</strong> instead of <strong>$199</strong>)</li>\n<li><strong><a href=\"https://mathspp.gumroad.com/\">Rodrigo</a></strong> 50% off Rodrigo’s <a href=\"https://mathspp.gumroad.com/l/all-books-bundle/BF24\">all books bundle</a> with code <code>BF24</code></li>\n<li><strong><a href=\"https://thepythoncodingplace.com/membership/\">The Python Coding Place</a></strong>: 40% off <a href=\"https://thepythoncodingplace.thinkific.com/enroll/2906653?coupon=black2024\">The Python Coding Book</a> and 40% off a lifetime membership to <a href=\"https://thepythoncodingplace.thinkific.com/cart/add_product/2731141?price_id=3865919&amp;coupon=black2024\">The Python Coding Place</a> with code <code>black2024</code></li>\n<li>Adam Johnson’s <a href=\"https://adamj.eu/tech/2024/11/18/django-black-friday-deals-2024/\">Django-related Deals for Black Friday 2024</a></li>\n</ul>\n<p>The post <a href=\"https://www.blog.pythonlibrary.org/2024/11/25/black-friday-python-deals-2024/\">Black Friday Python Deals 2024</a> appeared first on <a href=\"https://www.blog.pythonlibrary.org\">Mouse Vs Python</a>.</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"JupyterLab 101 Book is Now Available","url":"https://www.blog.pythonlibrary.org/2024/12/09/jupyterlab-101-book-is-now-available/","date":1733751078,"author":"Mike","unread":true,"desc":"","content":"<p>JupyterLab, the latest iteration of the Jupyter Notebook, is a versatile tool that empowers you to share your code in an easily understandable format.</p>\n<figure id=\"attachment_12441\" aria-describedby=\"caption-attachment-12441\" style=\"width: 1024px\" class=\"wp-caption aligncenter\"><a href=\"https://www.amazon.com/dp/B0DMFJWSJN\"><img fetchpriority=\"high\" decoding=\"async\" class=\"size-large wp-image-12441\" src=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-1024x768.jpg\" alt=\"\" width=\"1024\" height=\"768\" srcset=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-1024x768.jpg 1024w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-300x225.jpg 300w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-768x576.jpg 768w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-1536x1152.jpg 1536w, https://www.blog.pythonlibrary.org/wp-content/uploads/2024/09/jupyter3D3-2048x1536.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><figcaption id=\"caption-attachment-12441\" class=\"wp-caption-text\">Front View Two Hard Cover Book Psd Mockup</figcaption></figure>\n<p>Hundreds of thousands of people around the world use Jupyter Notebooks or variations of the Notebook architecture for any or all of the following:</p>\n<ul class=\"a-unordered-list a-vertical\">\n<li><span class=\"a-list-item\">teaching</span></li>\n<li><span class=\"a-list-item\">presentations</span></li>\n<li><span class=\"a-list-item\">learning a computer language</span></li>\n<li><span class=\"a-list-item\">numerical simulations</span></li>\n<li><span class=\"a-list-item\">statistical modeling</span></li>\n<li><span class=\"a-list-item\">data visualization</span></li>\n<li><span class=\"a-list-item\">machine learning</span></li>\n<li><span class=\"a-list-item\">and much more!</span></li>\n</ul>\n<p>Jupyter Notebooks can be emailed, put on GitHub, or run online. You may also add HTML, images, Markdown, videos, LaTeX, and custom MIME types to your Notebooks. Finally, Jupyter Notebooks support big data integration.</p>\n<p>JupyterLab 101 will get you up to speed on the newest user interface for Jupyter Notebooks and the other tools that JupyterLab supports. You now have a tabbed interface that you can use to edit multiple Notebooks, open terminals in your browser, create a Python REPL, and more. JupyterLab also includes a debugger utility to help you figure out your coding issues.</p>\n<p>Rest assured, JupyterLab supports all the same programming languages as Jupyter Notebook. The main difference lies in the user interface, and this guide is here to help you navigate it effectively and efficiently.</p>\n<p>After reading JupyterLab 101, you will be an expert in JupyterLab and produce quality Notebooks quickly!</p>\n<h2>Where to Purchase</h2>\n<p>Purchase on <a href=\"https://driscollis.gumroad.com/l/jupyterlab101\">Gumroad</a>, <a href=\"https://leanpub.com/jupyterlab101/\">Leanpub</a> or <a href=\"https://www.amazon.com/dp/B0DMFJWSJN\">Amazon</a></p>\n<p>The post <a href=\"https://www.blog.pythonlibrary.org/2024/12/09/jupyterlab-101-book-is-now-available/\">JupyterLab 101 Book is Now Available</a> appeared first on <a href=\"https://www.blog.pythonlibrary.org\">Mouse Vs Python</a>.</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Checking Python Code with GitHub Actions","url":"https://www.blog.pythonlibrary.org/2024/12/10/checking-python-code-with-github-actions/","date":1733837140,"author":"Mike","unread":true,"desc":"","content":"<p>When you are working on your personal or work projects in Python, you usually want to have a way to enforce code standards. You can use tools like Flake8, PyLint or Ruff to lint your code. You might use Mypy to verify type checking. There are lots of other tools at your disposal. But it can be hard to remember to do that every time you want to create a pull request (PR) in GitHub or GitLab.</p>\n<p>That is where continuous integration (CI) tools come in. GitHub has something called GitHub Actions that allow you to run tools or entire workflows on certain types of events.</p>\n<p>In this article, you will learn how to create a <a href=\"https://github.com/features/actions\">GitHub Action</a> that runs Ruff on a PR. You can learn more about Ruff in my <a href=\"https://www.blog.pythonlibrary.org/2023/06/28/an-intro-to-ruff-an-extremely-fast-python-linter/\">introductory article</a>.</p>\n<h2>Creating a Workflow</h2>\n<p>In the root folder of your code, you will need to create a folder called <strong>.github/workflows</strong>. Note the period at the beginning and the fact that you need a subfolder named <strong>workflows</strong> too. Inside of that, you will create a YAML file.</p>\n<p>Since you are going to run Ruff to lint and format your Python files, you can call this YAML file <strong>ruff.yml. </strong>Put the following in your new file:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">name: Ruff\non: [workflow_dispatch, pull_request]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Install Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.13\"\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install ruff\n      # Include `--format=github` to enable automatic inline annotations.\n      - name: Run Ruff\n        run: ruff check --output-format=github .\n        continue-on-error: false\n      - name: Run Ruff format\n        run: ruff format --check .\n        continue-on-error: false</pre>\n<p>Note: This example comes from my <a href=\"https://github.com/driscollis/textual-cogs/blob/main/.github/workflows/ruff.yml\">textual-cogs repo</a></p>\n<p>Let&#8217;s talk about what this does. This line is pretty important:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">on: [workflow_dispatch, pull_request]</pre>\n<p>It tells GitHub to run this workflow when there&#8217;s a pull request and also with &#8220;workflow_dispatch&#8221;. That second option lets you go to the <strong>Actions</strong> tab in your GitHub repo, select the workflow and run it manually. If you do not include that, you cannot run it manually at all. This is useful for testing purposes, but you can remove it if you do not need it.</p>\n<p>The next part tells GitHub to run the build on ubuntu-linux:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">jobs:\n  build:\n    runs-on: ubuntu-latest</pre>\n<p>If you have a GitHub subscription, you can also get Windows as a runner, which means that you can also run these actions on Windows in addition to Linux.</p>\n<p>The steps section is the meat of this particular workflow:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">steps:\n  - uses: actions/checkout@v4\n  - name: Install Python\n    uses: actions/setup-python@v4\n    with:\n      python-version: \"3.13\"\n  - name: Install dependencies\n    run: |\n      python -m pip install --upgrade pip\n      pip install ruff\n  # Include `--format=github` to enable automatic inline annotations.\n  - name: Run Ruff\n    run: ruff check --output-format=github .\n    continue-on-error: false\n  - name: Run Ruff format\n    run: ruff format --check .\n    continue-on-error: false</pre>\n<p>Here is uses a built-in <a href=\"https://github.com/actions/checkout\">checkout@v4 workflow</a>, which is something that comes with GitHub. There are many others you can use to enhance your workflows and add new functionality. Next, you get setup with Python 3.13 and then you install your dependencies.</p>\n<p>Once your dependencies are installed, you can run your tools. In this case, you are installing and running Ruff. For every PR, you run <code>ruff check --output-format=github .</code>, which will do all sorts of linting on your Python code. If any errors are found, it will add inline comments with the error, which is what that <code>--output-format</code> flag is for.</p>\n<p>You also have a separate section to run Ruff format, which will format your code to follow the <a href=\"https://github.com/psf/black\">Black</a> formatter (for the most part).</p>\n<h2>Wrapping Up</h2>\n<p>You can add lots of other tools to your workflows too. For example, you might add a Mypy workflow, or some test workflows to run on PR or perhaps before merging to your main branch. You might even want to check your <a href=\"https://www.blog.pythonlibrary.org/2023/09/20/learning-about-code-metrics-in-python-with-radon/\">code complexity</a> before allowing a merge too!</p>\n<p>With a little work, you will soon be able to use GitHub Actions to keep your code cleaner and make it more uniform too. Adding automated testing is even better! Give it a try and let me know what you think.</p>\n<p>The post <a href=\"https://www.blog.pythonlibrary.org/2024/12/10/checking-python-code-with-github-actions/\">Checking Python Code with GitHub Actions</a> appeared first on <a href=\"https://www.blog.pythonlibrary.org\">Mouse Vs Python</a>.</p>\n","flags":null,"enclosureUrl":"","enclosureMime":""}]}