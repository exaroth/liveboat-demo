{
  "id": "2Qhhdda6Qnbf8RCfUPd4nB9sSt2WDQfEpF7H3gCnZZ4AsfbGMy3RmrCa6gigGY6TkbrrJn4wmHXXNYcVj1bK",
  "title": "top scoring links : rust",
  "displayTitle": "Reddit - Rust",
  "url": "https://www.reddit.com/r/rust/top/.rss?sort=top&t=day&limit=6",
  "feedLink": "https://www.reddit.com/r/rust/top/?sort=top&t=day&limit=6",
  "items": [
    {
      "title": "Boa JavaScript engine v0.20 released",
      "url": "https://www.reddit.com/r/rust/comments/1h7gdgu/boa_javascript_engine_v020_released/",
      "date": 1733424122,
      "author": "/u/Jayflux1",
      "unread": true,
      "desc": "",
      "content": "<!-- SC_OFF --><div class=\"md\"><p>We have released Boa v0.20: </p> <p><a href=\"https://boajs.dev/blog/2024/12/05/boa-release-020\">https://boajs.dev/blog/2024/12/05/boa-release-020</a></p> <p>In this release, we have made continuing progress on Temporal and other TC39 upcoming specifications, performance optimizations and requested runtime features.</p> <p>Our <a href=\"https://boajs.dev/benchmarks\">benchmarks </a>are showing we&#39;re moving in the right direction and conformance to the specification is also increasing. Check out the full release post or the <a href=\"https://github.com/boa-dev/boa/blob/v0.20/CHANGELOG.md\">changelog</a> for more information!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Jayflux1\"> /u/Jayflux1 </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1h7gdgu/boa_javascript_engine_v020_released/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h7gdgu/boa_javascript_engine_v020_released/\">[comments]</a></span>",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Thousands of (fake?) downloads on crates.io",
      "url": "https://www.reddit.com/r/rust/comments/1h7hqfi/thousands_of_fake_downloads_on_cratesio/",
      "date": 1733427500,
      "author": "/u/wowisthatreal",
      "unread": true,
      "desc": "",
      "content": "<!-- SC_OFF --><div class=\"md\"><p>I&#39;ve published a few crates on <a href=\"http://crates.io\">crates.io</a> that I don&#39;t really think anyone but me really would have any interest in, and I&#39;ve searched far and wide for anything that uses a part of my crate. Yet when looking at my download statistics, I have around 4000 lifetime downloads that spike at each version.</p> <p>Is there some sort of LLM content scraper/backup/research project that just periodically downloads crates? Do people try out new crates from the &quot;new releases&quot; page? </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/wowisthatreal\"> /u/wowisthatreal </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1h7hqfi/thousands_of_fake_downloads_on_cratesio/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h7hqfi/thousands_of_fake_downloads_on_cratesio/\">[comments]</a></span>",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "This Week in Rust #576",
      "url": "https://www.reddit.com/r/rust/comments/1h7jacb/this_week_in_rust_576/",
      "date": 1733431384,
      "author": "/u/cdmistman",
      "unread": true,
      "desc": "",
      "content": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/cdmistman\"> /u/cdmistman </a> <br/> <span><a href=\"https://this-week-in-rust.org/blog/2024/12/04/this-week-in-rust-576\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h7jacb/this_week_in_rust_576/\">[comments]</a></span>",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Loco v0.13 released: background jobs w/SQLite, jobs admin UI, new rhai-based starter generator",
      "url": "https://www.reddit.com/r/rust/comments/1h7w3ai/loco_v013_released_background_jobs_wsqlite_jobs/",
      "date": 1733470348,
      "author": "/u/jondot1",
      "unread": true,
      "desc": "",
      "content": "<!-- SC_OFF --><div class=\"md\"><p>Hi all,</p> <p><a href=\"http://Loco.rs\">Loco.rs</a> <strong>v0.13.x has been released</strong> with over 40 new additions and fixes (our biggest version yet).</p> <p>Our focus for this milestone was:</p> <p>* <a href=\"https://github.com/loco-rs/loco/tree/master/loco-new\">The new starter generator</a>. With a bit of smart engineering, much more powerful and flexible. A Loco starter is now described with a <code>rhai</code> script, which prepares the ground for anyone to create their own Loco starters, see our default one here: <a href=\"https://github.com/loco-rs/loco/blob/master/loco-new/setup.rhai\">https://github.com/loco-rs/loco/blob/master/loco-new/setup.rhai</a></p> <p>* First class <a href=\"https://loco.rs/docs/processing/workers/\">background jobs</a> experience. We now support <code>sqlite</code> as well as: <code>postgres</code>, <code>redis</code> (<code>valkey</code>), <code>async</code> (threads), <code>foreground</code>.</p> <p>* <a href=\"https://github.com/loco-rs/admin-jobs\">Background jobs admin</a>, standalone project with UI and all, <a href=\"https://github.com/loco-rs/admin-jobs\">https://github.com/loco-rs/admin-jobs</a>, built on Loco, to manage your background jobs with ease.</p> <p>If you haven&#39;t yet given Loco a try, start here: <a href=\"https://loco.rs/docs/getting-started/tour/\">https://loco.rs/docs/getting-started/tour/</a> . It takes 5 minutes to get a full CRUD app running with authentication and everything.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/jondot1\"> /u/jondot1 </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1h7w3ai/loco_v013_released_background_jobs_wsqlite_jobs/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h7w3ai/loco_v013_released_background_jobs_wsqlite_jobs/\">[comments]</a></span>",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Why is u32/i32 faster than u8?",
      "url": "https://www.reddit.com/r/rust/comments/1h7wqx6/why_is_u32i32_faster_than_u8/",
      "date": 1733473272,
      "author": "/u/ClimberSeb",
      "unread": true,
      "desc": "",
      "content": "<!-- SC_OFF --><div class=\"md\"><p>I solved day 5&#39;s advent of code problem with a rust program.</p> <p>There I mainly used <span class=\"md-spoiler-text\">Vec::sort_by, a HashSet::&lt;(i32, i32)&gt; plus some recursive depth first search</span> to solve it.</p> <p>At first I didn&#39;t bother checking how big/small the numbers is in my input so I just used an i32 to store them.</p> <p>After getting the right answer I was curious to see how much faster the code would be with the &quot;right&quot; datatype so I changed the numbers to u8. Then the code ran ~50% slower! I tried with i8, i16, u16 all with about the same performance as using u8. Changing to u32 didn&#39;t make a difference compared to i32, and using u64/i64 made it 73% slower.</p> <p>I don&#39;t know the x86_64 instructions, but I&#39;ve assumed the cost of widening the types would be free on a superscalar architecture even if it needed special instructions to do so. What else could cause the slowdown? Worse hashing performance?</p> <p>---- Edit after comments:</p> <p>The code is here: <a href=\"https://pastebin.com/y0xVWHfs\">https://pastebin.com/y0xVWHfs</a></p> <p>It uses these crates:<br/> aoc-runner = &quot;0.3.0&quot;<br/> aoc-runner-derive = &quot;0.3.0&quot;</p> <p>but one could just include the input file and add a main that calls input_generator with it, followed by calling solve_part2 with the result from input_generator.</p> <p>I&#39;ve benchmarked it with cargo-aoc bench, it compiles the code in release mode when benchmarking. It only benchmarks the solve_part2 function, not the input_generator call.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/ClimberSeb\"> /u/ClimberSeb </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1h7wqx6/why_is_u32i32_faster_than_u8/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h7wqx6/why_is_u32i32_faster_than_u8/\">[comments]</a></span>",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Rustc Trait System Refactor Initiative Update: Stabilizing `-Znext-solver=coherence` | Inside Rust Blog",
      "url": "https://www.reddit.com/r/rust/comments/1h7y9jp/rustc_trait_system_refactor_initiative_update/",
      "date": 1733480161,
      "author": "/u/slanterns",
      "unread": true,
      "desc": "",
      "content": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/slanterns\"> /u/slanterns </a> <br/> <span><a href=\"https://blog.rust-lang.org/inside-rust/2024/12/04/trait-system-refactor-initiative.html\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h7y9jp/rustc_trait_system_refactor_initiative_update/\">[comments]</a></span>",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    }
  ]
}