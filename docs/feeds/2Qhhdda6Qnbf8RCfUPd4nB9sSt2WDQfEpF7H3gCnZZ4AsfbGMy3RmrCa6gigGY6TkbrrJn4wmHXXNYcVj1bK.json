{"id":"2Qhhdda6Qnbf8RCfUPd4nB9sSt2WDQfEpF7H3gCnZZ4AsfbGMy3RmrCa6gigGY6TkbrrJn4wmHXXNYcVj1bK","title":"top scoring links : rust","displayTitle":"Reddit - Rust","url":"https://www.reddit.com/r/rust/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/rust/top/?sort=top&t=day&limit=6","items":[{"title":"A fun pattern: `if 'label: { …; break 'label true; …; false } { … }`","url":"https://www.reddit.com/r/rust/comments/1h8odm4/a_fun_pattern_if_label_break_label_true_false/","date":1733561080,"author":"/u/chris-morgan","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>I just wanted to share this code that I wrote maybe two or three years ago, which I regretfully discarded today. It’s a menace, but I hold that it’s actually pretty readable, and doing <em>definitely</em>-better is surprisingly difficult. I mean, you <em>can</em> be boring and <code>let mut reinstate = false;</code> and <code>reinstate = true; break;</code> and <code>if reinstate</code>, but where’s the fun in that? When you decide you don’t like just <code>reinstate = true; break;</code>, you quickly go to <code>let reinstate = &#39;reinstate { …; false };</code>, and then why bother with binding it to a name when it’s already labelled? Yeah, I can see why I wrote it that way. And it definitely still amuses me.</p> <pre><code>pub fn undefine_style(&amp;mut self, style_name: &amp;str) -&gt; Result&lt;(), RemoveStyleError&gt; { // Be optimistic and remove it. let Some((style_name, removing_style)) = self.styles.remove_entry(style_name) else { return Err(RemoveStyleError::NameNotDefined); }; // Y’know, I’m just going to leave this menace here, because it amuses me. if &#39;reinstate: { for style in self.styles.values() { if let Some(SpeakAs::Style(speak_style)) = &amp;style.speak_as { if *speak_style == removing_style { break &#39;reinstate true; } } if let Some(FormatAs::Style(format_style)) = &amp;style.format_as { if *format_style == removing_style { break &#39;reinstate true; } } if let System::Extends { style: extended_style } = &amp;style.system { if *extended_style == removing_style { break &#39;reinstate true; } } } false } { // Aww. Put it back. self.styles.insert(style_name, removing_style); return Err(RemoveStyleError::StyleStillInUse); } Ok(()) } </code></pre> <hr/> <p><sup>Is this awful enough that I should have applied the “seeking help &amp; advice” flair?</sup></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/chris-morgan\"> /u/chris-morgan </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1h8odm4/a_fun_pattern_if_label_break_label_true_false/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h8odm4/a_fun_pattern_if_label_break_label_true_false/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Shoutout to rstest","url":"https://www.reddit.com/r/rust/comments/1h8oemy/shoutout_to_rstest/","date":1733561208,"author":"/u/owenthewizard","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/owenthewizard\"> /u/owenthewizard </a> <br/> <span><a href=\"https://crates.io/crates/rstest\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h8oemy/shoutout_to_rstest/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Rendering Tiny Glades (a game written in Rust) With Entirely Too Much Ray Marching","url":"https://www.reddit.com/r/rust/comments/1h8pbgp/rendering_tiny_glades_a_game_written_in_rust_with/","date":1733565394,"author":"/u/nominolo","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/nominolo\"> /u/nominolo </a> <br/> <span><a href=\"https://www.youtube.com/watch?v=jusWW2pPnA0\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h8pbgp/rendering_tiny_glades_a_game_written_in_rust_with/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"How to refine traits by refining typedef properly in rust?","url":"https://www.reddit.com/r/rust/comments/1h8wkao/how_to_refine_traits_by_refining_typedef_properly/","date":1733590143,"author":"/u/RishabhRD","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>I recently faced a problem while refining traits in rust. Let me explain my situation to you:</p> <p>Lets start with a some basic traits:</p> <pre><code>pub trait SemiRegular: Eq {} pub trait Regular: SemiRegular + Clone {} </code></pre> <p>Here clearly Regular is SemiRegular with some additional capabilities.</p> <p>Now, let&#39;s say I want to use this trait to somehow define Collection:</p> <pre><code>trait Collection { type Iterator: SemiRegular; } trait RegularCollection: Collection where Self::Iterator: Regular, {} </code></pre> <p>Here we see RegularCollection just refines Collection with refining the constraints on Iterator typedef.</p> <p>Now, if I write any function on RegularCollection like this:</p> <pre><code>fn f&lt;C&gt;(arr: &amp;C) where C: RegularCollection, {} </code></pre> <p>compiler complains that, I need to explicitly mention C::Iterator: Regular. However, that should be implicit right? I mean that is the definition of RegularCollection itself. And this is leading to very verbose code like this:</p> <pre><code>fn f&lt;C&gt;(arr: &amp;C) where C: RegularCollection, C::Iterator: Regular, { } </code></pre> <p>(Well, this doesn&#39;t seem verbose here... consider you need to write C::Iterator: Regular all the times you use RegularCollection, how it would feel).</p> <p>Is there anyway, I can actually write it properly without mentioning C::iterator: Regular all the time? Or is my way to define RegularCollection itself is flawed? I don&#39;t know how to achieve it in idiomatic rust way because I am very very new to rust.</p> <p>Thank You </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/RishabhRD\"> /u/RishabhRD </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1h8wkao/how_to_refine_traits_by_refining_typedef_properly/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h8wkao/how_to_refine_traits_by_refining_typedef_properly/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"How do you guys inject services into handler without cloning?","url":"https://www.reddit.com/r/rust/comments/1h91n86/how_do_you_guys_inject_services_into_handler/","date":1733603844,"author":"/u/mk111100","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>New to rust trying to figure how to inject a ref to a svc into handler without upsetting the compiler? Do you guys clone it?</p> <p>Is there a project I can take inspiration from?</p> <p>Using Axum</p> <p>Edit:<br/> <a href=\"https://www.reddit.com/r/rust/comments/gbdwdx/best_way_to_pass_shared_dataservice_to_warp/\">Another post with same issue for ref</a></p> <p>Edit 2</p> <p><a href=\"https://github.com/lahen82179/burner-repo/blob/main/src/controller/mod.rs\">https://github.com/lahen82179/burner-repo/blob/main/src/controller/mod.rs</a><br/> <a href=\"https://github.com/lahen82179/burner-repo/blob/main/src/services/decoding_service.rs\">https://github.com/lahen82179/burner-repo/blob/main/src/services/decoding_service.rs</a><br/> <a href=\"https://github.com/lahen82179/burner-repo/blob/main/src/controller/handler.rs\">https://github.com/lahen82179/burner-repo/blob/main/src/controller/handler.rs</a></p> <p>Here uploaded my code here for ref</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/mk111100\"> /u/mk111100 </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1h91n86/how_do_you_guys_inject_services_into_handler/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h91n86/how_do_you_guys_inject_services_into_handler/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"RFC 3681: Default field values","url":"https://www.reddit.com/r/rust/comments/1h95zfo/rfc_3681_default_field_values/","date":1733616341,"author":"/u/wowisthatreal","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/wowisthatreal\"> /u/wowisthatreal </a> <br/> <span><a href=\"https://github.com/rust-lang/rust/issues/132162\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h95zfo/rfc_3681_default_field_values/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""}]}