{"id":"2Qhhdda6Qnbf8RCfUPd4nB9sSt2WDQfEpF7H3gCnZZ4AsfbGMy3RmrCa6gigGY6TkbrrJn4wmHXXNYcVj1bK","title":"top scoring links : rust","displayTitle":"Reddit - Rust","url":"https://www.reddit.com/r/rust/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/rust/top/?sort=top&t=day&limit=6","items":[{"title":"How to refine traits by refining typedef properly in rust?","url":"https://www.reddit.com/r/rust/comments/1h8wkao/how_to_refine_traits_by_refining_typedef_properly/","date":1733590143,"author":"/u/RishabhRD","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>I recently faced a problem while refining traits in rust. Let me explain my situation to you:</p> <p>Lets start with a some basic traits:</p> <pre><code>pub trait SemiRegular: Eq {} pub trait Regular: SemiRegular + Clone {} </code></pre> <p>Here clearly Regular is SemiRegular with some additional capabilities.</p> <p>Now, let&#39;s say I want to use this trait to somehow define Collection:</p> <pre><code>trait Collection { type Iterator: SemiRegular; } trait RegularCollection: Collection where Self::Iterator: Regular, {} </code></pre> <p>Here we see RegularCollection just refines Collection with refining the constraints on Iterator typedef.</p> <p>Now, if I write any function on RegularCollection like this:</p> <pre><code>fn f&lt;C&gt;(arr: &amp;C) where C: RegularCollection, {} </code></pre> <p>compiler complains that, I need to explicitly mention C::Iterator: Regular. However, that should be implicit right? I mean that is the definition of RegularCollection itself. And this is leading to very verbose code like this:</p> <pre><code>fn f&lt;C&gt;(arr: &amp;C) where C: RegularCollection, C::Iterator: Regular, { } </code></pre> <p>(Well, this doesn&#39;t seem verbose here... consider you need to write C::Iterator: Regular all the times you use RegularCollection, how it would feel).</p> <p>Is there anyway, I can actually write it properly without mentioning C::iterator: Regular all the time? Or is my way to define RegularCollection itself is flawed? I don&#39;t know how to achieve it in idiomatic rust way because I am very very new to rust.</p> <p>Thank You </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/RishabhRD\"> /u/RishabhRD </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1h8wkao/how_to_refine_traits_by_refining_typedef_properly/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h8wkao/how_to_refine_traits_by_refining_typedef_properly/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"How do you guys inject services into handler without cloning?","url":"https://www.reddit.com/r/rust/comments/1h91n86/how_do_you_guys_inject_services_into_handler/","date":1733603844,"author":"/u/mk111100","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>New to rust trying to figure how to inject a ref to a svc into handler without upsetting the compiler? Do you guys clone it?</p> <p>Is there a project I can take inspiration from?</p> <p>Using Axum</p> <p>Edit:<br/> <a href=\"https://www.reddit.com/r/rust/comments/gbdwdx/best_way_to_pass_shared_dataservice_to_warp/\">Another post with same issue for ref</a></p> <p>Edit 2</p> <p><a href=\"https://github.com/lahen82179/burner-repo/blob/main/src/controller/mod.rs\">https://github.com/lahen82179/burner-repo/blob/main/src/controller/mod.rs</a><br/> <a href=\"https://github.com/lahen82179/burner-repo/blob/main/src/services/decoding_service.rs\">https://github.com/lahen82179/burner-repo/blob/main/src/services/decoding_service.rs</a><br/> <a href=\"https://github.com/lahen82179/burner-repo/blob/main/src/controller/handler.rs\">https://github.com/lahen82179/burner-repo/blob/main/src/controller/handler.rs</a></p> <p>Here uploaded my code here for ref</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/mk111100\"> /u/mk111100 </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1h91n86/how_do_you_guys_inject_services_into_handler/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h91n86/how_do_you_guys_inject_services_into_handler/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"RFC 3681: Default field values","url":"https://www.reddit.com/r/rust/comments/1h95zfo/rfc_3681_default_field_values/","date":1733616341,"author":"/u/wowisthatreal","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/wowisthatreal\"> /u/wowisthatreal </a> <br/> <span><a href=\"https://github.com/rust-lang/rust/issues/132162\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h95zfo/rfc_3681_default_field_values/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Snap me out of the Rust honeymoon","url":"https://www.reddit.com/r/rust/comments/1h98lmw/snap_me_out_of_the_rust_honeymoon/","date":1733624486,"author":"/u/homeslicerae","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>I just started learning Rust and I&#39;m using it to develop the backend server for a side project. I began by reading The Book and doing some Rustlings exercises but mostly jumped straight in with the Axum / Tokio with their websocket example template.</p> <p>I&#39;m right in the honeymoon.</p> <p>I come from a frontend-focused React and TypeScript background at my day job. Compared to that:</p> <p>I can immediately view the source code of the packages and see the comments left by the author using my LSP. And I can even tweak it with debug statements like any old Javascript node module.</p> <p>The type system is fully sound and has first-class support for discriminated unions with the enums and match statements. With Typescript, you can never get over the fact that it&#39;s just a thin, opt-in wrapper on Javascript. And all of the dangers associated with that.</p> <p>Serde, etc. Wow, the power granted by using macros is insane</p> <p>And best yet, the borrow checker and lifetime system. Its purpose is to ensure your code is memory-safe and cleaned up without needing a garbage collector, sure. But it seems that by forcing you to deeply consider the scope of your data, it also guides you to write more sensible designs from a pure maintainability and readability standpoint as well.</p> <p>And tests are built into the language! I don&#39;t have to fuss around with third-party libraries, all with their weird quirks. Dealing with maintaining a completely different transpilation layer for Jest just to write my unit tests... is not fun.</p> <p>Is this language not the holy grail for software engineers who want it all? Fast, correct, and maintainable?</p> <p>Snap me out of my honeymoon. What dangers lurk beneath the surface? </p> <p>Will the strictness of the compiler haunt me in the future when what should be a simple fix to a badly assumed data type of a struct leads me to a 1 month refactor tirade before my codebase even compiles again?</p> <p>Will compiler times creep up longer and longer until I&#39;m eventually spending most of the day staring at my computer praying I got it right?</p> <p>Is managing memory overrated after all, and I&#39;ll find myself cursing at the compiler when I know that my code is sound, but it just won&#39;t get the memo?</p> <p>What is it that led engineer YouTubers like Prime Reacts, who programmed Rust professionally for over 3 years, to decide that GoLang is good enough after all?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/homeslicerae\"> /u/homeslicerae </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1h98lmw/snap_me_out_of_the_rust_honeymoon/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h98lmw/snap_me_out_of_the_rust_honeymoon/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"I created acoustic echo cancellation library","url":"https://www.reddit.com/r/rust/comments/1h98pyc/i_created_acoustic_echo_cancellation_library/","date":1733624887,"author":"/u/WeatherZealousideal5","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Hi everyone!</p> <p>Lately, I&#39;ve been working on an echo cancellation solution for my local assistant project with Ollama. If you&#39;ve tried ChatGPT&#39;s advanced voice mode, you may have noticed that they recently added the ability to seamlessly interrupt the assistant while it talks. This functionality intrigued me, and I wanted to understand how it works so well in ChatGPT.</p> <p>It turns out, the key is echo cancellation. When you have TTS (text-to-speech) samples playing through the speakers, or even just the speaker&#39;s samples, it&#39;s possible to filter out the echo (though the algorithm behind it isn&#39;t simple).</p> <p>I found a C library called Speex, which handles echo cancellation. I then created Rust bindings for it and packaged it into two crates: <code>aec-rs-sys</code> and <code>aec-rs</code>. The next step was to make this useful in other languages, which was a great opportunity to practice writing C APIs in Rust. So, I wrote a wrapper crate with extern functions, using CBindgen to create the necessary C headers.</p> <p>I even added GitHub Actions CI to publish it as a C archive library. Then, I went a step further and created a Python package that embeds the precompiled Rust-C library and exposes high-level functions, making it fast and easy to use!</p> <p>The result is a set of Rust and Python libs that are both efficient and easy to integrate into projects. Plus, I learned how to create a reliable and organized C API in Rust that can be used in any language (let me know if it’s really organized : ).</p> <p>Still, I&#39;m wondering: Do we need a stable ABI at this point? It wasn’t too bad to create the extern wrapper, but I’d love to hear your thoughts.</p> <p>Check it out on GitHub: <a href=\"https://github.com/thewh1teagle/aec-rs\">aec-rs</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/WeatherZealousideal5\"> /u/WeatherZealousideal5 </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1h98pyc/i_created_acoustic_echo_cancellation_library/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h98pyc/i_created_acoustic_echo_cancellation_library/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Rust ❤️ LLVM by Nikita Popov","url":"https://www.reddit.com/r/rust/comments/1h9bdbr/rust_llvm_by_nikita_popov/","date":1733634012,"author":"/u/sabitm","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/sabitm\"> /u/sabitm </a> <br/> <span><a href=\"https://www.youtube.com/watch?v=Kqz-umsAnk8\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1h9bdbr/rust_llvm_by_nikita_popov/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""}]}