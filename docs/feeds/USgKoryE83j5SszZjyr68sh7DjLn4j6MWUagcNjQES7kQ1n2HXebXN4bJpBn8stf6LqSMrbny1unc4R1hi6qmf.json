{"id":"USgKoryE83j5SszZjyr68sh7DjLn4j6MWUagcNjQES7kQ1n2HXebXN4bJpBn8stf6LqSMrbny1unc4R1hi6qmf","title":"top scoring links : golang","displayTitle":"Reddit - Go","url":"https://www.reddit.com/r/golang/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/golang/top/?sort=top&t=day&limit=6","items":[{"title":"cmd-stream/Protobuf is about 2.5 times faster than gRPC/Protobuf","url":"https://www.reddit.com/r/golang/comments/1hacd4r/cmdstreamprotobuf_is_about_25_times_faster_than/","date":1733758428,"author":"/u/ymz-ncnk","unread":true,"desc":"","content":"<table> <tr><td> <a href=\"https://www.reddit.com/r/golang/comments/1hacd4r/cmdstreamprotobuf_is_about_25_times_faster_than/\"> <img src=\"https://external-preview.redd.it/2uCQpiKUOUqpJS09YSUaWMRsG8ChWEYLAxGMh2QDg34.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=168c48cd9f1c8e0fd54838342037404d57136f55\" alt=\"cmd-stream/Protobuf is about 2.5 times faster than gRPC/Protobuf\" title=\"cmd-stream/Protobuf is about 2.5 times faster than gRPC/Protobuf\" /> </a> </td><td> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/ymz-ncnk\"> /u/ymz-ncnk </a> <br/> <span><a href=\"https://github.com/ymz-ncnk/go-client-server-communication-benchmarks\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hacd4r/cmdstreamprotobuf_is_about_25_times_faster_than/\">[comments]</a></span> </td></tr></table>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Best observability setup with Go.","url":"https://www.reddit.com/r/golang/comments/1haeewd/best_observability_setup_with_go/","date":1733763666,"author":"/u/Used_Frosting6770","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Currently, I have a setup where errors are logged at the HTTP layer and saved into a temporary file. This file is later read, indexed, and displayed using Grafana, Loki, and Promtail. I want to improve this setup. GPT recommended using Logrus for structured logging and the ELK stack.</p> <p>I&#39;m curious about what others are using for similar purposes. My goal is to have a dashboard to view all logs, monitor resource usage and set up email alerts for specific error patterns.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Used_Frosting6770\"> /u/Used_Frosting6770 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1haeewd/best_observability_setup_with_go/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1haeewd/best_observability_setup_with_go/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"I built my personal website completely in Go","url":"https://www.reddit.com/r/golang/comments/1hahlgs/i_built_my_personal_website_completely_in_go/","date":1733771389,"author":"/u/mxr_9","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>For over a year, I worked on developing a complete website for myself in Go, templ and htmx. I want to share with you the source code as I think it could be potentially useful for study. At its core, the site is a <a href=\"http://fontseca.dev/work/fontseca-dev-s-rpc-like-api\">RPC-like API</a> with a collection of 70+ methods that provide me flexibility in action; it is, structurally, similar to <a href=\"https://api.slack.com/web\">APIs like Slack&#39;s</a>. (I also built <a href=\"https://www.fontseca.dev/playground\">a playground</a> to play around third party APIs or mine.) </p> <p>â€¢ Website accessible at: <a href=\"https://www.fontseca.dev/\">https://www.fontseca.dev</a><br/> â€¢ Source code: <a href=\"https://github.com/fontseca/fontseca.dev\">https://github.com/fontseca/.dev</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/mxr_9\"> /u/mxr_9 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hahlgs/i_built_my_personal_website_completely_in_go/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hahlgs/i_built_my_personal_website_completely_in_go/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"gARM Advanced ARM64 Compiler for High-Performance on the GO","url":"https://www.reddit.com/r/golang/comments/1hak1ul/garm_advanced_arm64_compiler_for_highperformance/","date":1733777506,"author":"/u/Capable-Spinach10","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Hackers unite let&#39;s lift Go to new heights together, over the past weeks I&#39;ve been working on gARM (<a href=\"https://github.com/go-dockly/garm\">https://github.com/go-dockly/garm</a>) because of being unhappy with go&#39;s current state of Plan9 assembly mess and the many arm64 capabilities that remain untapped. Circumstance forces me to release a still unfinished PoC before its time, but gosh do I want to see gARM become a reality. Consider becoming an early contributor and carve out your marble in the hall of legends. I look forward to a sparring with You. Just a ðŸŒŸ would mean the ðŸŒŽ Thank you so much !</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Capable-Spinach10\"> /u/Capable-Spinach10 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hak1ul/garm_advanced_arm64_compiler_for_highperformance/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hak1ul/garm_advanced_arm64_compiler_for_highperformance/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Go surpasses Node.js for API Client Language Popularity in 2024 according to Cloudflare Radar report","url":"https://www.reddit.com/r/golang/comments/1hakue9/go_surpasses_nodejs_for_api_client_language/","date":1733779474,"author":"/u/gbrayut","unread":true,"desc":"","content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/gbrayut\"> /u/gbrayut </a> <br/> <span><a href=\"https://radar.cloudflare.com/year-in-review/2024#api-client-language-popularity\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hakue9/go_surpasses_nodejs_for_api_client_language/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Type inference, generics","url":"https://www.reddit.com/r/golang/comments/1hax54q/type_inference_generics/","date":1733818657,"author":"/u/Saarbremer","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Type inference is a very powerful tool in statically typed languages like go. With static typing and type inference we can write code easily and still benefit from all the luxury static typing has to offer: A lot of programs will be rejected due to inconsistency of data handling which avoids a lot of bugs and unwanted runtime panics.</p> <p>However, I wonder if type inference for generics could be more complete when it comes to generics. The blog entry <a href=\"https://go.dev/blog/type-inference\">on type inference</a> is quite complete on how type inference works. It also discusses shortly type inference for generics. </p> <p>But I wonder if go should evolve to more:</p> <p>Here&#39;s an example that will fail at three locations, although only one is expected to fail with full type inference: <a href=\"https://go.dev/play/p/F7ZwEcip-F7\">https://go.dev/play/p/F7ZwEcip-F7</a></p> <p>The type of the generic functions could easily be deducted when doing a backward propagation. Is compilation time the only reason to not support this kind of type inference or am I missing something completely? </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Saarbremer\"> /u/Saarbremer </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hax54q/type_inference_generics/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hax54q/type_inference_generics/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""}]}