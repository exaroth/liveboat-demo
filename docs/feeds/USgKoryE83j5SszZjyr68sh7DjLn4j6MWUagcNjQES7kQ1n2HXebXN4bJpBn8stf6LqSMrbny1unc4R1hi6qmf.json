{
  "id": "USgKoryE83j5SszZjyr68sh7DjLn4j6MWUagcNjQES7kQ1n2HXebXN4bJpBn8stf6LqSMrbny1unc4R1hi6qmf",
  "title": "top scoring links : golang",
  "displayTitle": "Reddit - Go",
  "url": "https://www.reddit.com/r/golang/top/.rss?sort=top&t=day&limit=6",
  "feedLink": "https://www.reddit.com/r/golang/top/?sort=top&t=day&limit=6",
  "items": [
    {
      "title": "Example app with SAML support, built with Go + net/http + SSOReady",
      "url": "https://www.reddit.com/r/golang/comments/1h7hi6g/example_app_with_saml_support_built_with_go/",
      "date": 1733426929,
      "author": "/u/Asleep_Beyond1371",
      "unread": true,
      "desc": "",
      "content": "<table> <tr><td> <a href=\"https://www.reddit.com/r/golang/comments/1h7hi6g/example_app_with_saml_support_built_with_go/\"> <img src=\"https://external-preview.redd.it/HK4riNmOY7SfP4w_qxXUGvcAMwJ_gx8NVPCSJ9ZSiHA.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=1d7179be5d1286b75919ec2db720f59a298e4d26\" alt=\"Example app with SAML support, built with Go + net/http + SSOReady\" title=\"Example app with SAML support, built with Go + net/http + SSOReady\" /> </a> </td><td> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Asleep_Beyond1371\"> /u/Asleep_Beyond1371 </a> <br/> <span><a href=\"https://github.com/ssoready/ssoready-example-app-golang-saml\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1h7hi6g/example_app_with_saml_support_built_with_go/\">[comments]</a></span> </td></tr></table>",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Why Clean Architecture and Over-Engineered Layering Don’t Belong in GoLang",
      "url": "https://www.reddit.com/r/golang/comments/1h7jajk/why_clean_architecture_and_overengineered/",
      "date": 1733431399,
      "author": "/u/Superb-Key-6581",
      "unread": true,
      "desc": "",
      "content": "<!-- SC_OFF --><div class=\"md\"><p>Stop forcing Clean Architecture and similar patterns into GoLang projects. GoLang is not Java. There’s no application size or complexity that justifies having more than three layers. Architectures like Clean, Hexagonal, or anything with 4+ layers make GoLang projects unnecessarily convoluted.</p> <p>It’s frustrating to work on a codebase where you’re constantly jumping between excessive layers—unnecessary DI, weird abstractions, and use case layers that do nothing except call services with a few added logs. It’s like watching a monstrosity throw exceptions up and down without purpose.</p> <p>In GoLang, you only need up to three layers for a proper DDD division (app, domain, infra). Anything more is pure overengineering. I get why this is common in Java—explicit interfaces and painful refactoring make layering and DI appealing—but GoLang doesn’t have those constraints. Its implicit interfaces make such patterns redundant.</p> <p>These overly complex architectures are turning the GoLang ecosystem into something it was never meant to be. Please let’s keep GoLang simple, efficient, and aligned with its core philosophy. </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Superb-Key-6581\"> /u/Superb-Key-6581 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1h7jajk/why_clean_architecture_and_overengineered/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1h7jajk/why_clean_architecture_and_overengineered/\">[comments]</a></span>",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Go API project",
      "url": "https://www.reddit.com/r/golang/comments/1h7k9kn/go_api_project/",
      "date": 1733433812,
      "author": "/u/RaspberryOk8319",
      "unread": true,
      "desc": "",
      "content": "<!-- SC_OFF --><div class=\"md\"><p>Hello everyone, </p> <p>A couple of months ago I started building an api to handle some basic stuff for my backend like fetching services and vendors. I was watching Anthony gg at the time and in particular his api 5-part playlist videos where he builds an api from scratch with minimal dependencies.<br/> It kinda happened very fast but as of right now my api.go file is handling about 35 endpoints varying from add vendors to add products and I am planning on adding endpoints for ordering as well.<br/> I had experience with go in the past but I have never made anything similar to this. So is there any suggestions or recommendations you can give me for breaking down this api.go file into several other packages and kinda organize things more efficiently ?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/RaspberryOk8319\"> /u/RaspberryOk8319 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1h7k9kn/go_api_project/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1h7k9kn/go_api_project/\">[comments]</a></span>",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "What's Missing From Golang Generics?",
      "url": "https://www.reddit.com/r/golang/comments/1h7sccx/whats_missing_from_golang_generics/",
      "date": 1733456671,
      "author": "/u/nick_at_dolt",
      "unread": true,
      "desc": "",
      "content": "<table> <tr><td> <a href=\"https://www.reddit.com/r/golang/comments/1h7sccx/whats_missing_from_golang_generics/\"> <img src=\"https://external-preview.redd.it/_59Nwz4qwk2TxmiNHif5Zxt8nt1zuXEYXd9npdKB1XY.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=6c2948fbfe9b275def2fd8b5ad0b0e91327345ba\" alt=\"What's Missing From Golang Generics?\" title=\"What's Missing From Golang Generics?\" /> </a> </td><td> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/nick_at_dolt\"> /u/nick_at_dolt </a> <br/> <span><a href=\"https://www.dolthub.com/blog/2024-12-05-whats-missing-from-golang-generics/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1h7sccx/whats_missing_from_golang_generics/\">[comments]</a></span> </td></tr></table>",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Final Year Project Idea",
      "url": "https://www.reddit.com/r/golang/comments/1h7vwpg/final_year_project_idea/",
      "date": 1733469547,
      "author": "/u/noobgopher",
      "unread": true,
      "desc": "",
      "content": "<!-- SC_OFF --><div class=\"md\"><p>Hello everyone,</p> <p>I’m currently in the final year of my B.Tech in Computer Science and Engineering. I’m looking for project ideas that integrate Machine Learning, Golang, and Web Development. Specifically, I’m interested in full-stack machine learning projects.</p> <p>I would appreciate your suggestions!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/noobgopher\"> /u/noobgopher </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1h7vwpg/final_year_project_idea/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1h7vwpg/final_year_project_idea/\">[comments]</a></span>",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "Performance comparison of various golang web frameworks with stdlib",
      "url": "https://www.reddit.com/r/golang/comments/1h7wbai/performance_comparison_of_various_golang_web/",
      "date": 1733471322,
      "author": "/u/cant-find-user-name",
      "unread": true,
      "desc": "",
      "content": "<!-- SC_OFF --><div class=\"md\"><p>So, one thing I have noticed happen very frequently is that people pick up fiber or fasthttp to be their http framework of choice because fiber is so much more performant* than stdlib. Even though fiber docs itself say not to choose fiber unless you have really really good reasons (because most middlewares aren&#39;t compatibile with it, it doesn&#39;t implement the full http spec etc), people still pick it. In vast, vast, vast majority of usecases, the web framework&#39;s performance doesn&#39;t matter except in whiteroom benchmarks. You add one db call, one network request, hell one json parsing operation of a decent payload size, and the web framework&#39;s impact becomes infinetisimally small.</p> <p>But anyway, I came across this video recently: <a href=\"https://youtu.be/iPnMPnelWOE?si=QUpd3N5KD9LQ2foM\">https://youtu.be/iPnMPnelWOE?si=QUpd3N5KD9LQ2foM</a> and wanted to share it here. In the benchmarks that invovle json parsing and interacting with postgres, stdlib performs the best (and the difference is in the order of microseconds, it doesn&#39;t matter), and even in barebones test, stdlib performs better until 15k RPS. 15k RPS is very very high, I guarantee you that if one of your webservers has to meet 15k rps, there&#39;s many other things you have to worry about before the framework choice.</p> <p>If you want to choose something other than stdlib for the sake of ergonomics, that is 100% valid and I am not against it. But don&#39;t make that choice in the name of performance unless you have a very specific kind of traffic.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/cant-find-user-name\"> /u/cant-find-user-name </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1h7wbai/performance_comparison_of_various_golang_web/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1h7wbai/performance_comparison_of_various_golang_web/\">[comments]</a></span>",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    }
  ]
}